{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "main.c",
			"settings":
			{
				"buffer_size": 38774,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					207,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAJoGAAAAAAAAmwYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgYAAAAAAACaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"left_delete",
					null,
					"AQAAAJoGAAAAAAAAmgYAAAAAAAABAAAAcA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwYAAAAAAACbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJoGAAAAAAAAnAYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgYAAAAAAACaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "1-"
					},
					"AgAAAJsGAAAAAAAAnAYAAAAAAAAAAAAAnAYAAAAAAACdBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwYAAAAAAACbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					2,
					"left_delete",
					null,
					"AgAAAJwGAAAAAAAAnAYAAAAAAAABAAAALZsGAAAAAAAAmwYAAAAAAAABAAAAMQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQYAAAAAAACdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "-1"
					},
					"AgAAAJsGAAAAAAAAnAYAAAAAAAAAAAAAnAYAAAAAAACdBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwYAAAAAAACbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAJ8GAAAAAAAAoAYAAAAAAAAAAAAAoAYAAAAAAAChBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnwYAAAAAAACfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " 0."
					},
					"AwAAAKEGAAAAAAAAogYAAAAAAAAAAAAAogYAAAAAAACjBgAAAAAAAAAAAACjBgAAAAAAAKQGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQYAAAAAAAChBgAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "0f"
					},
					"AgAAAKQGAAAAAAAApQYAAAAAAAAAAAAApQYAAAAAAACmBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAYAAAAAAACkBgAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					4,
					"left_delete",
					null,
					"BAAAAKUGAAAAAAAApQYAAAAAAAABAAAAZqQGAAAAAAAApAYAAAAAAAABAAAAMKMGAAAAAAAAowYAAAAAAAABAAAALqIGAAAAAAAAogYAAAAAAAABAAAAMA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgYAAAAAAACmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "vec4"
					},
					"BAAAAKIGAAAAAAAAowYAAAAAAAAAAAAAowYAAAAAAACkBgAAAAAAAAAAAACkBgAAAAAAAKUGAAAAAAAAAAAAAKUGAAAAAAAApgYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogYAAAAAAACiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKYGAAAAAAAAqAYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgYAAAAAAACmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "0.0f"
					},
					"BAAAAKcGAAAAAAAAqAYAAAAAAAAAAAAAqAYAAAAAAACpBgAAAAAAAAAAAACpBgAAAAAAAKoGAAAAAAAAAAAAAKoGAAAAAAAAqwYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwYAAAAAAACnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					21,
					"left_delete",
					null,
					"FQAAAKEGAAAAAAAAoQYAAAAAAAABAAAAIKAGAAAAAAAAoAYAAAAAAAABAAAAKp8GAAAAAAAAnwYAAAAAAAABAAAAIJ4GAAAAAAAAngYAAAAAAAABAAAAXZ0GAAAAAAAAnQYAAAAAAAABAAAAXZwGAAAAAAAAnAYAAAAAAAABAAAAMZsGAAAAAAAAmwYAAAAAAAABAAAALZoGAAAAAAAAmgYAAAAAAAABAAAAW5kGAAAAAAAAmQYAAAAAAAABAAAAc5gGAAAAAAAAmAYAAAAAAAABAAAAZJcGAAAAAAAAlwYAAAAAAAABAAAASZYGAAAAAAAAlgYAAAAAAAABAAAAZZUGAAAAAAAAlQYAAAAAAAABAAAAbpQGAAAAAAAAlAYAAAAAAAABAAAAb5MGAAAAAAAAkwYAAAAAAAABAAAAYpIGAAAAAAAAkgYAAAAAAAABAAAAW5EGAAAAAAAAkQYAAAAAAAABAAAAc5AGAAAAAAAAkAYAAAAAAAABAAAAZY8GAAAAAAAAjwYAAAAAAAABAAAAbo4GAAAAAAAAjgYAAAAAAAABAAAAb40GAAAAAAAAjQYAAAAAAAABAAAAYg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogYAAAAAAACiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAJgGAAAAAAAAmQYAAAAAAAAAAAAAmQYAAAAAAACaBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmAYAAAAAAACYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "mat4"
					},
					"BQAAAI0GAAAAAAAAjgYAAAAAAAAAAAAAjgYAAAAAAACOBgAAAAAAAAQAAAB2ZWM0jgYAAAAAAACPBgAAAAAAAAAAAACPBgAAAAAAAJAGAAAAAAAAAAAAAJAGAAAAAAAAkQYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQYAAAAAAACRBgAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "totalPosition"
					},
					"DgAAAH0GAAAAAAAAfgYAAAAAAAAAAAAAfgYAAAAAAAB+BgAAAAAAAA0AAABib25lVHJhbnNmb3JtfgYAAAAAAAB/BgAAAAAAAAAAAAB/BgAAAAAAAIAGAAAAAAAAAAAAAIAGAAAAAAAAgQYAAAAAAAAAAAAAgQYAAAAAAACCBgAAAAAAAAAAAACCBgAAAAAAAIMGAAAAAAAAAAAAAIMGAAAAAAAAhAYAAAAAAAAAAAAAhAYAAAAAAACFBgAAAAAAAAAAAACFBgAAAAAAAIYGAAAAAAAAAAAAAIYGAAAAAAAAhwYAAAAAAAAAAAAAhwYAAAAAAACIBgAAAAAAAAAAAACIBgAAAAAAAIkGAAAAAAAAAAAAAIkGAAAAAAAAigYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfQYAAAAAAACKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": "\n:"
					},
					"AwAAAJsGAAAAAAAAnAYAAAAAAAAAAAAAnAYAAAAAAACdBgAAAAAAAAAAAACdBgAAAAAAAJ4GAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwYAAAAAAACbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"left_delete",
					null,
					"AQAAAJ0GAAAAAAAAnQYAAAAAAAABAAAAOg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngYAAAAAAACeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJ0GAAAAAAAAnwYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQYAAAAAAACdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "\tfor("
					},
					"BQAAAJ4GAAAAAAAAnwYAAAAAAAAAAAAAnwYAAAAAAACgBgAAAAAAAAAAAACgBgAAAAAAAKEGAAAAAAAAAAAAAKEGAAAAAAAAogYAAAAAAAAAAAAAogYAAAAAAACjBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngYAAAAAAACeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAKMGAAAAAAAApAYAAAAAAAAAAAAApAYAAAAAAAClBgAAAAAAAAAAAAClBgAAAAAAAKYGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowYAAAAAAACjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAKYGAAAAAAAApwYAAAAAAAAAAAAApwYAAAAAAACoBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgYAAAAAAACmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKgGAAAAAAAAqQYAAAAAAAAAAAAAqQYAAAAAAACqBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqAYAAAAAAACoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAAKoGAAAAAAAAqwYAAAAAAAAAAAAAqwYAAAAAAACsBgAAAAAAAAAAAACsBgAAAAAAAK0GAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgYAAAAAAACqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAK0GAAAAAAAArgYAAAAAAAAAAAAArgYAAAAAAACvBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArQYAAAAAAACtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": " <"
					},
					"AgAAAK8GAAAAAAAAsAYAAAAAAAAAAAAAsAYAAAAAAACxBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwYAAAAAAACvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALEGAAAAAAAAsgYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQYAAAAAAACxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "MAX_BONE_I"
					},
					"CgAAALIGAAAAAAAAswYAAAAAAAAAAAAAswYAAAAAAAC0BgAAAAAAAAAAAAC0BgAAAAAAALUGAAAAAAAAAAAAALUGAAAAAAAAtgYAAAAAAAAAAAAAtgYAAAAAAAC3BgAAAAAAAAAAAAC3BgAAAAAAALgGAAAAAAAAAAAAALgGAAAAAAAAuQYAAAAAAAAAAAAAuQYAAAAAAAC6BgAAAAAAAAAAAAC6BgAAAAAAALsGAAAAAAAAAAAAALsGAAAAAAAAvAYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgYAAAAAAACyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": "NFLUENCE"
					},
					"CAAAALwGAAAAAAAAvQYAAAAAAAAAAAAAvQYAAAAAAAC+BgAAAAAAAAAAAAC+BgAAAAAAAL8GAAAAAAAAAAAAAL8GAAAAAAAAwAYAAAAAAAAAAAAAwAYAAAAAAADBBgAAAAAAAAAAAADBBgAAAAAAAMIGAAAAAAAAAAAAAMIGAAAAAAAAwwYAAAAAAAAAAAAAwwYAAAAAAADEBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAYAAAAAAAC8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMQGAAAAAAAAxQYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAYAAAAAAADEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"insert",
					{
						"characters": " i++)"
					},
					"BQAAAMUGAAAAAAAAxgYAAAAAAAAAAAAAxgYAAAAAAADHBgAAAAAAAAAAAADHBgAAAAAAAMgGAAAAAAAAAAAAAMgGAAAAAAAAyQYAAAAAAAAAAAAAyQYAAAAAAADKBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQYAAAAAAADFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": " {\\n"
					},
					"BAAAAMoGAAAAAAAAywYAAAAAAAAAAAAAywYAAAAAAADMBgAAAAAAAAAAAADMBgAAAAAAAM0GAAAAAAAAAAAAAM0GAAAAAAAAzgYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygYAAAAAAADKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": "\n:"
					},
					"AwAAAM8GAAAAAAAA0AYAAAAAAAAAAAAA0AYAAAAAAADRBgAAAAAAAAAAAADRBgAAAAAAANIGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzwYAAAAAAADPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAANIGAAAAAAAA1AYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gYAAAAAAADSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAANIGAAAAAAAA0gYAAAAAAAABAAAAItIGAAAAAAAA0gYAAAAAAAABAAAAIg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0wYAAAAAAADTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"left_delete",
					null,
					"AQAAANEGAAAAAAAA0QYAAAAAAAABAAAAOg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gYAAAAAAADSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAANEGAAAAAAAA0wYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0QYAAAAAAADRBgAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAANIGAAAAAAAA0wYAAAAAAAAAAAAA0wYAAAAAAADUBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gYAAAAAAADSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "if(boneIds"
					},
					"CgAAANQGAAAAAAAA1QYAAAAAAAAAAAAA1QYAAAAAAADWBgAAAAAAAAAAAADWBgAAAAAAANcGAAAAAAAAAAAAANcGAAAAAAAA2AYAAAAAAAAAAAAA2AYAAAAAAADZBgAAAAAAAAAAAADZBgAAAAAAANoGAAAAAAAAAAAAANoGAAAAAAAA2wYAAAAAAAAAAAAA2wYAAAAAAADcBgAAAAAAAAAAAADcBgAAAAAAAN0GAAAAAAAAAAAAAN0GAAAAAAAA3gYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AYAAAAAAADUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "[i]"
					},
					"AwAAAN4GAAAAAAAA3wYAAAAAAAAAAAAA3wYAAAAAAADgBgAAAAAAAAAAAADgBgAAAAAAAOEGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gYAAAAAAADeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAOEGAAAAAAAA4gYAAAAAAAAAAAAA4gYAAAAAAADjBgAAAAAAAAAAAADjBgAAAAAAAOQGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QYAAAAAAADhBgAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " -1"
					},
					"AwAAAOQGAAAAAAAA5QYAAAAAAAAAAAAA5QYAAAAAAADmBgAAAAAAAAAAAADmBgAAAAAAAOcGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5AYAAAAAAADkBgAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wYAAAAAAADnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": " continue;"
					},
					"CgAAAOgGAAAAAAAA6QYAAAAAAAAAAAAA6QYAAAAAAADqBgAAAAAAAAAAAADqBgAAAAAAAOsGAAAAAAAAAAAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA7AYAAAAAAADtBgAAAAAAAAAAAADtBgAAAAAAAO4GAAAAAAAAAAAAAO4GAAAAAAAA7wYAAAAAAAAAAAAA7wYAAAAAAADwBgAAAAAAAAAAAADwBgAAAAAAAPEGAAAAAAAAAAAAAPEGAAAAAAAA8gYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AYAAAAAAADoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAOkGAAAAAAAA6gYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QYAAAAAAADpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOoGAAAAAAAA6wYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gYAAAAAAADqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPkGAAAAAAAA+gYAAAAAAAAAAAAA+gYAAAAAAAD7BgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QYAAAAAAAD5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAPsGAAAAAAAA/QYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wYAAAAAAAD7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPwGAAAAAAAA/QYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AYAAAAAAAD8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"left_delete",
					null,
					"AQAAAPwGAAAAAAAA/AYAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QYAAAAAAAD9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAPwGAAAAAAAA/QYAAAAAAAAAAAAA/QYAAAAAAAD+BgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AYAAAAAAAD8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAP4GAAAAAAAA/wYAAAAAAAAAAAAA/wYAAAAAAAAABwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gYAAAAAAAD+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAHAAAAAAAAAQcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"left_delete",
					null,
					"AQAAAAAHAAAAAAAAAAcAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAQcAAAAAAAABBwAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "(boneIds"
					},
					"CAAAAAAHAAAAAAAAAQcAAAAAAAAAAAAAAQcAAAAAAAACBwAAAAAAAAAAAAACBwAAAAAAAAMHAAAAAAAAAAAAAAMHAAAAAAAABAcAAAAAAAAAAAAABAcAAAAAAAAFBwAAAAAAAAAAAAAFBwAAAAAAAAYHAAAAAAAAAAAAAAYHAAAAAAAABwcAAAAAAAAAAAAABwcAAAAAAAAIBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "[i]"
					},
					"AwAAAAgHAAAAAAAACQcAAAAAAAAAAAAACQcAAAAAAAAKBwAAAAAAAAAAAAAKBwAAAAAAAAsHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAcAAAAAAAAIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAAAsHAAAAAAAADAcAAAAAAAAAAAAADAcAAAAAAAANBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACwcAAAAAAAALBwAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"left_delete",
					null,
					"AQAAAAwHAAAAAAAADAcAAAAAAAABAAAAXw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQcAAAAAAAANBwAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": ">="
					},
					"AgAAAAwHAAAAAAAADQcAAAAAAAAAAAAADQcAAAAAAAAOBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": " MAX_"
					},
					"BQAAAA4HAAAAAAAADwcAAAAAAAAAAAAADwcAAAAAAAAQBwAAAAAAAAAAAAAQBwAAAAAAABEHAAAAAAAAAAAAABEHAAAAAAAAEgcAAAAAAAAAAAAAEgcAAAAAAAATBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgcAAAAAAAAOBwAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "BONES"
					},
					"BQAAABMHAAAAAAAAFAcAAAAAAAAAAAAAFAcAAAAAAAAVBwAAAAAAAAAAAAAVBwAAAAAAABYHAAAAAAAAAAAAABYHAAAAAAAAFwcAAAAAAAAAAAAAFwcAAAAAAAAYBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABgHAAAAAAAAGQcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAcAAAAAAAAYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAABkHAAAAAAAAGgcAAAAAAAAAAAAAGgcAAAAAAAAbBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQcAAAAAAAAZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAABsHAAAAAAAAHAcAAAAAAAAAAAAAHAcAAAAAAAAdBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwcAAAAAAAAbBwAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB4HAAAAAAAAHwcAAAAAAAAAAAAAHwcAAAAAAAAgBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgcAAAAAAAAeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACAHAAAAAAAAIgcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAcAAAAAAAAgBwAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "\t\t\ttotalP"
					},
					"CQAAACEHAAAAAAAAIgcAAAAAAAAAAAAAIgcAAAAAAAAjBwAAAAAAAAAAAAAjBwAAAAAAACQHAAAAAAAAAAAAACQHAAAAAAAAJQcAAAAAAAAAAAAAJQcAAAAAAAAmBwAAAAAAAAAAAAAmBwAAAAAAACcHAAAAAAAAAAAAACcHAAAAAAAAKAcAAAAAAAAAAAAAKAcAAAAAAAApBwAAAAAAAAAAAAApBwAAAAAAACoHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQcAAAAAAAAhBwAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "osition"
					},
					"BwAAACoHAAAAAAAAKwcAAAAAAAAAAAAAKwcAAAAAAAAsBwAAAAAAAAAAAAAsBwAAAAAAAC0HAAAAAAAAAAAAAC0HAAAAAAAALgcAAAAAAAAAAAAALgcAAAAAAAAvBwAAAAAAAAAAAAAvBwAAAAAAADAHAAAAAAAAAAAAADAHAAAAAAAAMQcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgcAAAAAAAAqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADEHAAAAAAAAMgcAAAAAAAAAAAAAMgcAAAAAAAAzBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQcAAAAAAAAxBwAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADMHAAAAAAAANAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwcAAAAAAAAzBwAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "vec3"
					},
					"BAAAADQHAAAAAAAANQcAAAAAAAAAAAAANQcAAAAAAAA2BwAAAAAAAAAAAAA2BwAAAAAAADcHAAAAAAAAAAAAADcHAAAAAAAAOAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAcAAAAAAAA0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"left_delete",
					null,
					"AQAAADcHAAAAAAAANwcAAAAAAAABAAAAMw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAcAAAAAAAA4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "4("
					},
					"AgAAADcHAAAAAAAAOAcAAAAAAAAAAAAAOAcAAAAAAAA5BwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwcAAAAAAAA3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": "aPos,"
					},
					"BQAAADkHAAAAAAAAOgcAAAAAAAAAAAAAOgcAAAAAAAA7BwAAAAAAAAAAAAA7BwAAAAAAADwHAAAAAAAAAAAAADwHAAAAAAAAPQcAAAAAAAAAAAAAPQcAAAAAAAA+BwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQcAAAAAAAA5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": " 1.0f)"
					},
					"BgAAAD4HAAAAAAAAPwcAAAAAAAAAAAAAPwcAAAAAAABABwAAAAAAAAAAAABABwAAAAAAAEEHAAAAAAAAAAAAAEEHAAAAAAAAQgcAAAAAAAAAAAAAQgcAAAAAAABDBwAAAAAAAAAAAABDBwAAAAAAAEQHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgcAAAAAAAA+BwAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": ";\\n"
					},
					"AwAAAEQHAAAAAAAARQcAAAAAAAAAAAAARQcAAAAAAABGBwAAAAAAAAAAAABGBwAAAAAAAEcHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAcAAAAAAABEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEgHAAAAAAAASQcAAAAAAAAAAAAASQcAAAAAAABKBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAcAAAAAAABIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAEoHAAAAAAAATAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgcAAAAAAABKBwAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"insert",
					{
						"characters": "\t\t\tbreak;\\n"
					},
					"CwAAAEsHAAAAAAAATAcAAAAAAAAAAAAATAcAAAAAAABNBwAAAAAAAAAAAABNBwAAAAAAAE4HAAAAAAAAAAAAAE4HAAAAAAAATwcAAAAAAAAAAAAATwcAAAAAAABQBwAAAAAAAAAAAABQBwAAAAAAAFEHAAAAAAAAAAAAAFEHAAAAAAAAUgcAAAAAAAAAAAAAUgcAAAAAAABTBwAAAAAAAAAAAABTBwAAAAAAAFQHAAAAAAAAAAAAAFQHAAAAAAAAVQcAAAAAAAAAAAAAVQcAAAAAAABWBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwcAAAAAAABLBwAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					1,
					"insert",
					{
						"characters": "\n:"
					},
					"AwAAAFcHAAAAAAAAWAcAAAAAAAAAAAAAWAcAAAAAAABZBwAAAAAAAAAAAABZBwAAAAAAAFoHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwcAAAAAAABXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"left_delete",
					null,
					"AQAAAFkHAAAAAAAAWQcAAAAAAAABAAAAOg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgcAAAAAAABaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAFkHAAAAAAAAWwcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQcAAAAAAABZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "\t\t{"
					},
					"AwAAAFoHAAAAAAAAWwcAAAAAAAAAAAAAWwcAAAAAAABcBwAAAAAAAAAAAABcBwAAAAAAAF0HAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgcAAAAAAABaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					1,
					"left_delete",
					null,
					"AQAAAFwHAAAAAAAAXAcAAAAAAAABAAAAew",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQcAAAAAAABdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "}\\n"
					},
					"AwAAAFwHAAAAAAAAXQcAAAAAAAAAAAAAXQcAAAAAAABeBwAAAAAAAAAAAABeBwAAAAAAAF8HAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAcAAAAAAABcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "\n\t\t"
					},
					"BAAAAGAHAAAAAAAAYQcAAAAAAAAAAAAAYQcAAAAAAABiBwAAAAAAAAAAAABiBwAAAAAAAGMHAAAAAAAAAAAAAGMHAAAAAAAAZAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYAcAAAAAAABgBwAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					2,
					"left_delete",
					null,
					"AgAAAGMHAAAAAAAAYwcAAAAAAAABAAAACWIHAAAAAAAAYgcAAAAAAAABAAAACQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZAcAAAAAAABkBwAAAAAAAAAAAAAAAPC/"
				],
				[
					326,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGIHAAAAAAAAZAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgcAAAAAAABiBwAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAGMHAAAAAAAAZAcAAAAAAAAAAAAAZAcAAAAAAABlBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYwcAAAAAAABjBwAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": "vec4"
					},
					"BAAAAGUHAAAAAAAAZgcAAAAAAAAAAAAAZgcAAAAAAABnBwAAAAAAAAAAAABnBwAAAAAAAGgHAAAAAAAAAAAAAGgHAAAAAAAAaQcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQcAAAAAAABlBwAAAAAAAAAAAAAAAPC/"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": " l"
					},
					"AgAAAGkHAAAAAAAAagcAAAAAAAAAAAAAagcAAAAAAABrBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQcAAAAAAABpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"left_delete",
					null,
					"AQAAAGoHAAAAAAAAagcAAAAAAAABAAAAbA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawcAAAAAAABrBwAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "localPosition"
					},
					"DQAAAGoHAAAAAAAAawcAAAAAAAAAAAAAawcAAAAAAABsBwAAAAAAAAAAAABsBwAAAAAAAG0HAAAAAAAAAAAAAG0HAAAAAAAAbgcAAAAAAAAAAAAAbgcAAAAAAABvBwAAAAAAAAAAAABvBwAAAAAAAHAHAAAAAAAAAAAAAHAHAAAAAAAAcQcAAAAAAAAAAAAAcQcAAAAAAAByBwAAAAAAAAAAAAByBwAAAAAAAHMHAAAAAAAAAAAAAHMHAAAAAAAAdAcAAAAAAAAAAAAAdAcAAAAAAAB1BwAAAAAAAAAAAAB1BwAAAAAAAHYHAAAAAAAAAAAAAHYHAAAAAAAAdwcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAagcAAAAAAABqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB5BwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdwcAAAAAAAB3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkHAAAAAAAAegcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQcAAAAAAAB5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "bones["
					},
					"BgAAAHoHAAAAAAAAewcAAAAAAAAAAAAAewcAAAAAAAB8BwAAAAAAAAAAAAB8BwAAAAAAAH0HAAAAAAAAAAAAAH0HAAAAAAAAfgcAAAAAAAAAAAAAfgcAAAAAAAB/BwAAAAAAAAAAAAB/BwAAAAAAAIAHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegcAAAAAAAB6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": "boneIds[i]]"
					},
					"CwAAAIAHAAAAAAAAgQcAAAAAAAAAAAAAgQcAAAAAAACCBwAAAAAAAAAAAACCBwAAAAAAAIMHAAAAAAAAAAAAAIMHAAAAAAAAhAcAAAAAAAAAAAAAhAcAAAAAAACFBwAAAAAAAAAAAACFBwAAAAAAAIYHAAAAAAAAAAAAAIYHAAAAAAAAhwcAAAAAAAAAAAAAhwcAAAAAAACIBwAAAAAAAAAAAACIBwAAAAAAAIkHAAAAAAAAAAAAAIkHAAAAAAAAigcAAAAAAAAAAAAAigcAAAAAAACLBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAcAAAAAAACABwAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAIsHAAAAAAAAjAcAAAAAAAAAAAAAjAcAAAAAAACNBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwcAAAAAAACLBwAAAAAAAAAAAAAAAPC/"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": " vec4("
					},
					"BgAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACSBwAAAAAAAAAAAACSBwAAAAAAAJMHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQcAAAAAAACNBwAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "aPos,"
					},
					"BQAAAJMHAAAAAAAAlAcAAAAAAAAAAAAAlAcAAAAAAACVBwAAAAAAAAAAAACVBwAAAAAAAJYHAAAAAAAAAAAAAJYHAAAAAAAAlwcAAAAAAAAAAAAAlwcAAAAAAACYBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwcAAAAAAACTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": " 1.0f)"
					},
					"BgAAAJgHAAAAAAAAmQcAAAAAAAAAAAAAmQcAAAAAAACaBwAAAAAAAAAAAACaBwAAAAAAAJsHAAAAAAAAAAAAAJsHAAAAAAAAnAcAAAAAAAAAAAAAnAcAAAAAAACdBwAAAAAAAAAAAACdBwAAAAAAAJ4HAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmAcAAAAAAACYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": ";\\n"
					},
					"AwAAAJ4HAAAAAAAAnwcAAAAAAAAAAAAAnwcAAAAAAACgBwAAAAAAAAAAAACgBwAAAAAAAKEHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngcAAAAAAACeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKIHAAAAAAAAowcAAAAAAAAAAAAAowcAAAAAAACkBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogcAAAAAAACiBwAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKQHAAAAAAAApgcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAcAAAAAAACkBwAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAKUHAAAAAAAApgcAAAAAAAAAAAAApgcAAAAAAACnBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQcAAAAAAAClBwAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "5o"
					},
					"AgAAAKcHAAAAAAAAqAcAAAAAAAAAAAAAqAcAAAAAAACpBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwcAAAAAAACnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					2,
					"left_delete",
					null,
					"AgAAAKgHAAAAAAAAqAcAAAAAAAABAAAAb6cHAAAAAAAApwcAAAAAAAABAAAANQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQcAAAAAAACpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "totalPosition"
					},
					"DQAAAKcHAAAAAAAAqAcAAAAAAAAAAAAAqAcAAAAAAACpBwAAAAAAAAAAAACpBwAAAAAAAKoHAAAAAAAAAAAAAKoHAAAAAAAAqwcAAAAAAAAAAAAAqwcAAAAAAACsBwAAAAAAAAAAAACsBwAAAAAAAK0HAAAAAAAAAAAAAK0HAAAAAAAArgcAAAAAAAAAAAAArgcAAAAAAACvBwAAAAAAAAAAAACvBwAAAAAAALAHAAAAAAAAAAAAALAHAAAAAAAAsQcAAAAAAAAAAAAAsQcAAAAAAACyBwAAAAAAAAAAAACyBwAAAAAAALMHAAAAAAAAAAAAALMHAAAAAAAAtAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwcAAAAAAACnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": " +1="
					},
					"BAAAALQHAAAAAAAAtQcAAAAAAAAAAAAAtQcAAAAAAAC2BwAAAAAAAAAAAAC2BwAAAAAAALcHAAAAAAAAAAAAALcHAAAAAAAAuAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAcAAAAAAAC0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					2,
					"left_delete",
					null,
					"AgAAALcHAAAAAAAAtwcAAAAAAAABAAAAPbYHAAAAAAAAtgcAAAAAAAABAAAAMQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAcAAAAAAAC4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAALYHAAAAAAAAtwcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgcAAAAAAAC2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALcHAAAAAAAAuAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtwcAAAAAAAC3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": "localPosition"
					},
					"DQAAALgHAAAAAAAAuQcAAAAAAAAAAAAAuQcAAAAAAAC6BwAAAAAAAAAAAAC6BwAAAAAAALsHAAAAAAAAAAAAALsHAAAAAAAAvAcAAAAAAAAAAAAAvAcAAAAAAAC9BwAAAAAAAAAAAAC9BwAAAAAAAL4HAAAAAAAAAAAAAL4HAAAAAAAAvwcAAAAAAAAAAAAAvwcAAAAAAADABwAAAAAAAAAAAADABwAAAAAAAMEHAAAAAAAAAAAAAMEHAAAAAAAAwgcAAAAAAAAAAAAAwgcAAAAAAADDBwAAAAAAAAAAAADDBwAAAAAAAMQHAAAAAAAAAAAAAMQHAAAAAAAAxQcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAcAAAAAAAC4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAMUHAAAAAAAAxgcAAAAAAAAAAAAAxgcAAAAAAADHBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQcAAAAAAADFBwAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": " weights[i]"
					},
					"CwAAAMcHAAAAAAAAyAcAAAAAAAAAAAAAyAcAAAAAAADJBwAAAAAAAAAAAADJBwAAAAAAAMoHAAAAAAAAAAAAAMoHAAAAAAAAywcAAAAAAAAAAAAAywcAAAAAAADMBwAAAAAAAAAAAADMBwAAAAAAAM0HAAAAAAAAAAAAAM0HAAAAAAAAzgcAAAAAAAAAAAAAzgcAAAAAAADPBwAAAAAAAAAAAADPBwAAAAAAANAHAAAAAAAAAAAAANAHAAAAAAAA0QcAAAAAAAAAAAAA0QcAAAAAAADSBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwcAAAAAAADHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": ";\\n"
					},
					"AwAAANIHAAAAAAAA0wcAAAAAAAAAAAAA0wcAAAAAAADUBwAAAAAAAAAAAADUBwAAAAAAANUHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gcAAAAAAADSBwAAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANYHAAAAAAAA1wcAAAAAAAAAAAAA1wcAAAAAAADYBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gcAAAAAAADWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAANgHAAAAAAAA2gcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AcAAAAAAADYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": "\t\tvec3"
					},
					"BgAAANkHAAAAAAAA2gcAAAAAAAAAAAAA2gcAAAAAAADbBwAAAAAAAAAAAADbBwAAAAAAANwHAAAAAAAAAAAAANwHAAAAAAAA3QcAAAAAAAAAAAAA3QcAAAAAAADeBwAAAAAAAAAAAADeBwAAAAAAAN8HAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QcAAAAAAADZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": " localNormal"
					},
					"DAAAAN8HAAAAAAAA4AcAAAAAAAAAAAAA4AcAAAAAAADhBwAAAAAAAAAAAADhBwAAAAAAAOIHAAAAAAAAAAAAAOIHAAAAAAAA4wcAAAAAAAAAAAAA4wcAAAAAAADkBwAAAAAAAAAAAADkBwAAAAAAAOUHAAAAAAAAAAAAAOUHAAAAAAAA5gcAAAAAAAAAAAAA5gcAAAAAAADnBwAAAAAAAAAAAADnBwAAAAAAAOgHAAAAAAAAAAAAAOgHAAAAAAAA6QcAAAAAAAAAAAAA6QcAAAAAAADqBwAAAAAAAAAAAADqBwAAAAAAAOsHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wcAAAAAAADfBwAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOsHAAAAAAAA7AcAAAAAAAAAAAAA7AcAAAAAAADtBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6wcAAAAAAADrBwAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO0HAAAAAAAA7gcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7QcAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": "mat3(bones"
					},
					"CgAAAO4HAAAAAAAA7wcAAAAAAAAAAAAA7wcAAAAAAADwBwAAAAAAAAAAAADwBwAAAAAAAPEHAAAAAAAAAAAAAPEHAAAAAAAA8gcAAAAAAAAAAAAA8gcAAAAAAADzBwAAAAAAAAAAAADzBwAAAAAAAPQHAAAAAAAAAAAAAPQHAAAAAAAA9QcAAAAAAAAAAAAA9QcAAAAAAAD2BwAAAAAAAAAAAAD2BwAAAAAAAPcHAAAAAAAAAAAAAPcHAAAAAAAA+AcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gcAAAAAAADuBwAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAPgHAAAAAAAA+QcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AcAAAAAAAD4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": "boneIds[i]]"
					},
					"CwAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA+gcAAAAAAAD7BwAAAAAAAAAAAAD7BwAAAAAAAPwHAAAAAAAAAAAAAPwHAAAAAAAA/QcAAAAAAAAAAAAA/QcAAAAAAAD+BwAAAAAAAAAAAAD+BwAAAAAAAP8HAAAAAAAAAAAAAP8HAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAABCAAAAAAAAAAAAAABCAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAAECAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QcAAAAAAAD5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAAQIAAAAAAAABQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAgAAAAAAAAECAAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAAUIAAAAAAAABggAAAAAAAAAAAAABggAAAAAAAAHCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQgAAAAAAAAFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": " norm;\\n"
					},
					"CAAAAAcIAAAAAAAACAgAAAAAAAAAAAAACAgAAAAAAAAJCAAAAAAAAAAAAAAJCAAAAAAAAAoIAAAAAAAAAAAAAAoIAAAAAAAACwgAAAAAAAAAAAAACwgAAAAAAAAMCAAAAAAAAAAAAAAMCAAAAAAAAA0IAAAAAAAAAAAAAA0IAAAAAAAADggAAAAAAAAAAAAADggAAAAAAAAPCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwgAAAAAAAAHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": "aNormal"
					},
					"CAAAAAgIAAAAAAAACQgAAAAAAAAAAAAACQgAAAAAAAAJCAAAAAAAAAQAAABub3JtCQgAAAAAAAAKCAAAAAAAAAAAAAAKCAAAAAAAAAsIAAAAAAAAAAAAAAsIAAAAAAAADAgAAAAAAAAAAAAADAgAAAAAAAANCAAAAAAAAAAAAAANCAAAAAAAAA4IAAAAAAAAAAAAAA4IAAAAAAAADwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAgAAAAAAAAMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABMIAAAAAAAAFAgAAAAAAAAAAAAAFAgAAAAAAAAVCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwgAAAAAAAATCAAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABUIAAAAAAAAFwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQgAAAAAAAAVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABYIAAAAAAAAFwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFggAAAAAAAAWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"left_delete",
					null,
					"AQAAABYIAAAAAAAAFggAAAAAAAABAAAAOg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwgAAAAAAAAXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABYIAAAAAAAAFwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFggAAAAAAAAWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"left_delete",
					null,
					"AQAAABYIAAAAAAAAFggAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwgAAAAAAAAXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": "\t}"
					},
					"AgAAABYIAAAAAAAAFwgAAAAAAAAAAAAAFwgAAAAAAAAYCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFggAAAAAAAAWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAABgIAAAAAAAAGQgAAAAAAAAAAAAAGQgAAAAAAAAaCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAgAAAAAAAAYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"left_delete",
					null,
					"AQAAABsIAAAAAAAAGwgAAAAAAABAAQAACgkiCWlmKGJvbmVJZHNbMF0gIT0gLTEpIHsgYm9uZVRyYW5zZm9ybSArPSBib25lc1tib25lSWRzWzBdXSAqIHdlaWdodHNbMF07IH1cbiIKCSIJaWYoYm9uZUlkc1sxXSAhPSAtMSkgeyBib25lVHJhbnNmb3JtICs9IGJvbmVzW2JvbmVJZHNbMV1dICogd2VpZ2h0c1sxXTsgfVxuIgoJIglpZihib25lSWRzWzJdICE9IC0xKSB7IGJvbmVUcmFuc2Zvcm0gKz0gYm9uZXNbYm9uZUlkc1syXV0gKiB3ZWlnaHRzWzJdOyB9XG4iCgkiCWlmKGJvbmVJZHNbM10gIT0gLTEpIHsgYm9uZVRyYW5zZm9ybSArPSBib25lc1tib25lSWRzWzNdXSAqIHdlaWdodHNbM107IH1cbiI",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWwkAAAAAAAAbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABsIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAdCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwgAAAAAAAAbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAB0IAAAAAAAAHwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQgAAAAAAAAdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": "\tVEC4"
					},
					"BQAAAB4IAAAAAAAAHwgAAAAAAAAAAAAAHwgAAAAAAAAgCAAAAAAAAAAAAAAgCAAAAAAAACEIAAAAAAAAAAAAACEIAAAAAAAAIggAAAAAAAAAAAAAIggAAAAAAAAjCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHggAAAAAAAAeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					391,
					4,
					"left_delete",
					null,
					"BAAAACIIAAAAAAAAIggAAAAAAAABAAAANCEIAAAAAAAAIQgAAAAAAAABAAAAQyAIAAAAAAAAIAgAAAAAAAABAAAARR8IAAAAAAAAHwgAAAAAAAABAAAAVg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwgAAAAAAAAjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					392,
					1,
					"insert",
					{
						"characters": "vec3"
					},
					"BAAAAB8IAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACIIAAAAAAAAAAAAACIIAAAAAAAAIwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwgAAAAAAAAfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"left_delete",
					null,
					"AQAAACIIAAAAAAAAIggAAAAAAAABAAAAMw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwgAAAAAAAAjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAACIIAAAAAAAAIwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIggAAAAAAAAiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": " localPosition"
					},
					"DgAAACMIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAlCAAAAAAAAAAAAAAlCAAAAAAAACYIAAAAAAAAAAAAACYIAAAAAAAAJwgAAAAAAAAAAAAAJwgAAAAAAAAoCAAAAAAAAAAAAAAoCAAAAAAAACkIAAAAAAAAAAAAACkIAAAAAAAAKggAAAAAAAAAAAAAKggAAAAAAAArCAAAAAAAAAAAAAArCAAAAAAAACwIAAAAAAAAAAAAACwIAAAAAAAALQgAAAAAAAAAAAAALQgAAAAAAAAuCAAAAAAAAAAAAAAuCAAAAAAAAC8IAAAAAAAAAAAAAC8IAAAAAAAAMAgAAAAAAAAAAAAAMAgAAAAAAAAxCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwgAAAAAAAAjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEIAAAAAAAAMggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQgAAAAAAAAxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADIIAAAAAAAAMwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": " bones[boneId"
					},
					"DQAAADMIAAAAAAAANAgAAAAAAAAAAAAANAgAAAAAAAA1CAAAAAAAAAAAAAA1CAAAAAAAADYIAAAAAAAAAAAAADYIAAAAAAAANwgAAAAAAAAAAAAANwgAAAAAAAA4CAAAAAAAAAAAAAA4CAAAAAAAADkIAAAAAAAAAAAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA7CAAAAAAAAAAAAAA7CAAAAAAAADwIAAAAAAAAAAAAADwIAAAAAAAAPQgAAAAAAAAAAAAAPQgAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAD8IAAAAAAAAAAAAAD8IAAAAAAAAQAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwgAAAAAAAAzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					399,
					1,
					"insert",
					{
						"characters": "s[i]]"
					},
					"BQAAAEAIAAAAAAAAQQgAAAAAAAAAAAAAQQgAAAAAAABCCAAAAAAAAAAAAABCCAAAAAAAAEMIAAAAAAAAAAAAAEMIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABFCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAgAAAAAAABACAAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAEUIAAAAAAAARggAAAAAAAAAAAAARggAAAAAAABHCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQgAAAAAAABFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": " vec4("
					},
					"BgAAAEcIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABJCAAAAAAAAAAAAABJCAAAAAAAAEoIAAAAAAAAAAAAAEoIAAAAAAAASwgAAAAAAAAAAAAASwgAAAAAAABMCAAAAAAAAAAAAABMCAAAAAAAAE0IAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwgAAAAAAABHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "aPos,"
					},
					"BQAAAE0IAAAAAAAATggAAAAAAAAAAAAATggAAAAAAABPCAAAAAAAAAAAAABPCAAAAAAAAFAIAAAAAAAAAAAAAFAIAAAAAAAAUQgAAAAAAAAAAAAAUQgAAAAAAABSCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQgAAAAAAABNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": " 1.0f;"
					},
					"BgAAAFIIAAAAAAAAUwgAAAAAAAAAAAAAUwgAAAAAAABUCAAAAAAAAAAAAABUCAAAAAAAAFUIAAAAAAAAAAAAAFUIAAAAAAAAVggAAAAAAAAAAAAAVggAAAAAAABXCAAAAAAAAAAAAABXCAAAAAAAAFgIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUggAAAAAAABSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFgIAAAAAAAAWQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAgAAAAAAABYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					2,
					"left_delete",
					null,
					"AgAAAFgIAAAAAAAAWAgAAAAAAAABAAAAKVcIAAAAAAAAVwgAAAAAAAABAAAAOw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": ");\\n"
					},
					"BAAAAFcIAAAAAAAAWAgAAAAAAAAAAAAAWAgAAAAAAABZCAAAAAAAAAAAAABZCAAAAAAAAFoIAAAAAAAAAAAAAFoIAAAAAAAAWwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwgAAAAAAABXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFwIAAAAAAAAXQgAAAAAAAAAAAAAXQgAAAAAAABeCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAgAAAAAAABcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAF4IAAAAAAAAYAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXggAAAAAAABeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAF8IAAAAAAAAYAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXwgAAAAAAABfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "totalPosition"
					},
					"DQAAAGAIAAAAAAAAYQgAAAAAAAAAAAAAYQgAAAAAAABiCAAAAAAAAAAAAABiCAAAAAAAAGMIAAAAAAAAAAAAAGMIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABlCAAAAAAAAAAAAABlCAAAAAAAAGYIAAAAAAAAAAAAAGYIAAAAAAAAZwgAAAAAAAAAAAAAZwgAAAAAAABoCAAAAAAAAAAAAABoCAAAAAAAAGkIAAAAAAAAAAAAAGkIAAAAAAAAaggAAAAAAAAAAAAAaggAAAAAAABrCAAAAAAAAAAAAABrCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAbQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYAgAAAAAAABgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": " +="
					},
					"AwAAAG0IAAAAAAAAbggAAAAAAAAAAAAAbggAAAAAAABvCAAAAAAAAAAAAABvCAAAAAAAAHAIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQgAAAAAAABtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": " localPosition"
					},
					"DgAAAHAIAAAAAAAAcQgAAAAAAAAAAAAAcQgAAAAAAAByCAAAAAAAAAAAAAByCAAAAAAAAHMIAAAAAAAAAAAAAHMIAAAAAAAAdAgAAAAAAAAAAAAAdAgAAAAAAAB1CAAAAAAAAAAAAAB1CAAAAAAAAHYIAAAAAAAAAAAAAHYIAAAAAAAAdwgAAAAAAAAAAAAAdwgAAAAAAAB4CAAAAAAAAAAAAAB4CAAAAAAAAHkIAAAAAAAAAAAAAHkIAAAAAAAAeggAAAAAAAAAAAAAeggAAAAAAAB7CAAAAAAAAAAAAAB7CAAAAAAAAHwIAAAAAAAAAAAAAHwIAAAAAAAAfQgAAAAAAAAAAAAAfQgAAAAAAAB+CAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcAgAAAAAAABwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": " 8"
					},
					"AgAAAH4IAAAAAAAAfwgAAAAAAAAAAAAAfwgAAAAAAACACAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"left_delete",
					null,
					"AQAAAH8IAAAAAAAAfwgAAAAAAAABAAAAOA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAgAAAAAAACACAAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAH8IAAAAAAAAgAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwgAAAAAAAB/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": " wi"
					},
					"AwAAAIAIAAAAAAAAgQgAAAAAAAAAAAAAgQgAAAAAAACCCAAAAAAAAAAAAACCCAAAAAAAAIMIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAgAAAAAAACACAAAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					1,
					"left_delete",
					null,
					"AQAAAIIIAAAAAAAAgggAAAAAAAABAAAAaQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwgAAAAAAACDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": "eights["
					},
					"BwAAAIIIAAAAAAAAgwgAAAAAAAAAAAAAgwgAAAAAAACECAAAAAAAAAAAAACECAAAAAAAAIUIAAAAAAAAAAAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAACHCAAAAAAAAIgIAAAAAAAAAAAAAIgIAAAAAAAAiQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgggAAAAAAACCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": "i];\\n"
					},
					"BQAAAIkIAAAAAAAAiggAAAAAAAAAAAAAiggAAAAAAACLCAAAAAAAAAAAAACLCAAAAAAAAIwIAAAAAAAAAAAAAIwIAAAAAAAAjQgAAAAAAAAAAAAAjQgAAAAAAACOCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiQgAAAAAAACJCAAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI8IAAAAAAAAkAgAAAAAAAAAAAAAkAgAAAAAAACRCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwgAAAAAAACPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJEIAAAAAAAAkwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkQgAAAAAAACRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": "\tvec4"
					},
					"BQAAAJIIAAAAAAAAkwgAAAAAAAAAAAAAkwgAAAAAAACUCAAAAAAAAAAAAACUCAAAAAAAAJUIAAAAAAAAAAAAAJUIAAAAAAAAlggAAAAAAAAAAAAAlggAAAAAAACXCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkggAAAAAAACSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					425,
					1,
					"left_delete",
					null,
					"AQAAAJYIAAAAAAAAlggAAAAAAAABAAAANA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwgAAAAAAACXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAJYIAAAAAAAAlwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlggAAAAAAACWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": " localNormal"
					},
					"DAAAAJcIAAAAAAAAmAgAAAAAAAAAAAAAmAgAAAAAAACZCAAAAAAAAAAAAACZCAAAAAAAAJoIAAAAAAAAAAAAAJoIAAAAAAAAmwgAAAAAAAAAAAAAmwgAAAAAAACcCAAAAAAAAAAAAACcCAAAAAAAAJ0IAAAAAAAAAAAAAJ0IAAAAAAAAnggAAAAAAAAAAAAAnggAAAAAAACfCAAAAAAAAAAAAACfCAAAAAAAAKAIAAAAAAAAAAAAAKAIAAAAAAAAoQgAAAAAAAAAAAAAoQgAAAAAAACiCAAAAAAAAAAAAACiCAAAAAAAAKMIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwgAAAAAAACXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKMIAAAAAAAApAgAAAAAAAAAAAAApAgAAAAAAAClCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowgAAAAAAACjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKUIAAAAAAAApggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQgAAAAAAAClCAAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAABsIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAdCAAAAAAAAAAAAAAdCAAAAAAAAB0IAAAAAAAAjAAAAAoJIgl2ZWM0IGxvY2FsUG9zaXRpb24gPSBib25lc1tib25lSWRzW2ldXSAqIHZlYzQoYVBvcywgMS4wZik7XG4iCgkiCXRvdGFsUG9zaXRpb24gKz0gbG9jYWxQb3NpdGlvbiAqIHdlaWdodHNbaV07XG4iCgkiCXZlYzMgbG9jYWxOb3JtYWwgPSAi",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwgAAAAAAAAbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB0IAAAAAAAAHggAAAAAAAAAAAAAHggAAAAAAAAfCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQgAAAAAAAAdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAB8IAAAAAAAAIQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwgAAAAAAAAfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": "\tmat4"
					},
					"BQAAACAIAAAAAAAAIQgAAAAAAAAAAAAAIQgAAAAAAAAiCAAAAAAAAAAAAAAiCAAAAAAAACMIAAAAAAAAAAAAACMIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAlCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAgAAAAAAAAgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": " viewModel"
					},
					"CgAAACUIAAAAAAAAJggAAAAAAAAAAAAAJggAAAAAAAAnCAAAAAAAAAAAAAAnCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAAKQgAAAAAAAAAAAAAKQgAAAAAAAAqCAAAAAAAAAAAAAAqCAAAAAAAACsIAAAAAAAAAAAAACsIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAtCAAAAAAAAAAAAAAtCAAAAAAAAC4IAAAAAAAAAAAAAC4IAAAAAAAALwgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQgAAAAAAAAlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAC8IAAAAAAAAMAgAAAAAAAAAAAAAMAgAAAAAAAAxCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwgAAAAAAAAvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEIAAAAAAAAMggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQgAAAAAAAAxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": "view"
					},
					"BAAAADIIAAAAAAAAMwgAAAAAAAAAAAAAMwgAAAAAAAA0CAAAAAAAAAAAAAA0CAAAAAAAADUIAAAAAAAAAAAAADUIAAAAAAAANggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAADYIAAAAAAAANwgAAAAAAAAAAAAANwgAAAAAAAA4CAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANggAAAAAAAA2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"insert",
					{
						"characters": " model;\\n"
					},
					"CQAAADgIAAAAAAAAOQgAAAAAAAAAAAAAOQgAAAAAAAA6CAAAAAAAAAAAAAA6CAAAAAAAADsIAAAAAAAAAAAAADsIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAAA9CAAAAAAAAAAAAAA9CAAAAAAAAD4IAAAAAAAAAAAAAD4IAAAAAAAAPwgAAAAAAAAAAAAAPwgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEEIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAgAAAAAAAA4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEIIAAAAAAAAQwgAAAAAAAAAAAAAQwgAAAAAAABECAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQggAAAAAAABCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAEQIAAAAAAAARggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAgAAAAAAABECAAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "\tgl_Posi"
					},
					"CAAAAEUIAAAAAAAARggAAAAAAAAAAAAARggAAAAAAABHCAAAAAAAAAAAAABHCAAAAAAAAEgIAAAAAAAAAAAAAEgIAAAAAAAASQgAAAAAAAAAAAAASQgAAAAAAABKCAAAAAAAAAAAAABKCAAAAAAAAEsIAAAAAAAAAAAAAEsIAAAAAAAATAgAAAAAAAAAAAAATAgAAAAAAABNCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQgAAAAAAABFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "tion"
					},
					"BAAAAE0IAAAAAAAATggAAAAAAAAAAAAATggAAAAAAABPCAAAAAAAAAAAAABPCAAAAAAAAFAIAAAAAAAAAAAAAFAIAAAAAAAAUQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQgAAAAAAABNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFEIAAAAAAAAUggAAAAAAAAAAAAAUggAAAAAAABTCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQgAAAAAAABRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFMIAAAAAAAAVAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwgAAAAAAABTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": "projection"
					},
					"CgAAAFQIAAAAAAAAVQgAAAAAAAAAAAAAVQgAAAAAAABWCAAAAAAAAAAAAABWCAAAAAAAAFcIAAAAAAAAAAAAAFcIAAAAAAAAWAgAAAAAAAAAAAAAWAgAAAAAAABZCAAAAAAAAAAAAABZCAAAAAAAAFoIAAAAAAAAAAAAAFoIAAAAAAAAWwgAAAAAAAAAAAAAWwgAAAAAAABcCAAAAAAAAAAAAABcCAAAAAAAAF0IAAAAAAAAAAAAAF0IAAAAAAAAXggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAgAAAAAAABUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAF4IAAAAAAAAXwgAAAAAAAAAAAAAXwgAAAAAAABgCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXggAAAAAAABeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": " viewModel"
					},
					"CgAAAGAIAAAAAAAAYQgAAAAAAAAAAAAAYQgAAAAAAABiCAAAAAAAAAAAAABiCAAAAAAAAGMIAAAAAAAAAAAAAGMIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABlCAAAAAAAAAAAAABlCAAAAAAAAGYIAAAAAAAAAAAAAGYIAAAAAAAAZwgAAAAAAAAAAAAAZwgAAAAAAABoCAAAAAAAAAAAAABoCAAAAAAAAGkIAAAAAAAAAAAAAGkIAAAAAAAAaggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYAgAAAAAAABgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": " 8"
					},
					"AgAAAGoIAAAAAAAAawgAAAAAAAAAAAAAawgAAAAAAABsCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaggAAAAAAABqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwIAAAAAAAAbQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbAgAAAAAAABsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					2,
					"left_delete",
					null,
					"AgAAAGwIAAAAAAAAbAgAAAAAAAABAAAAIGsIAAAAAAAAawgAAAAAAAABAAAAOA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQgAAAAAAABtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAGsIAAAAAAAAbAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawgAAAAAAABrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwIAAAAAAAAbQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbAgAAAAAAABsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "totalPosition;"
					},
					"DgAAAG0IAAAAAAAAbggAAAAAAAAAAAAAbggAAAAAAABvCAAAAAAAAAAAAABvCAAAAAAAAHAIAAAAAAAAAAAAAHAIAAAAAAAAcQgAAAAAAAAAAAAAcQgAAAAAAAByCAAAAAAAAAAAAAByCAAAAAAAAHMIAAAAAAAAAAAAAHMIAAAAAAAAdAgAAAAAAAAAAAAAdAgAAAAAAAB1CAAAAAAAAAAAAAB1CAAAAAAAAHYIAAAAAAAAAAAAAHYIAAAAAAAAdwgAAAAAAAAAAAAAdwgAAAAAAAB4CAAAAAAAAAAAAAB4CAAAAAAAAHkIAAAAAAAAAAAAAHkIAAAAAAAAeggAAAAAAAAAAAAAeggAAAAAAAB7CAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQgAAAAAAABtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAHsIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAAB9CAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewgAAAAAAAB7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "\n:"
					},
					"AwAAAH4IAAAAAAAAfwgAAAAAAAAAAAAAfwgAAAAAAACACAAAAAAAAAAAAACACAAAAAAAAIEIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"left_delete",
					null,
					"AQAAAIAIAAAAAAAAgAgAAAAAAAABAAAAOg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQgAAAAAAACBCAAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAIAIAAAAAAAAgggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAgAAAAAAACACAAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "\ttexCoord"
					},
					"CQAAAIEIAAAAAAAAgggAAAAAAAAAAAAAgggAAAAAAACDCAAAAAAAAAAAAACDCAAAAAAAAIQIAAAAAAAAAAAAAIQIAAAAAAAAhQgAAAAAAAAAAAAAhQgAAAAAAACGCAAAAAAAAAAAAACGCAAAAAAAAIcIAAAAAAAAAAAAAIcIAAAAAAAAiAgAAAAAAAAAAAAAiAgAAAAAAACJCAAAAAAAAAAAAACJCAAAAAAAAIoIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQgAAAAAAACBCAAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIoIAAAAAAAAiwgAAAAAAAAAAAAAiwgAAAAAAACMCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiggAAAAAAACKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": " aTexCoord"
					},
					"CgAAAIwIAAAAAAAAjQgAAAAAAAAAAAAAjQgAAAAAAACOCAAAAAAAAAAAAACOCAAAAAAAAI8IAAAAAAAAAAAAAI8IAAAAAAAAkAgAAAAAAAAAAAAAkAgAAAAAAACRCAAAAAAAAAAAAACRCAAAAAAAAJIIAAAAAAAAAAAAAJIIAAAAAAAAkwgAAAAAAAAAAAAAkwgAAAAAAACUCAAAAAAAAAAAAACUCAAAAAAAAJUIAAAAAAAAAAAAAJUIAAAAAAAAlggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": ";\\n"
					},
					"AwAAAJYIAAAAAAAAlwgAAAAAAAAAAAAAlwgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJkIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlggAAAAAAACWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"left_delete",
					null,
					"AQAAAKgJAAAAAAAAqAkAAAAAAABhAAAACgkiCW91ckNvbCA9IHZlYzMoYm9uZXNbMF1bMl1bMV0sIGJvbmVzWzBdWzJdWzJdLCBib25lc1swXVsyXVszXSk7XG4iCgkiCXRleENvb3JkID0gYVRleENvb3JkO1xuIg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACQoAAAAAAACoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"left_delete",
					null,
					"AQAAABwJAAAAAAAAHAkAAAAAAACMAAAACgkiCWZyYWdQb3MgPSB2ZWMzKG1vZGVsICogdmVjNChhUG9zLCAxLjBmKSk7XG4iCgkiCW5vcm1hbCA9IG1hdDModHJhbnNwb3NlKGludmVyc2UobW9kZWwpKSkgKiAoYm9uZVRyYW5zZm9ybSAqIHZlYzQoYU5vcm1hbCwgMC4wZikpLnh5ejtcbiI",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqAkAAAAAAAAcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					3,
					"left_delete",
					null,
					"AwAAAHoGAAAAAAAAegYAAAAAAAABAAAAdHkGAAAAAAAAeQYAAAAAAAABAAAAYXgGAAAAAAAAeAYAAAAAAAABAAAAbQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewYAAAAAAAB7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": "vec"
					},
					"AwAAAHgGAAAAAAAAeQYAAAAAAAAAAAAAeQYAAAAAAAB6BgAAAAAAAAAAAAB6BgAAAAAAAHsGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeAYAAAAAAAB4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					3,
					"left_delete",
					null,
					"AwAAAI8GAAAAAAAAjwYAAAAAAAABAAAAdI4GAAAAAAAAjgYAAAAAAAABAAAAYY0GAAAAAAAAjQYAAAAAAAABAAAAbQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAYAAAAAAACQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "vec"
					},
					"AwAAAI0GAAAAAAAAjgYAAAAAAAAAAAAAjgYAAAAAAACPBgAAAAAAAAAAAACPBgAAAAAAAJAGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQYAAAAAAACNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"left_delete",
					null,
					"AQAAAJoIAAAAAAAAmggAAAAAAACCAAAACgkKCSIJdmVjNCB0b3RhbFBvc2l0aW9uID0gYm9uZVRyYW5zZm9ybSAqIHZlYzQoYVBvcywgMS4wZik7XG4iCgkiICAgZ2xfUG9zaXRpb24gPSAocHJvamVjdGlvbiAqIHZpZXcgKiBtb2RlbCkgKiB0b3RhbFBvc2l0aW9uO1xuIg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAkAAAAAAACaCAAAAAAAAAAAAAAAcHxA"
				],
				[
					565,
					1,
					"paste",
					null,
					"AQAAAH4IAAAAAAAAyAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					580,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJsGAAAAAAAAnAYAAAAAAAAAAAAAnAYAAAAAAACdBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwYAAAAAAACbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJ0GAAAAAAAAnwYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQYAAAAAAACdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					1,
					"insert",
					{
						"characters": "\tvec3"
					},
					"BQAAAJ4GAAAAAAAAnwYAAAAAAAAAAAAAnwYAAAAAAACgBgAAAAAAAAAAAACgBgAAAAAAAKEGAAAAAAAAAAAAAKEGAAAAAAAAogYAAAAAAAAAAAAAogYAAAAAAACjBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngYAAAAAAACeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					583,
					1,
					"insert",
					{
						"characters": " totalN"
					},
					"BwAAAKMGAAAAAAAApAYAAAAAAAAAAAAApAYAAAAAAAClBgAAAAAAAAAAAAClBgAAAAAAAKYGAAAAAAAAAAAAAKYGAAAAAAAApwYAAAAAAAAAAAAApwYAAAAAAACoBgAAAAAAAAAAAACoBgAAAAAAAKkGAAAAAAAAAAAAAKkGAAAAAAAAqgYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowYAAAAAAACjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					584,
					1,
					"insert",
					{
						"characters": "ormal"
					},
					"BQAAAKoGAAAAAAAAqwYAAAAAAAAAAAAAqwYAAAAAAACsBgAAAAAAAAAAAACsBgAAAAAAAK0GAAAAAAAAAAAAAK0GAAAAAAAArgYAAAAAAAAAAAAArgYAAAAAAACvBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgYAAAAAAACqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAK8GAAAAAAAAsAYAAAAAAAAAAAAAsAYAAAAAAACxBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwYAAAAAAACvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					586,
					1,
					"insert",
					{
						"characters": " vec3(0.0f"
					},
					"CgAAALEGAAAAAAAAsgYAAAAAAAAAAAAAsgYAAAAAAACzBgAAAAAAAAAAAACzBgAAAAAAALQGAAAAAAAAAAAAALQGAAAAAAAAtQYAAAAAAAAAAAAAtQYAAAAAAAC2BgAAAAAAAAAAAAC2BgAAAAAAALcGAAAAAAAAAAAAALcGAAAAAAAAuAYAAAAAAAAAAAAAuAYAAAAAAAC5BgAAAAAAAAAAAAC5BgAAAAAAALoGAAAAAAAAAAAAALoGAAAAAAAAuwYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQYAAAAAAACxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": ");\\n"
					},
					"BAAAALsGAAAAAAAAvAYAAAAAAAAAAAAAvAYAAAAAAAC9BgAAAAAAAAAAAAC9BgAAAAAAAL4GAAAAAAAAAAAAAL4GAAAAAAAAvwYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwYAAAAAAAC7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADgIAAAAAAAAOQgAAAAAAAAAAAAAOQgAAAAAAAA6CAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAgAAAAAAAA4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAADoIAAAAAAAAPAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOggAAAAAAAA6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					1,
					"insert",
					{
						"characters": "\t\ttotalN"
					},
					"CAAAADsIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAAA9CAAAAAAAAAAAAAA9CAAAAAAAAD4IAAAAAAAAAAAAAD4IAAAAAAAAPwgAAAAAAAAAAAAAPwgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEEIAAAAAAAAAAAAAEEIAAAAAAAAQggAAAAAAAAAAAAAQggAAAAAAABDCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwgAAAAAAAA7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					593,
					1,
					"insert",
					{
						"characters": "ormal"
					},
					"BQAAAEMIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABFCAAAAAAAAAAAAABFCAAAAAAAAEYIAAAAAAAAAAAAAEYIAAAAAAAARwgAAAAAAAAAAAAARwgAAAAAAABICAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					594,
					1,
					"insert",
					{
						"characters": " +="
					},
					"AwAAAEgIAAAAAAAASQgAAAAAAAAAAAAASQgAAAAAAABKCAAAAAAAAAAAAABKCAAAAAAAAEsIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAgAAAAAAABICAAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": " localNormal"
					},
					"DAAAAEsIAAAAAAAATAgAAAAAAAAAAAAATAgAAAAAAABNCAAAAAAAAAAAAABNCAAAAAAAAE4IAAAAAAAAAAAAAE4IAAAAAAAATwgAAAAAAAAAAAAATwgAAAAAAABQCAAAAAAAAAAAAABQCAAAAAAAAFEIAAAAAAAAAAAAAFEIAAAAAAAAUggAAAAAAAAAAAAAUggAAAAAAABTCAAAAAAAAAAAAABTCAAAAAAAAFQIAAAAAAAAAAAAAFQIAAAAAAAAVQgAAAAAAAAAAAAAVQgAAAAAAABWCAAAAAAAAAAAAABWCAAAAAAAAFcIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwgAAAAAAABLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAFcIAAAAAAAAWAgAAAAAAAAAAAAAWAgAAAAAAABZCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwgAAAAAAABXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert",
					{
						"characters": " weights[i]"
					},
					"CwAAAFkIAAAAAAAAWggAAAAAAAAAAAAAWggAAAAAAABbCAAAAAAAAAAAAABbCAAAAAAAAFwIAAAAAAAAAAAAAFwIAAAAAAAAXQgAAAAAAAAAAAAAXQgAAAAAAABeCAAAAAAAAAAAAABeCAAAAAAAAF8IAAAAAAAAAAAAAF8IAAAAAAAAYAgAAAAAAAAAAAAAYAgAAAAAAABhCAAAAAAAAAAAAABhCAAAAAAAAGIIAAAAAAAAAAAAAGIIAAAAAAAAYwgAAAAAAAAAAAAAYwgAAAAAAABkCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": ";\\n"
					},
					"AwAAAGQIAAAAAAAAZQgAAAAAAAAAAAAAZQgAAAAAAABmCAAAAAAAAAAAAABmCAAAAAAAAGcIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZAgAAAAAAABkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					4,
					"left_delete",
					null,
					"BAAAABIJAAAAAAAAEgkAAAAAAAAHAAAAYU5vcm1hbBEJAAAAAAAAEQkAAAAAAAABAAAAIBAJAAAAAAAAEAkAAAAAAAABAAAAKg8JAAAAAAAADwkAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgkAAAAAAAAZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": "totalNormal"
					},
					"DAAAAP8IAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACQAAAAAAAA0AAABib25lVHJhbnNmb3JtAAkAAAAAAAABCQAAAAAAAAAAAAABCQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAwkAAAAAAAAAAAAAAwkAAAAAAAAECQAAAAAAAAAAAAAECQAAAAAAAAUJAAAAAAAAAAAAAAUJAAAAAAAABgkAAAAAAAAAAAAABgkAAAAAAAAHCQAAAAAAAAAAAAAHCQAAAAAAAAgJAAAAAAAAAAAAAAgJAAAAAAAACQkAAAAAAAAAAAAACQkAAAAAAAAKCQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/wgAAAAAAAAMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					642,
					4,
					"left_delete",
					null,
					"BAAAAP8IAAAAAAAA/wgAAAAAAAALAAAAdG90YWxOb3JtYWz+CAAAAAAAAP4IAAAAAAAAAQAAACD9CAAAAAAAAP0IAAAAAAAAAQAAACr8CAAAAAAAAPwIAAAAAAAAAQAAACA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/wgAAAAAAAAKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAP8IAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAABCQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/wgAAAAAAAD/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"insert",
					{
						"characters": " totalNormal"
					},
					"DAAAAAEJAAAAAAAAAgkAAAAAAAAAAAAAAgkAAAAAAAADCQAAAAAAAAAAAAADCQAAAAAAAAQJAAAAAAAAAAAAAAQJAAAAAAAABQkAAAAAAAAAAAAABQkAAAAAAAAGCQAAAAAAAAAAAAAGCQAAAAAAAAcJAAAAAAAAAAAAAAcJAAAAAAAACAkAAAAAAAAAAAAACAkAAAAAAAAJCQAAAAAAAAAAAAAJCQAAAAAAAAoJAAAAAAAAAAAAAAoJAAAAAAAACwkAAAAAAAAAAAAACwkAAAAAAAAMCQAAAAAAAAAAAAAMCQAAAAAAAA0JAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAQkAAAAAAAABCQAAAAAAAAAAAAAAAPC/"
				],
				[
					652,
					15,
					"left_delete",
					null,
					"DwAAAF1iAAAAAAAAXWIAAAAAAAABAAAAa1xiAAAAAAAAXGIAAAAAAAABAAAAbltiAAAAAAAAW2IAAAAAAAABAAAAaVpiAAAAAAAAWmIAAAAAAAABAAAATFliAAAAAAAAWWIAAAAAAAABAAAAIFhiAAAAAAAAWGIAAAAAAAABAAAAdFdiAAAAAAAAV2IAAAAAAAABAAAAbFZiAAAAAAAAVmIAAAAAAAABAAAAdVViAAAAAAAAVWIAAAAAAAABAAAAZFRiAAAAAAAAVGIAAAAAAAABAAAAQVNiAAAAAAAAU2IAAAAAAAABAAAAL1JiAAAAAAAAUmIAAAAAAAABAAAAa1FiAAAAAAAAUWIAAAAAAAABAAAAblBiAAAAAAAAUGIAAAAAAAABAAAAaU9iAAAAAAAAT2IAAAAAAAABAAAATA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXmIAAAAAAABeYgAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"insert",
					{
						"characters": "Character"
					},
					"CQAAAE9iAAAAAAAAUGIAAAAAAAAAAAAAUGIAAAAAAABRYgAAAAAAAAAAAABRYgAAAAAAAFJiAAAAAAAAAAAAAFJiAAAAAAAAU2IAAAAAAAAAAAAAU2IAAAAAAABUYgAAAAAAAAAAAABUYgAAAAAAAFViAAAAAAAAAAAAAFViAAAAAAAAVmIAAAAAAAAAAAAAVmIAAAAAAABXYgAAAAAAAAAAAABXYgAAAAAAAFhiAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAT2IAAAAAAABPYgAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": "/icosa2"
					},
					"BwAAAFhiAAAAAAAAWWIAAAAAAAAAAAAAWWIAAAAAAABaYgAAAAAAAAAAAABaYgAAAAAAAFtiAAAAAAAAAAAAAFtiAAAAAAAAXGIAAAAAAAAAAAAAXGIAAAAAAABdYgAAAAAAAAAAAABdYgAAAAAAAF5iAAAAAAAAAAAAAF5iAAAAAAAAX2IAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWGIAAAAAAABYYgAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF84AAAAAAAAYDgAAAAAAAAAAAAAYDgAAAAAAABlOAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXzgAAAAAAABfOAAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					5,
					"left_delete",
					null,
					"BQAAAGQ4AAAAAAAAZDgAAAAAAAABAAAACWM4AAAAAAAAYzgAAAAAAAABAAAACWI4AAAAAAAAYjgAAAAAAAABAAAACWE4AAAAAAAAYTgAAAAAAAABAAAACWA4AAAAAAAAYDgAAAAAAAABAAAACQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZTgAAAAAAABlOAAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert",
					{
						"characters": "pritnf"
					},
					"BgAAAGA4AAAAAAAAYTgAAAAAAAAAAAAAYTgAAAAAAABiOAAAAAAAAAAAAABiOAAAAAAAAGM4AAAAAAAAAAAAAGM4AAAAAAAAZDgAAAAAAAAAAAAAZDgAAAAAAABlOAAAAAAAAAAAAABlOAAAAAAAAGY4AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYDgAAAAAAABgOAAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGY4AAAAAAAAaDgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZjgAAAAAAABmOAAAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGc4AAAAAAAAaTgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZzgAAAAAAABnOAAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAGg4AAAAAAAAaTgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaDgAAAAAAABoOAAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGs4AAAAAAAAbDgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAazgAAAAAAABrOAAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIc4AAAAAAAAiDgAAAAAAAAAAAAAiDgAAAAAAACKOAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhzgAAAAAAACHOAAAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					2,
					"left_delete",
					null,
					"AgAAAIk4AAAAAAAAiTgAAAAAAAABAAAACYg4AAAAAAAAiDgAAAAAAAABAAAACQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAijgAAAAAAACKOAAAAAAAAAAAAAAAAPC/"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "printf"
					},
					"BgAAAIg4AAAAAAAAiTgAAAAAAAAAAAAAiTgAAAAAAACKOAAAAAAAAAAAAACKOAAAAAAAAIs4AAAAAAAAAAAAAIs4AAAAAAAAjDgAAAAAAAAAAAAAjDgAAAAAAACNOAAAAAAAAAAAAACNOAAAAAAAAI44AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiDgAAAAAAACIOAAAAAAAAAAAAAAAAPC/"
				],
				[
					685,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI44AAAAAAAAkDgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjjgAAAAAAACOOAAAAAAAAAAAAAAAAPC/"
				],
				[
					686,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAI84AAAAAAAAkTgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjzgAAAAAAACPOAAAAAAAAAAAAAAAAPC/"
				],
				[
					687,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAJA4AAAAAAAAkTgAAAAAAAAAAAAAkTgAAAAAAACSOAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkDgAAAAAAACQOAAAAAAAAAAAAAAAAPC/"
				],
				[
					689,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJQ4AAAAAAAAlTgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlDgAAAAAAACUOAAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJg4AAAAAAAAmTgAAAAAAAAAAAAAmTgAAAAAAACaOAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmDgAAAAAAACYOAAAAAAAAAAAAAAAgFVA"
				],
				[
					694,
					1,
					"left_delete",
					null,
					"AQAAAJk4AAAAAAAAmTgAAAAAAAABAAAACQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmjgAAAAAAACaOAAAAAAAAAAAAAAAAPC/"
				],
				[
					695,
					1,
					"insert",
					{
						"characters": "printf"
					},
					"BgAAAJk4AAAAAAAAmjgAAAAAAAAAAAAAmjgAAAAAAACbOAAAAAAAAAAAAACbOAAAAAAAAJw4AAAAAAAAAAAAAJw4AAAAAAAAnTgAAAAAAAAAAAAAnTgAAAAAAACeOAAAAAAAAAAAAACeOAAAAAAAAJ84AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmTgAAAAAAACZOAAAAAAAAAAAAAAAAPC/"
				],
				[
					696,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ84AAAAAAAAoTgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnzgAAAAAAACfOAAAAAAAAAAAAAAAAPC/"
				],
				[
					697,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKA4AAAAAAAAojgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoDgAAAAAAACgOAAAAAAAAAAAAAAAAPC/"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": "\\n\\n"
					},
					"BAAAAKE4AAAAAAAAojgAAAAAAAAAAAAAojgAAAAAAACjOAAAAAAAAAAAAACjOAAAAAAAAKQ4AAAAAAAAAAAAAKQ4AAAAAAAApTgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoTgAAAAAAAChOAAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKc4AAAAAAAAqDgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApzgAAAAAAACnOAAAAAAAAAAAAAAAAPC/"
				],
				[
					703,
					1,
					"left_delete",
					null,
					"AQAAAGQ4AAAAAAAAZDgAAAAAAAABAAAAbg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZTgAAAAAAABlOAAAAAAAAAAAAAAAAPC/"
				],
				[
					705,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAGM4AAAAAAAAZDgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYzgAAAAAAABjOAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAIliAAAAAAAAiWIAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKYgAAAAAAAIpiAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAIliAAAAAAAAimIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJYgAAAAAAAIliAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAIliAAAAAAAAiWIAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKYgAAAAAAAIpiAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAIliAAAAAAAAimIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJYgAAAAAAAIliAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAAIliAAAAAAAAiWIAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKYgAAAAAAAIpiAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"DQAAAAlkAAAAAAAADGQAAAAAAAAAAAAA9mMAAAAAAAD5YwAAAAAAAAAAAADzYwAAAAAAAPZjAAAAAAAAAAAAAONjAAAAAAAA5mMAAAAAAAAAAAAA32MAAAAAAADiYwAAAAAAAAAAAADOYwAAAAAAANFjAAAAAAAAAAAAAMljAAAAAAAAzGMAAAAAAAAAAAAAg2MAAAAAAACGYwAAAAAAAAAAAABaYwAAAAAAAF1jAAAAAAAAAAAAADVjAAAAAAAAOGMAAAAAAAAAAAAA9mIAAAAAAAD5YgAAAAAAAAAAAADDYgAAAAAAAMZiAAAAAAAAAAAAAJJiAAAAAAAAlWIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCYgAAAAAAAApkAAAAAAAAAAAAAAAAckA"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAIliAAAAAAAAimIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJYgAAAAAAAIliAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAAIliAAAAAAAAiWIAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKYgAAAAAAAIpiAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"IQAAAJk4AAAAAAAAnDgAAAAAAAAAAAAAljgAAAAAAACZOAAAAAAAAAAAAACIOAAAAAAAAIs4AAAAAAAAAAAAAIQ4AAAAAAAAhzgAAAAAAAAAAAAAfzgAAAAAAACCOAAAAAAAAAAAAAB5OAAAAAAAAHw4AAAAAAAAAAAAAG04AAAAAAAAcDgAAAAAAAAAAAAAYDgAAAAAAABjOAAAAAAAAAAAAAAfOAAAAAAAACI4AAAAAAAAAAAAAOs3AAAAAAAA7jcAAAAAAAAAAAAAlzcAAAAAAACaNwAAAAAAAAAAAABXNwAAAAAAAFo3AAAAAAAAAAAAAAc3AAAAAAAACjcAAAAAAAAAAAAAsjYAAAAAAAC1NgAAAAAAAAAAAABkNgAAAAAAAGc2AAAAAAAAAAAAABk2AAAAAAAAHDYAAAAAAAAAAAAAzjUAAAAAAADRNQAAAAAAAAAAAACDNQAAAAAAAIY1AAAAAAAAAAAAADg1AAAAAAAAOzUAAAAAAAAAAAAA7TQAAAAAAADwNAAAAAAAAAAAAACiNAAAAAAAAKU0AAAAAAAAAAAAAFc0AAAAAAAAWjQAAAAAAAAAAAAADDQAAAAAAAAPNAAAAAAAAAAAAADBMwAAAAAAAMQzAAAAAAAAAAAAAHYzAAAAAAAAeTMAAAAAAAAAAAAAKzMAAAAAAAAuMwAAAAAAAAAAAADgMgAAAAAAAOMyAAAAAAAAAAAAAJUyAAAAAAAAmDIAAAAAAAAAAAAASjIAAAAAAABNMgAAAAAAAAAAAAD/MQAAAAAAAAIyAAAAAAAAAAAAAIkxAAAAAAAAjDEAAAAAAAAAAAAANTEAAAAAAAA4MQAAAAAAAAAAAAAGMQAAAAAAAAkxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHMQAAAAAAAJ44AAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAOxiAAAAAAAA7WIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsYgAAAAAAAOxiAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"left_delete",
					null,
					"AQAAAOxiAAAAAAAA7GIAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtYgAAAAAAAO1iAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAPRiAAAAAAAA9WIAAAAAAAAAAAAA9WIAAAAAAAD2YgAAAAAAAAAAAAD2YgAAAAAAAPdiAAAAAAAAAAAAAPdiAAAAAAAA+GIAAAAAAAAAAAAA+GIAAAAAAAD5YgAAAAAAAAAAAAD5YgAAAAAAAPpiAAAAAAAAAAAAAPpiAAAAAAAA+2IAAAAAAAAAAAAA+2IAAAAAAAD8YgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0YgAAAAAAAPRiAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAAPxiAAAAAAAA/WIAAAAAAAAAAAAA/WIAAAAAAAD+YgAAAAAAAAAAAAD+YgAAAAAAAP9iAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8YgAAAAAAAPxiAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"left_delete",
					null,
					"AwAAAO9iAAAAAAAA72IAAAAAAAABAAAAZe5iAAAAAAAA7mIAAAAAAAABAAAAYe1iAAAAAAAA7WIAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwYgAAAAAAAPBiAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "mtl"
					},
					"AwAAAO1iAAAAAAAA7mIAAAAAAAAAAAAA7mIAAAAAAADvYgAAAAAAAAAAAADvYgAAAAAAAPBiAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtYgAAAAAAAO1iAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"left_delete",
					null,
					"AwAAAO9iAAAAAAAA72IAAAAAAAABAAAAbO5iAAAAAAAA7mIAAAAAAAABAAAAdO1iAAAAAAAA7WIAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwYgAAAAAAAPBiAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"AwAAAO1iAAAAAAAA7mIAAAAAAAAAAAAA7mIAAAAAAADvYgAAAAAAAAAAAADvYgAAAAAAAPBiAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtYgAAAAAAAO1iAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"left_delete",
					null,
					"CwAAAP5iAAAAAAAA/mIAAAAAAAABAAAAO/1iAAAAAAAA/WIAAAAAAAABAAAAMPxiAAAAAAAA/GIAAAAAAAABAAAAIPtiAAAAAAAA+2IAAAAAAAABAAAAbvpiAAAAAAAA+mIAAAAAAAABAAAAcvliAAAAAAAA+WIAAAAAAAABAAAAdfhiAAAAAAAA+GIAAAAAAAABAAAAdPdiAAAAAAAA92IAAAAAAAABAAAAZfZiAAAAAAAA9mIAAAAAAAABAAAAcvViAAAAAAAA9WIAAAAAAAABAAAACfRiAAAAAAAA9GIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/YgAAAAAAAP9iAAAAAAAAAAAAAACAfEA"
				],
				[
					147,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"IQAAAPk4AAAAAAAA+TgAAAAAAAADAAAALy8g8zgAAAAAAADzOAAAAAAAAAMAAAAvLyDiOAAAAAAAAOI4AAAAAAAAAwAAAC8vINs4AAAAAAAA2zgAAAAAAAADAAAALy8g0zgAAAAAAADTOAAAAAAAAAMAAAAvLyDKOAAAAAAAAMo4AAAAAAAAAwAAAC8vILs4AAAAAAAAuzgAAAAAAAADAAAALy8gqzgAAAAAAACrOAAAAAAAAAMAAAAvLyBnOAAAAAAAAGc4AAAAAAAAAwAAAC8vIDA4AAAAAAAAMDgAAAAAAAADAAAALy8g2TcAAAAAAADZNwAAAAAAAAMAAAAvLyCWNwAAAAAAAJY3AAAAAAAAAwAAAC8vIEM3AAAAAAAAQzcAAAAAAAADAAAALy8g6zYAAAAAAADrNgAAAAAAAAMAAAAvLyCaNgAAAAAAAJo2AAAAAAAAAwAAAC8vIEw2AAAAAAAATDYAAAAAAAADAAAALy8g/jUAAAAAAAD+NQAAAAAAAAMAAAAvLyCwNQAAAAAAALA1AAAAAAAAAwAAAC8vIGI1AAAAAAAAYjUAAAAAAAADAAAALy8gFDUAAAAAAAAUNQAAAAAAAAMAAAAvLyDGNAAAAAAAAMY0AAAAAAAAAwAAAC8vIHg0AAAAAAAAeDQAAAAAAAADAAAALy8gKjQAAAAAAAAqNAAAAAAAAAMAAAAvLyDcMwAAAAAAANwzAAAAAAAAAwAAAC8vII4zAAAAAAAAjjMAAAAAAAADAAAALy8gQDMAAAAAAABAMwAAAAAAAAMAAAAvLyDyMgAAAAAAAPIyAAAAAAAAAwAAAC8vIKQyAAAAAAAApDIAAAAAAAADAAAALy8gVjIAAAAAAABWMgAAAAAAAAMAAAAvLyAIMgAAAAAAAAgyAAAAAAAAAwAAAC8vII8xAAAAAAAAjzEAAAAAAAADAAAALy8gODEAAAAAAAA4MQAAAAAAAAMAAAAvLyAGMQAAAAAAAAYxAAAAAAAAAwAAAC8vIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATMQAAAAAAAAs5AAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAAG5XAAAAAAAAb1cAAAAAAAAAAAAAb1cAAAAAAABvVwAAAAAAAAUAAABza2VsVg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuVwAAAAAAAHNXAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"left_delete",
					null,
					"AQAAAG5XAAAAAAAAblcAAAAAAAABAAAAYg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvVwAAAAAAAG9XAAAAAAAAAAAAAAAA8L8"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAG5XAAAAAAAAb1cAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuVwAAAAAAAG5XAAAAAAAAAAAAAAAA8L8"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAANZ3AAAAAAAA13cAAAAAAAAAAAAA13cAAAAAAADYdwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWdwAAAAAAANZ3AAAAAAAAAAAAAAAA8L8"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAN53AAAAAAAA33cAAAAAAAAAAAAA33cAAAAAAADgdwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADedwAAAAAAAN53AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 5329,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/assimp/types.h",
			"settings":
			{
				"buffer_size": 16945,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/assimp-5.4.2/port/dAssimp/assimp/mesh.d",
			"redo_stack":
			[
				[
					10,
					1,
					"duplicate_line",
					null,
					"AQAAAHwTAAAAAAAAfBMAAAAAAAAIAAAAYWlTdHJpbmc",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfBMAAAAAAACEEwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 16285,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 3200 files for \"mat4\" (case sensitive, whole word)\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\CMakeLists.txt:\n   90    src/mat3x2.c\n   91    src/mat3x4.c\n   92:   src/mat4.c\n   93    src/mat4x2.c\n   94    src/mat4x3.c\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\CONTRIBUTING.md:\n   24  CGLM_INLINE\n   25  void\n   26: glm_mul(mat4 m1, mat4 m2, mat4 dest)\n   27  ```\n   28  \n   ..\n   30  \n   31  ```C\n   32: CGLM_INLINE void glm_mul(mat4 m1, mat4 m2, mat4 dest)\n   33  ```\n   34  - Variables must be declared at the top of a scope before usage:\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\Makefile.am:\n   42                 include/cglm/cam.h \\\n   43                 include/cglm/io.h \\\n   44:                include/cglm/mat4.h \\\n   45                 include/cglm/mat4x2.h \\\n   46                 include/cglm/mat4x3.h \\\n   ..\n  101  \n  102  cglm_calldir=$(includedir)/cglm/call\n  103: cglm_call_HEADERS = include/cglm/call/mat4.h \\\n  104                      include/cglm/call/mat4x2.h \\\n  105                      include/cglm/call/mat4x3.h \\\n  ...\n  156  cglm_simd_sse2dir=$(includedir)/cglm/simd/sse2\n  157  cglm_simd_sse2_HEADERS = include/cglm/simd/sse2/affine.h \\\n  158:                          include/cglm/simd/sse2/mat4.h \\\n  159                           include/cglm/simd/sse2/mat3.h \\\n  160                           include/cglm/simd/sse2/mat2.h \\\n  ...\n  162  \n  163  cglm_simd_avxdir=$(includedir)/cglm/simd/avx\n  164: cglm_simd_avx_HEADERS = include/cglm/simd/avx/mat4.h \\\n  165                          include/cglm/simd/avx/affine.h\n  166  \n  ...\n  168  cglm_simd_neon_HEADERS = include/cglm/simd/neon/affine.h \\\n  169                           include/cglm/simd/neon/mat2.h \\\n  170:                          include/cglm/simd/neon/mat4.h \\\n  171                           include/cglm/simd/neon/quat.h\n  172  \n  ...\n  175                           include/cglm/simd/wasm/mat2.h \\\n  176                           include/cglm/simd/wasm/mat3.h \\\n  177:                          include/cglm/simd/wasm/mat4.h \\\n  178                           include/cglm/simd/wasm/quat.h\n  179  \n  ...\n  183  \n  184  cglm_structdir=$(includedir)/cglm/struct\n  185: cglm_struct_HEADERS = include/cglm/struct/mat4.h \\\n  186                        include/cglm/struct/mat4x2.h \\\n  187                        include/cglm/struct/mat4x3.h \\\n  ...\n  258      src/mat3x2.c \\\n  259      src/mat3x4.c \\\n  260:     src/mat4.c \\\n  261      src/mat4x2.c \\\n  262      src/mat4x3.c \\\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\meson.build:\n   53      'src/mat3x2.c',\n   54      'src/mat3x4.c',\n   55:     'src/mat4.c',\n   56      'src/mat4x2.c',\n   57      'src/mat4x3.c',\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\README.md:\n   70  \n   71  #### 📌 Note for new comers (Important):\n   72: - `vec4` and `mat4` variables must be aligned. (There will be unaligned versions later)\n   73  - **in** and **[in, out]** parameters must be initialized (please). But **[out]** parameters not, initializing out param is  also redundant\n   74  - All functions are inline if you don't want to use pre-compiled versions with glmc_ prefix, you can ignore build process. Just include headers.\n   ..\n   80  \n   81  #### 📌 Allocations?\n   82: `cglm` doesn't alloc any memory on heap. So it doesn't provide any allocator. You should alloc memory for **out** parameters too if you pass pointer of memory location. Don't forget that **vec4** (also quat/**versor**) and **mat4** must be aligned (16-bytes), because *cglm* uses SIMD instructions to optimize most operations if available.\n   83  \n   84  #### 📌 Returning vector or matrix... ?\n   ..\n  107  - option to use different clipspaces e.g. Left Handed, Zero-to-One... (currently right handed negative-one is default)\n  108  - array api and struct api, you can use arrays or structs.\n  109: - general purpose matrix operations (mat4, mat3)\n  110  - chain matrix multiplication (square only)\n  111  - general purpose vector operations (cross, dot, rotate, proj, angle...)\n  ...\n  140    #include <cglm/call.h>   /* for library call (this also includes cglm.h) */\n  141  \n  142:   mat4 rot, trans, rt;\n  143    /* ... */\n  144    glm_mul(trans, rot, rt);  /* inline */\n  ...\n  150  \n  151  ```C\n  152:   mat4 m = {\n  153      1, 0, 0, 0,\n  154      0, 1, 0, 0,\n  ...\n  160  ```\n  161  \n  162: Library contains general purpose mat4 mul and inverse functions, and also contains some special forms (optimized) of these functions for affine transformations' matrices. If you want to multiply two affine transformation matrices you can use glm_mul instead of glm_mat4_mul and glm_inv_tr (ROT + TR) instead glm_mat4_inv\n  163  ```C\n  164  /* multiplication */\n  165: mat4 modelMat;\n  166  glm_mul(T, R, modelMat);\n  167  \n  ...\n  422  #### Option 1\n  423  ```C\n  424: mat4 proj, view, model, mvp;\n  425  \n  426  /* init proj, view and model ... */\n  ...\n  432  #### Option 2\n  433  ```C\n  434: mat4 proj, view, model, mvp;\n  435  \n  436  /* init proj, view and model ... */\n  437  \n  438: glm_mat4_mulN((mat4 *[]){&proj, &view, &model}, 3, mvp);\n  439  ```\n  440  \n  441  ## How to send matrix to OpenGL\n  442  \n  443: mat4 is array of vec4 and vec4 is array of floats. `glUniformMatrix4fv` functions accecpts `float*` as `value` (last param), so you can cast mat4 to float* or you can pass first column of matrix as beginning of memory of matrix:\n  444  \n  445  Option 1: Send first column\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\win\\cglm.vcxproj:\n   78      <ClCompile Include=\"..\\src\\mat3x2.c\" />\n   79      <ClCompile Include=\"..\\src\\mat3x4.c\" />\n   80:     <ClCompile Include=\"..\\src\\mat4.c\" />\n   81      <ClCompile Include=\"..\\src\\mat4x2.c\" />\n   82      <ClCompile Include=\"..\\src\\mat4x3.c\" />\n   ..\n  135      <ClInclude Include=\"..\\include\\cglm\\call\\mat3x2.h\" />\n  136      <ClInclude Include=\"..\\include\\cglm\\call\\mat3x4.h\" />\n  137:     <ClInclude Include=\"..\\include\\cglm\\call\\mat4.h\" />\n  138      <ClInclude Include=\"..\\include\\cglm\\call\\mat4x2.h\" />\n  139      <ClInclude Include=\"..\\include\\cglm\\call\\mat4x3.h\" />\n  ...\n  181      <ClInclude Include=\"..\\include\\cglm\\mat3x2.h\" />\n  182      <ClInclude Include=\"..\\include\\cglm\\mat3x4.h\" />\n  183:     <ClInclude Include=\"..\\include\\cglm\\mat4.h\" />\n  184      <ClInclude Include=\"..\\include\\cglm\\mat4x2.h\" />\n  185      <ClInclude Include=\"..\\include\\cglm\\mat4x3.h\" />\n  ...\n  190      <ClInclude Include=\"..\\include\\cglm\\simd\\arm.h\" />\n  191      <ClInclude Include=\"..\\include\\cglm\\simd\\avx\\affine.h\" />\n  192:     <ClInclude Include=\"..\\include\\cglm\\simd\\avx\\mat4.h\" />\n  193      <ClInclude Include=\"..\\include\\cglm\\simd\\intrin.h\" />\n  194      <ClInclude Include=\"..\\include\\cglm\\simd\\neon\\affine.h\" />\n  195      <ClInclude Include=\"..\\include\\cglm\\simd\\neon\\mat2.h\" />\n  196:     <ClInclude Include=\"..\\include\\cglm\\simd\\neon\\mat4.h\" />\n  197      <ClInclude Include=\"..\\include\\cglm\\simd\\neon\\quat.h\" />\n  198      <ClInclude Include=\"..\\include\\cglm\\simd\\sse2\\affine.h\" />\n  199      <ClInclude Include=\"..\\include\\cglm\\simd\\sse2\\mat2.h\" />\n  200      <ClInclude Include=\"..\\include\\cglm\\simd\\sse2\\mat3.h\" />\n  201:     <ClInclude Include=\"..\\include\\cglm\\simd\\sse2\\mat4.h\" />\n  202      <ClInclude Include=\"..\\include\\cglm\\simd\\sse2\\quat.h\" />\n  203      <ClInclude Include=\"..\\include\\cglm\\simd\\wasm.h\" />\n  ...\n  205      <ClInclude Include=\"..\\include\\cglm\\simd\\wasm\\mat2.h\" />\n  206      <ClInclude Include=\"..\\include\\cglm\\simd\\wasm\\mat3.h\" />\n  207:     <ClInclude Include=\"..\\include\\cglm\\simd\\wasm\\mat4.h\" />\n  208      <ClInclude Include=\"..\\include\\cglm\\simd\\wasm\\quat.h\" />\n  209      <ClInclude Include=\"..\\include\\cglm\\simd\\x86.h\" />\n  ...\n  248      <ClInclude Include=\"..\\include\\cglm\\struct\\mat3x2.h\" />\n  249      <ClInclude Include=\"..\\include\\cglm\\struct\\mat3x4.h\" />\n  250:     <ClInclude Include=\"..\\include\\cglm\\struct\\mat4.h\" />\n  251      <ClInclude Include=\"..\\include\\cglm\\struct\\mat4x2.h\" />\n  252      <ClInclude Include=\"..\\include\\cglm\\struct\\mat4x3.h\" />\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\win\\cglm.vcxproj.filters:\n   71        <Filter>src</Filter>\n   72      </ClCompile>\n   73:     <ClCompile Include=\"..\\src\\mat4.c\">\n   74        <Filter>src</Filter>\n   75      </ClCompile>\n   ..\n  211        <Filter>include\\cglm\\call</Filter>\n  212      </ClInclude>\n  213:     <ClInclude Include=\"..\\include\\cglm\\call\\mat4.h\">\n  214        <Filter>include\\cglm\\call</Filter>\n  215      </ClInclude>\n  ...\n  235        <Filter>include\\cglm\\simd\\avx</Filter>\n  236      </ClInclude>\n  237:     <ClInclude Include=\"..\\include\\cglm\\simd\\avx\\mat4.h\">\n  238        <Filter>include\\cglm\\simd\\avx</Filter>\n  239      </ClInclude>\n  240:     <ClInclude Include=\"..\\include\\cglm\\simd\\neon\\mat4.h\">\n  241        <Filter>include\\cglm\\simd\\neon</Filter>\n  242      </ClInclude>\n  ...\n  247        <Filter>include\\cglm\\simd\\sse2</Filter>\n  248      </ClInclude>\n  249:     <ClInclude Include=\"..\\include\\cglm\\simd\\sse2\\mat4.h\">\n  250        <Filter>include\\cglm\\simd\\sse2</Filter>\n  251      </ClInclude>\n  ...\n  289        <Filter>include\\cglm</Filter>\n  290      </ClInclude>\n  291:     <ClInclude Include=\"..\\include\\cglm\\mat4.h\">\n  292        <Filter>include\\cglm</Filter>\n  293      </ClInclude>\n  ...\n  418        <Filter>include\\cglm\\struct</Filter>\n  419      </ClInclude>\n  420:     <ClInclude Include=\"..\\include\\cglm\\struct\\mat4.h\">\n  421        <Filter>include\\cglm\\struct</Filter>\n  422      </ClInclude>\n  ...\n  703        <Filter>include\\cglm\\simd\\wasm</Filter>\n  704      </ClInclude>\n  705:     <ClInclude Include=\"..\\include\\cglm\\simd\\wasm\\mat4.h\">\n  706        <Filter>include\\cglm\\simd\\wasm</Filter>\n  707      </ClInclude>\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\tests.h:\n   98  TEST_DECLARE(glmc_rotate2d_to)\n   99  \n  100: /* mat4 */\n  101  TEST_DECLARE(glm_mat4_ucopy)\n  102  TEST_DECLARE(glm_mat4_copy)\n  ...\n 1276    TEST_ENTRY(glmc_rotate2d_to)\n 1277    \n 1278:   /* mat4 */\n 1279    TEST_ENTRY(glm_mat4_ucopy)\n 1280    TEST_ENTRY(glm_mat4_copy)\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_affine.h:\n    9  \n   10  TEST_IMPL(GLM_PREFIX, translate) {\n   11:   mat4 m1;\n   12    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n   13  \n   ..\n   34  \n   35  TEST_IMPL(GLM_PREFIX, translate_to) {\n   36:   mat4 m1, m2;\n   37    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n   38  \n   ..\n   59  \n   60  TEST_IMPL(GLM_PREFIX, translate_x) {\n   61:   mat4 m1;\n   62    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n   63  \n   ..\n   84  \n   85  TEST_IMPL(GLM_PREFIX, translate_y) {\n   86:   mat4 m1;\n   87    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n   88  \n   ..\n  109  \n  110  TEST_IMPL(GLM_PREFIX, translate_z) {\n  111:   mat4 m1;\n  112    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n  113  \n  ...\n  134  \n  135  TEST_IMPL(GLM_PREFIX, translate_make) {\n  136:   mat4 m1;\n  137    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n  138  \n  ...\n  159  \n  160  TEST_IMPL(GLM_PREFIX, scale_to) {\n  161:   mat4 m1, m2;\n  162    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n  163  \n  ...\n  184  \n  185  TEST_IMPL(GLM_PREFIX, scale_make) {\n  186:   mat4 m1;\n  187    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n  188  \n  ...\n  207  \n  208  TEST_IMPL(GLM_PREFIX, scale) {\n  209:   mat4 m1;\n  210    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n  211  \n  ...\n  232  \n  233  TEST_IMPL(GLM_PREFIX, scale_uni) {\n  234:   mat4 m1;\n  235    vec4 v1 = {1.0f, 2.0f, 3.0f, 1.0f}, v2;\n  236  \n  ...\n  257  \n  258  TEST_IMPL(GLM_PREFIX, rotate_x) {\n  259:   mat4   m1 = GLM_MAT4_IDENTITY_INIT;\n  260    vec4   v1 = {0.0f, 1.0f, 0.0f, 1.0f}, v2 = {0.0f, 1.0f, 0.0f, 1.0f};\n  261  \n  ...\n  289  \n  290  TEST_IMPL(GLM_PREFIX, rotate_y) {\n  291:   mat4   m1 = GLM_MAT4_IDENTITY_INIT;\n  292    vec4   v1 = {1.0f, 0.0f, 0.0f, 1.0f}, v2 = {1.0f, 0.0f, 0.0f, 1.0f};\n  293  \n  ...\n  321  \n  322  TEST_IMPL(GLM_PREFIX, rotate_z) {\n  323:   mat4   m1 = GLM_MAT4_IDENTITY_INIT;\n  324    vec4   v1 = {0.0f, 1.0f, 0.0f, 1.0f}, v2 = {0.0f, 1.0f, 0.0f, 1.0f};\n  325  \n  ...\n  353  \n  354  TEST_IMPL(GLM_PREFIX, rotate_make) {\n  355:   mat4   m1 = GLM_MAT4_IDENTITY_INIT;\n  356    vec4   v1 = {1.0f, 0.0f, 0.0f, 1.0f};\n  357  \n  ...\n  384  \n  385  TEST_IMPL(GLM_PREFIX, rotate) {\n  386:   mat4 m1 = GLM_MAT4_IDENTITY_INIT, m2 = GLM_MAT4_IDENTITY_INIT;\n  387    vec4 v1 = {1.0f, 0.0f, 0.0f, 1.0f};\n  388  \n  ...\n  426  \n  427  TEST_IMPL(GLM_PREFIX, rotate_at) {\n  428:   mat4 m1 = GLM_MAT4_IDENTITY_INIT;\n  429    vec4 v1 = {1.0f, 0.0f, 0.0f, 1.0f};\n  430  \n  ...\n  462  \n  463  TEST_IMPL(GLM_PREFIX, rotate_atm) {\n  464:   mat4 m1 = GLM_MAT4_IDENTITY_INIT;\n  465    vec4 v1 = {1.0f, 0.0f, 0.0f, 1.0f};\n  466  \n  ...\n  494  \n  495  TEST_IMPL(GLM_PREFIX, decompose_scalev) {\n  496:   mat4 m1;\n  497    vec3 s1;\n  498  \n  ...\n  525  \n  526  TEST_IMPL(GLM_PREFIX, uniscaled) {\n  527:   mat4 m1;\n  528  \n  529    GLM(scale_make)(m1, (vec3){7.0f, 8.0f, 9.0f});\n  ...\n  543  \n  544  TEST_IMPL(GLM_PREFIX, decompose_rs) {\n  545:   mat4 m1, m2, r;\n  546    vec3 s1;\n  547  \n  ...\n  578  \n  579  TEST_IMPL(GLM_PREFIX, decompose) {\n  580:   mat4 m1, m2, r;\n  581    vec4 t;\n  582    vec3 s;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_affine_mat.h:\n   12  CGLM_INLINE\n   13  void\n   14: glm_inv_tr_raw(mat4 mat) {\n   15    CGLM_ALIGN_MAT mat3 r;\n   16    CGLM_ALIGN(8)  vec3 t;\n   ..\n   28  \n   29  TEST_IMPL(GLM_PREFIX, mul) {\n   30:   mat4 m1 = GLM_MAT4_IDENTITY_INIT;\n   31:   mat4 m2 = GLM_MAT4_IDENTITY_INIT;\n   32:   mat4 m3;\n   33:   mat4 m4 = GLM_MAT4_ZERO_INIT;\n   34    int  i, j, k;\n   35  \n   ..\n   56  \n   57  TEST_IMPL(GLM_PREFIX, mul_rot) {\n   58:   mat4 m1 = GLM_MAT4_IDENTITY_INIT;\n   59:   mat4 m2 = GLM_MAT4_IDENTITY_INIT;\n   60:   mat4 m3;\n   61:   mat4 m4 = GLM_MAT4_ZERO_INIT;\n   62    int  i, j, k;\n   63  \n   ..\n   84  \n   85  TEST_IMPL(GLM_PREFIX, inv_tr) {\n   86:   mat4 m1, m2;\n   87    int  i;\n   88  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_cam.h:\n    9  \n   10  TEST_IMPL(GLM_PREFIX, frustum) {\n   11:   mat4  proj;\n   12    vec4  vp = {0.0f, 0.0f, 800.0f, 600.0f};\n   13    float left, right, top, bottom, znear, zfar;\n   ..\n   69  \n   70  TEST_IMPL(GLM_PREFIX, camera_lookat) {\n   71:   mat4 view1, view2;\n   72    vec3 center,\n   73         eye = {0.024f, 14.6f, 67.04f},\n   ..\n   86  \n   87  TEST_IMPL(GLM_PREFIX, camera_decomp) {\n   88:   mat4  proj, proj2;\n   89    vec4  sizes;\n   90    float aspect, fovy, nearZ, farZ;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_cam_lh_no.h:\n   11  \n   12  TEST_IMPL(GLM_PREFIX, perspective_lh_no) {\n   13:   mat4 dst;\n   14    const float fovy     = glm_rad(45.0f);\n   15    const float aspect   = 640/480.0f;\n   ..\n   28    /* Sanity mk. II */\n   29    /*reference test data for glm_perspective_lh_no*/\n   30:   mat4 cmp = {0};\n   31    cmp[0][0] =  1.8106601f;\n   32    cmp[1][1] =  2.4142134f;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_cam_lh_zo.h:\n   11  \n   12  TEST_IMPL(GLM_PREFIX, perspective_lh_zo) {\n   13:   mat4 dst;\n   14    const float fovy     = glm_rad(45.0f);\n   15    const float aspect   = 640/480.0f;\n   ..\n   28    /* Sanity mk. II */\n   29    /* \"Reference values\" generated by GLM's glm::perspectiveLH_ZO */\n   30:   mat4 cmp = {0};\n   31    cmp[0][0] =  1.8106601f;\n   32    cmp[1][1] =  2.4142134f;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_cam_rh_no.h:\n   11  \n   12  TEST_IMPL(GLM_PREFIX, perspective_rh_no) {\n   13:   mat4 dst;\n   14    const float fovy     = glm_rad(45.0f);\n   15    const float aspect   = 640/480.0f;\n   ..\n   28    /* Sanity mk. II */\n   29    /*reference test data for glm_perspective_rh_no*/\n   30:   mat4 cmp = {0};\n   31    cmp[0][0] =  1.8106601f;\n   32    cmp[1][1] =  2.4142134f;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_cam_rh_zo.h:\n   11  \n   12  TEST_IMPL(GLM_PREFIX, perspective_rh_zo) {\n   13:   mat4 dst;\n   14    const float fovy     = glm_rad(45.0f);\n   15    const float aspect   = 640/480.0f;\n   ..\n   28    /* Sanity mk. II */\n   29    /*reference test data for glm_perspective_rh_zo*/\n   30:   mat4 cmp = {0};\n   31    cmp[0][0] =  1.8106601f;\n   32    cmp[1][1] =  2.4142134f;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_common.c:\n    8  \n    9  void\n   10: test_rand_mat4(mat4 dest) {\n   11    glm_mat4_copy(GLM_MAT4_IDENTITY, dest);\n   12  \n   ..\n   59  void\n   60  test_rand_mat3(mat3 dest) {\n   61:   mat4 m4;\n   62  \n   63    /* random rotatation around random axis with random angle */\n   ..\n  165  \n  166  test_status_t\n  167: test_assert_mat4_eq(mat4 m1, mat4 m2) {\n  168    int i, j;\n  169  \n  ...\n  178  \n  179  test_status_t\n  180: test_assert_mat4_eqt(mat4 m1, mat4 m2) {\n  181    int i, j;\n  182  \n  ...\n  191  \n  192  test_status_t\n  193: test_assert_mat4_eq2(mat4 m1, mat4 m2, float eps) {\n  194    int i, j;\n  195  \n  ...\n  420  \n  421  test_status_t\n  422: test_assert_mat4_eq_identity(mat4 m4) {\n  423    int i, j;\n  424  \n  ...\n  437  \n  438  test_status_t\n  439: test_assert_mat4_eq_zero(mat4 m4) {\n  440    int i, j;\n  441  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_common.h:\n   16  \n   17  void\n   18: test_rand_mat4(mat4 dest);\n   19  \n   20  void\n   ..\n   46  \n   47  test_status_t\n   48: test_assert_mat4_eq(mat4 m1, mat4 m2);\n   49  \n   50  test_status_t\n   51: test_assert_mat4_eqt(mat4 m1, mat4 m2);\n   52  \n   53  test_status_t\n   54: test_assert_mat4_eq2(mat4 m1, mat4 m2, float eps);\n   55  \n   56  test_status_t\n   57: test_assert_mat4_eq_identity(mat4 m4);\n   58  \n   59  test_status_t\n   60: test_assert_mat4_eq_zero(mat4 m4);\n   61  \n   62  test_status_t\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_euler.c:\n    9  \n   10  TEST_IMPL(euler) {\n   11:   mat4 rot1, rot2;\n   12    vec3 inAngles, outAngles;\n   13  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_euler_to_quat_rh.h:\n   24    versor tmp;\n   25  \n   26:   mat4 expected_mat4;\n   27  \n   28    /* 100 randomized tests */\n   ..\n  118    versor tmp;\n  119  \n  120:   mat4 expected_mat4;\n  121  \n  122    /* 100 randomized tests */\n  ...\n  212    versor tmp;\n  213  \n  214:   mat4 expected_mat4;\n  215  \n  216    /* 100 randomized tests */\n  ...\n  306    versor tmp;\n  307  \n  308:   mat4 expected_mat4;\n  309  \n  310    /* 100 randomized tests */\n  ...\n  400    versor tmp;\n  401  \n  402:   mat4 expected_mat4;\n  403  \n  404    /* 100 randomized tests */\n  ...\n  494    versor tmp;\n  495  \n  496:   mat4 expected_mat4;\n  497  \n  498    /* 100 randomized tests */\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_mat2x4.h:\n   87    mat4x2 m2 = GLM_MAT4X2_ZERO_INIT;\n   88  \n   89:   mat4 m3 = GLM_MAT4_ZERO_INIT;\n   90:   mat4 m4 = GLM_MAT4_ZERO_INIT;\n   91  \n   92    int c, r, k;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_mat3.h:\n  131  TEST_IMPL(GLM_PREFIX, mat3_quat) {\n  132    mat3   m1, m3;\n  133:   mat4   m2;\n  134    versor q1, q2, q3;\n  135    vec3   axis1;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_mat3x4.h:\n   91    mat4x3 m2 = GLM_MAT4X3_ZERO_INIT;\n   92  \n   93:   mat4 m3 = GLM_MAT4_ZERO_INIT;\n   94:   mat4 m4 = GLM_MAT4_ZERO_INIT;\n   95  \n   96    int c, r, k;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_mat4.h:\n   13  \n   14  TEST_IMPL(GLM_PREFIX, mat4_ucopy) {\n   15:   mat4 m1 = A_MATRIX;\n   16:   mat4 m2 = GLM_MAT4_IDENTITY_INIT;\n   17  \n   18    GLM(mat4_ucopy)(m1, m2);\n   ..\n   24  \n   25  TEST_IMPL(GLM_PREFIX, mat4_copy) {\n   26:   mat4 m1 = A_MATRIX;\n   27:   mat4 m2 = GLM_MAT4_IDENTITY_INIT;\n   28  \n   29    GLM(mat4_copy)(m1, m2);\n   ..\n   35  \n   36  TEST_IMPL(GLM_PREFIX, mat4_identity) {\n   37:   mat4 m1 = GLM_MAT4_IDENTITY_INIT;\n   38:   mat4 m2 = GLM_MAT4_IDENTITY_INIT;\n   39:   mat4 m3;\n   40  \n   41    GLM(mat4_identity)(m3);\n   ..\n   50  TEST_IMPL(GLM_PREFIX, mat4_identity_array) {\n   51    size_t i, count;\n   52:   mat4 matrices[4] = {\n   53      A_MATRIX,\n   54      A_MATRIX,\n   ..\n   69  \n   70  TEST_IMPL(GLM_PREFIX, mat4_zero) {\n   71:   mat4 m1 = GLM_MAT4_ZERO_INIT;\n   72:   mat4 m2 = GLM_MAT4_ZERO_INIT;\n   73:   mat4 m3;\n   74  \n   75    GLM(mat4_zero)(m3);\n   ..\n   83  \n   84  TEST_IMPL(GLM_PREFIX, mat4_pick3) {\n   85:   mat4 m1 = A_MATRIX;\n   86    mat3 m2 = GLM_MAT3_ZERO_INIT;\n   87    mat3 m3 = A_MATRIX3;\n   ..\n   95  \n   96  TEST_IMPL(GLM_PREFIX, mat4_pick3t) {\n   97:   mat4 m1 = A_MATRIX;\n   98    mat3 m2 = GLM_MAT3_ZERO_INIT;\n   99    mat3 m3 = A_MATRIX3;\n  ...\n  107  \n  108  TEST_IMPL(GLM_PREFIX, mat4_ins3) {\n  109:   mat4 m1 = GLM_MAT4_IDENTITY_INIT;\n  110    mat3 m2 = A_MATRIX3;\n  111    int i, j;\n  ...\n  128  \n  129  TEST_IMPL(GLM_PREFIX, mat4_mul) {\n  130:   mat4 m1 = GLM_MAT4_IDENTITY_INIT;\n  131:   mat4 m2 = GLM_MAT4_IDENTITY_INIT;\n  132:   mat4 m3;\n  133:   mat4 m4 = GLM_MAT4_ZERO_INIT;\n  134    int  i, j, k;\n  135  \n  ...\n  158  \n  159  TEST_IMPL(GLM_PREFIX, mat4_mulN) {\n  160:   mat4 res1, res2;\n  161:   mat4 m1 = A_MATRIX;\n  162:   mat4 m2 = A_MATRIX;\n  163:   mat4 m3 = A_MATRIX;\n  164  \n  165:   mat4 *matrices[] = {\n  166      &m1, &m2, &m3\n  167    };\n  ...\n  179  TEST_IMPL(GLM_PREFIX, mat4_mulv) {\n  180    vec4 res;\n  181:   mat4 mat = A_MATRIX;\n  182    vec4 v = {1.0f, 2.0f, 3.0f, 4.0f};\n  183    int  i;\n  ...\n  198  TEST_IMPL(GLM_PREFIX, mat4_mulv3) {\n  199    vec4  res;\n  200:   mat4  mat = A_MATRIX;\n  201    vec3  v = {1.0f, 2.0f, 3.0f};\n  202    float last;\n  ...\n  219  \n  220  TEST_IMPL(GLM_PREFIX, mat4_trace) {\n  221:   mat4  mat = A_MATRIX;\n  222    float trace;\n  223  \n  ...\n  230  \n  231  TEST_IMPL(GLM_PREFIX, mat4_trace3) {\n  232:   mat4  mat = A_MATRIX;\n  233    float trace;\n  234  \n  ...\n  241  \n  242  TEST_IMPL(GLM_PREFIX, mat4_quat) {\n  243:   mat4   m1, m2;\n  244    versor q1, q2, q3;\n  245    vec3   axis1;\n  ...\n  268  \n  269  TEST_IMPL(GLM_PREFIX, mat4_transpose_to) {\n  270:   mat4  mat = A_MATRIX;\n  271:   mat4  m1;\n  272  \n  273    GLM(mat4_transpose_to)(mat, m1);\n  ...\n  279  \n  280  TEST_IMPL(GLM_PREFIX, mat4_transpose) {\n  281:   mat4 mat = A_MATRIX;\n  282:   mat4 m1;\n  283  \n  284    GLM(mat4_copy)(mat, m1);\n  ...\n  291  \n  292  TEST_IMPL(GLM_PREFIX, mat4_scale_p) {\n  293:   mat4 m1 = A_MATRIX;\n  294:   mat4 m2 = A_MATRIX;\n  295    int i, j, k, scale;\n  296  \n  ...\n  310  \n  311  TEST_IMPL(GLM_PREFIX, mat4_scale) {\n  312:   mat4 m1 = A_MATRIX;\n  313:   mat4 m2 = A_MATRIX;\n  314    int i, j, k, scale;\n  315  \n  ...\n  329  \n  330  TEST_IMPL(GLM_PREFIX, mat4_det) {\n  331:   mat4 mat = GLM_MAT4_IDENTITY_INIT;\n  332    float t[6];\n  333    float a, b, c, d,\n  ...\n  364  \n  365  TEST_IMPL(GLM_PREFIX, mat4_inv) {\n  366:   mat4 m1, m2, m3;\n  367    int  i;\n  368  \n  ...\n  381  \n  382  TEST_IMPL(GLM_PREFIX, mat4_inv_precise) {\n  383:   mat4 m1, m2, m3;\n  384:   mat4 m4, m5, m6;\n  385    int  i;\n  386  \n  ...\n  405  \n  406  TEST_IMPL(GLM_PREFIX, mat4_inv_fast) {\n  407:   mat4 m1, m2, m3;\n  408    int  i;\n  409    \n  ...\n  422  \n  423  TEST_IMPL(GLM_PREFIX, mat4_swap_col) {\n  424:   mat4 m1 = A_MATRIX;\n  425:   mat4 m2 = A_MATRIX;\n  426    \n  427    GLM(mat4_swap_col)(m1, 0, 1);\n  ...\n  437  \n  438  TEST_IMPL(GLM_PREFIX, mat4_swap_row) {\n  439:   mat4 m1 = A_MATRIX;\n  440:   mat4 m2 = A_MATRIX;\n  441    \n  442    GLM(mat4_swap_row)(m1, 0, 1);\n  ...\n  464  \n  465  TEST_IMPL(GLM_PREFIX, mat4_rmc) {\n  466:   mat4  mat = A_MATRIX;\n  467    vec4  v = {1.0f, 2.0f, 3.0f, 4.0f};\n  468    vec4  v1;\n  ...\n  487  \n  488  TEST_IMPL(GLM_PREFIX, mat4_make) {\n  489:   mat4 dest;\n  490    unsigned int i, j;\n  491    float src[16] = MAT4_ARRAY;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_project.h:\n    9  \n   10  TEST_IMPL(GLM_PREFIX, unprojecti) {\n   11:   mat4 model, view, proj, mvp;\n   12    vec4 viewport = {0.0f, 0.0f, 800.0f, 600.0f};\n   13    vec3 pos      = {13.0f, 45.0f, 0.74f};\n   ..\n   18  \n   19    glm_perspective_default(0.5f, proj);\n   20:   glm_mat4_mulN((mat4 *[]){&proj, &view, &model}, 3, mvp);\n   21  \n   22    GLM(project)(pos, mvp, viewport, projected);\n   ..\n   41  \n   42  TEST_IMPL(GLM_PREFIX, unproject) {\n   43:   mat4 model, view, proj, mvp;\n   44    vec4 viewport = {0.0f, 0.0f, 800.0f, 600.0f};\n   45    vec3 pos      = {13.0f, 45.0f, 0.74f};\n   ..\n   50  \n   51    glm_perspective_default(0.5f, proj);\n   52:   glm_mat4_mulN((mat4 *[]){&proj, &view, &model}, 3, mvp);\n   53  \n   54    GLM(project)(pos, mvp, viewport, projected);\n   ..\n   72  \n   73  TEST_IMPL(GLM_PREFIX, project) {\n   74:   mat4 model, view, proj, mvp;\n   75    vec4 viewport = {0.0f, 0.0f, 800.0f, 600.0f};\n   76    vec3 pos      = {13.0f, 45.0f, 0.74f};\n   ..\n   81  \n   82    glm_perspective_default(0.5f, proj);\n   83:   glm_mat4_mulN((mat4 *[]){&proj, &view, &model}, 3, mvp);\n   84  \n   85    GLM(project)(pos, mvp, viewport, projected);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_quat.h:\n   39    versor b = GLM_QUAT_IDENTITY_INIT;\n   40    versor c;\n   41:   mat4   r;\n   42  \n   43    GLM(quat_identity)(c);\n   ..\n  504  \n  505  TEST_IMPL(GLM_PREFIX, quat_mat4) {\n  506:   mat4   m1, m2;\n  507    versor q1, q2, q3;\n  508    vec3   axis1;\n  ...\n  548  \n  549  TEST_IMPL(GLM_PREFIX, quat_mat4t) {\n  550:   mat4   m1, m2;\n  551    versor q1, q2, q3;\n  552    vec3   axis1;\n  ...\n  599  \n  600  TEST_IMPL(GLM_PREFIX, quat_mat3) {\n  601:   mat4   m1, m2;\n  602    mat3   m3;\n  603    versor q1, q2, q3;\n  ...\n  653  \n  654  TEST_IMPL(GLM_PREFIX, quat_mat3t) {\n  655:   mat4   m1, m2;\n  656    mat3   m3;\n  657    versor q1, q2, q3;\n  ...\n  829    versor q1;\n  830    vec3   v1 = {0.0f, 1.0f, 0.0f};\n  831:   mat4   m1, m2;\n  832    \n  833    glm_quat(q1, glm_rad(90.0f), 0.0f, 1.0f, 0.0f);\n  ...\n  964  \n  965  TEST_IMPL(GLM_PREFIX, quat_rotate) {\n  966:   mat4   m1 = GLM_MAT4_IDENTITY_INIT, m2;\n  967    versor q1;\n  968    vec4   v1 = {1.0f, 0.0f, 0.0f, 1.0f};\n  ...\n 1011  \n 1012  TEST_IMPL(GLM_PREFIX, quat_rotate_at) {\n 1013:   mat4   m1 = GLM_MAT4_IDENTITY_INIT;\n 1014    versor q1;\n 1015    vec4   v1 = {1.0f, 0.0f, 0.0f, 1.0f};\n ....\n 1051  \n 1052  TEST_IMPL(GLM_PREFIX, quat_rotate_atm) {\n 1053:   mat4   m1 = GLM_MAT4_IDENTITY_INIT;\n 1054    versor q1;\n 1055    vec4   v1 = {1.0f, 0.0f, 0.0f, 1.0f};\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_struct.c:\n   72  TEST_IMPL(mat4s_identity_init) {\n   73    mat4s mat4_identity   = GLMS_MAT4_IDENTITY_INIT;\n   74:   mat4  mat4_identity_a =  GLM_MAT4_IDENTITY_INIT;\n   75    test_assert_mat4_eq(mat4_identity.raw, mat4_identity_a);\n   76    TEST_SUCCESS\n   ..\n   79  TEST_IMPL(mat4s_zero_init) {\n   80    mat4s mat4_zero   = GLMS_MAT4_ZERO_INIT;\n   81:   mat4  mat4_zero_a =  GLM_MAT4_ZERO_INIT;\n   82    test_assert_mat4_eq(mat4_zero.raw, mat4_zero_a);\n   83    TEST_SUCCESS\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\test\\src\\test_vec3.h:\n  954  TEST_IMPL(GLM_PREFIX, vec3_rotate_m4) {\n  955    vec3 v1 = {1.0f, 0.0f, 0.0f}, v2 = {1.0f, 1.0f, 1.0f};\n  956:   mat4 x, y, z;\n  957  \n  958    glm_rotate_make(x, GLM_PI_2f, GLM_XUP);\n  ...\n 1021  TEST_IMPL(GLM_PREFIX, vec3_rotate_m3) {\n 1022    vec3 v1 = {1.0f, 0.0f, 0.0f}, v2 = {1.0f, 1.0f, 1.0f};\n 1023:   mat4 x0, y0, z0;\n 1024    mat3 x, y, z;\n 1025  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\affine.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_translate_make(mat4 m, vec3 v) {\n   14    glm_translate_make(m, v);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_translate_to(mat4 m, vec3 v, mat4 dest) {\n   20    glm_translate_to(m, v, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_translate(mat4 m, vec3 v) {\n   26    glm_translate(m, v);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_translate_x(mat4 m, float to) {\n   32    glm_translate_x(m, to);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_translate_y(mat4 m, float to) {\n   38    glm_translate_y(m, to);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_translate_z(mat4 m, float to) {\n   44    glm_translate_z(m, to);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_scale_make(mat4 m, vec3 v) {\n   50    glm_scale_make(m, v);\n   51  }\n   ..\n   53  CGLM_EXPORT\n   54  void\n   55: glmc_scale_to(mat4 m, vec3 v, mat4 dest) {\n   56    glm_scale_to(m, v, dest);\n   57  }\n   ..\n   59  CGLM_EXPORT\n   60  void\n   61: glmc_scale(mat4 m, vec3 v) {\n   62    glm_scale(m, v);\n   63  }\n   ..\n   65  CGLM_EXPORT\n   66  void\n   67: glmc_scale_uni(mat4 m, float s) {\n   68    glm_scale_uni(m, s);\n   69  }\n   ..\n   71  CGLM_EXPORT\n   72  void\n   73: glmc_rotate_x(mat4 m, float rad, mat4 dest) {\n   74    glm_rotate_x(m, rad, dest);\n   75  }\n   ..\n   77  CGLM_EXPORT\n   78  void\n   79: glmc_rotate_y(mat4 m, float rad, mat4 dest) {\n   80    glm_rotate_y(m, rad, dest);\n   81  }\n   ..\n   83  CGLM_EXPORT\n   84  void\n   85: glmc_rotate_z(mat4 m, float rad, mat4 dest) {\n   86    glm_rotate_z(m, rad, dest);\n   87  }\n   ..\n   89  CGLM_EXPORT\n   90  void\n   91: glmc_rotate_make(mat4 m, float angle, vec3 axis) {\n   92    glm_rotate_make(m, angle, axis);\n   93  }\n   ..\n   95  CGLM_EXPORT\n   96  void\n   97: glmc_rotate(mat4 m, float angle, vec3 axis) {\n   98    glm_rotate(m, angle, axis);\n   99  }\n  ...\n  101  CGLM_EXPORT\n  102  void\n  103: glmc_rotate_at(mat4 m, vec3 pivot, float angle, vec3 axis) {\n  104    glm_rotate_at(m, pivot, angle, axis);\n  105  }\n  ...\n  107  CGLM_EXPORT\n  108  void\n  109: glmc_rotate_atm(mat4 m, vec3 pivot, float angle, vec3 axis) {\n  110    glm_rotate_atm(m, pivot, angle, axis);\n  111  }\n  ...\n  113  CGLM_EXPORT\n  114  void\n  115: glmc_spin(mat4 m, float angle, vec3 axis) {\n  116    glm_spin(m, angle, axis);\n  117  }\n  ...\n  119  CGLM_EXPORT\n  120  void\n  121: glmc_decompose_scalev(mat4 m, vec3 s) {\n  122    glm_decompose_scalev(m, s);\n  123  }\n  ...\n  125  CGLM_EXPORT\n  126  bool\n  127: glmc_uniscaled(mat4 m) {\n  128    return glm_uniscaled(m);\n  129  }\n  ...\n  131  CGLM_EXPORT\n  132  void\n  133: glmc_decompose_rs(mat4 m, mat4 r, vec3 s) {\n  134    glm_decompose_rs(m, r, s);\n  135  }\n  ...\n  137  CGLM_EXPORT\n  138  void\n  139: glmc_translated(mat4 m, vec3 v) {\n  140    glm_translated(m, v);\n  141  }\n  ...\n  143  CGLM_EXPORT\n  144  void\n  145: glmc_translated_to(mat4 m, vec3 v, mat4 dest) {\n  146    glm_translated_to(m, v, dest);\n  147  }\n  ...\n  149  CGLM_EXPORT\n  150  void\n  151: glmc_translated_x(mat4 m, float x) {\n  152    glm_translated_x(m, x);\n  153  }\n  ...\n  155  CGLM_EXPORT\n  156  void\n  157: glmc_translated_y(mat4 m, float y) {\n  158    glm_translated_y(m, y);\n  159  }\n  ...\n  161  CGLM_EXPORT\n  162  void\n  163: glmc_translated_z(mat4 m, float z) {\n  164    glm_translated_z(m, z);\n  165  }\n  ...\n  167  CGLM_EXPORT\n  168  void\n  169: glmc_rotated_x(mat4 m, float angle, mat4 dest) {\n  170    glm_rotated_x(m, angle, dest);\n  171  }\n  ...\n  173  CGLM_EXPORT\n  174  void\n  175: glmc_rotated_y(mat4 m, float angle, mat4 dest) {\n  176    glm_rotated_y(m, angle, dest);\n  177  }\n  ...\n  179  CGLM_EXPORT\n  180  void\n  181: glmc_rotated_z(mat4 m, float angle, mat4 dest) {\n  182    glm_rotated_z(m, angle, dest);\n  183  }\n  ...\n  185  CGLM_EXPORT\n  186  void\n  187: glmc_rotated(mat4 m, float angle, vec3 axis) {\n  188    glm_rotated(m, angle, axis);\n  189  }\n  ...\n  191  CGLM_EXPORT\n  192  void\n  193: glmc_rotated_at(mat4 m, vec3 pivot, float angle, vec3 axis) {\n  194    glm_rotated_at(m, pivot, angle, axis);\n  195  }\n  ...\n  197  CGLM_EXPORT\n  198  void\n  199: glmc_spinned(mat4 m, float angle, vec3 axis) {\n  200    glm_spinned(m, angle, axis);\n  201  }\n  ...\n  203  CGLM_EXPORT\n  204  void\n  205: glmc_decompose(mat4 m, vec4 t, mat4 r, vec3 s) {\n  206    glm_decompose(m, t, r, s);\n  207  }\n  ...\n  209  CGLM_EXPORT\n  210  void\n  211: glmc_mul(mat4 m1, mat4 m2, mat4 dest) {\n  212    glm_mul(m1, m2, dest);\n  213  }\n  ...\n  215  CGLM_EXPORT\n  216  void\n  217: glmc_mul_rot(mat4 m1, mat4 m2, mat4 dest) {\n  218    glm_mul_rot(m1, m2, dest);\n  219  }\n  ...\n  221  CGLM_EXPORT\n  222  void\n  223: glmc_inv_tr(mat4 mat) {\n  224    glm_inv_tr(mat);\n  225  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\box.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_aabb_transform(vec3 box[2], mat4 m, vec3 dest[2]) {\n   14    glm_aabb_transform(box, m, dest);\n   15  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\cam.c:\n   14               float bottom, float top,\n   15               float nearZ,  float farZ,\n   16:              mat4 dest) {\n   17    glm_frustum(left, right, bottom, top, nearZ, farZ, dest);\n   18  }\n   ..\n   23             float bottom, float top,\n   24             float nearZ,  float farZ,\n   25:            mat4  dest) {\n   26    glm_ortho(left, right, bottom, top, nearZ, farZ, dest);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_ortho_aabb(vec3 box[2], mat4 dest) {\n   32    glm_ortho_aabb(box, dest);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_aabb_p(vec3 box[2], float padding, mat4 dest) {\n   38    glm_ortho_aabb_p(box, padding, dest);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_ortho_aabb_pz(vec3 box[2], float padding, mat4 dest) {\n   44    glm_ortho_aabb_pz(box, padding, dest);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_ortho_default(float aspect, mat4 dest) {\n   50    glm_ortho_default(aspect, dest);\n   51  }\n   ..\n   53  CGLM_EXPORT\n   54  void\n   55: glmc_ortho_default_s(float aspect, float size, mat4 dest) {\n   56    glm_ortho_default_s(aspect, size, dest);\n   57  }\n   ..\n   59  CGLM_EXPORT\n   60  void\n   61: glmc_perspective(float fovy, float aspect, float nearZ, float farZ, mat4 dest) {\n   62    glm_perspective(fovy, aspect, nearZ, farZ, dest);\n   63  }\n   ..\n   65  CGLM_EXPORT\n   66  void\n   67: glmc_persp_move_far(mat4 proj, float deltaFar) {\n   68    glm_persp_move_far(proj, deltaFar);\n   69  }\n   ..\n   71  CGLM_EXPORT\n   72  void\n   73: glmc_perspective_default(float aspect, mat4 dest) {\n   74    glm_perspective_default(aspect, dest);\n   75  }\n   ..\n   77  CGLM_EXPORT\n   78  void\n   79: glmc_perspective_resize(float aspect, mat4 proj) {\n   80    glm_perspective_resize(aspect, proj);\n   81  }\n   ..\n   83  CGLM_EXPORT\n   84  void\n   85: glmc_lookat(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   86    glm_lookat(eye, center, up, dest);\n   87  }\n   ..\n   89  CGLM_EXPORT\n   90  void\n   91: glmc_look(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   92    glm_look(eye, dir, up, dest);\n   93  }\n   ..\n   95  CGLM_EXPORT\n   96  void\n   97: glmc_look_anyup(vec3 eye, vec3 dir, mat4 dest) {\n   98    glm_look_anyup(eye, dir, dest);\n   99  }\n  ...\n  101  CGLM_EXPORT\n  102  void\n  103: glmc_persp_decomp(mat4 proj,\n  104                    float * __restrict nearZ,\n  105                    float * __restrict farZ,\n  ...\n  113  CGLM_EXPORT\n  114  void\n  115: glmc_persp_decompv(mat4 proj, float dest[6]) {\n  116    glm_persp_decompv(proj, dest);\n  117  }\n  ...\n  119  CGLM_EXPORT\n  120  void\n  121: glmc_persp_decomp_x(mat4 proj,\n  122                      float * __restrict left,\n  123                      float * __restrict right) {\n  ...\n  127  CGLM_EXPORT\n  128  void\n  129: glmc_persp_decomp_y(mat4 proj,\n  130                      float * __restrict top,\n  131                      float * __restrict bottom) {\n  ...\n  135  CGLM_EXPORT\n  136  void\n  137: glmc_persp_decomp_z(mat4 proj,\n  138                      float * __restrict nearZ,\n  139                      float * __restrict farZ) {\n  ...\n  143  CGLM_EXPORT\n  144  void\n  145: glmc_persp_decomp_far(mat4 proj, float * __restrict farZ) {\n  146    glm_persp_decomp_far(proj, farZ);\n  147  }\n  ...\n  149  CGLM_EXPORT\n  150  void\n  151: glmc_persp_decomp_near(mat4 proj, float * __restrict nearZ) {\n  152    glm_persp_decomp_near(proj, nearZ);\n  153  }\n  ...\n  155  CGLM_EXPORT\n  156  float\n  157: glmc_persp_fovy(mat4 proj) {\n  158    return glm_persp_fovy(proj);\n  159  }\n  ...\n  161  CGLM_EXPORT\n  162  float\n  163: glmc_persp_aspect(mat4 proj) {\n  164    return glm_persp_aspect(proj);\n  165  }\n  ...\n  167  CGLM_EXPORT\n  168  void\n  169: glmc_persp_sizes(mat4 proj, float fovy, vec4 dest) {\n  170    glm_persp_sizes(proj, fovy, dest);\n  171  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\curve.c:\n   11  CGLM_EXPORT\n   12  float\n   13: glmc_smc(float s, mat4 m, vec4 c) {\n   14    return glm_smc(s, m, c);\n   15  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\euler.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_euler_angles(mat4 m, vec3 dest) {\n   14    glm_euler_angles(m, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_euler(vec3 angles, mat4 dest) {\n   20    glm_euler(angles, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_euler_xyz(vec3 angles,  mat4 dest) {\n   26    glm_euler_xyz(angles, dest);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_euler_zyx(vec3 angles,  mat4 dest) {\n   32    glm_euler_zyx(angles, dest);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_euler_zxy(vec3 angles, mat4 dest) {\n   38    glm_euler_zxy(angles, dest);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_euler_xzy(vec3 angles, mat4 dest) {\n   44    glm_euler_xzy(angles, dest);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_euler_yzx(vec3 angles, mat4 dest) {\n   50    glm_euler_yzx(angles, dest);\n   51  }\n   ..\n   53  CGLM_EXPORT\n   54  void\n   55: glmc_euler_yxz(vec3 angles, mat4 dest) {\n   56    glm_euler_yxz(angles, dest);\n   57  }\n   ..\n   59  CGLM_EXPORT\n   60  void\n   61: glmc_euler_by_order(vec3 angles, glm_euler_seq axis, mat4 dest) {\n   62    glm_euler_by_order(angles, axis, dest);\n   63  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\frustum.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_frustum_planes(mat4 m, vec4 dest[6]) {\n   14    glm_frustum_planes(m, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_frustum_corners(mat4 invMat, vec4 dest[8]) {\n   20    glm_frustum_corners(invMat, dest);\n   21  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_frustum_box(vec4 corners[8], mat4 m, vec3 box[2]) {\n   32    glm_frustum_box(corners, m, box);\n   33  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\io.c:\n   13  CGLM_EXPORT\n   14  void\n   15: glmc_mat4_print(mat4   matrix,\n   16                  FILE * __restrict ostream) {\n   17    glm_mat4_print(matrix, ostream);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\mat2x4.c:\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_mat2x4_mul(mat2x4 m1, mat4x2 m2, mat4 dest) {\n   32    glm_mat2x4_mul(m1, m2, dest);\n   33  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\mat3x4.c:\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_mat3x4_mul(mat3x4 m1, mat4x3 m2, mat4 dest) {\n   32    glm_mat3x4_mul(m1, m2, dest);\n   33  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\mat4.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_mat4_ucopy(mat4 mat, mat4 dest) {\n   14    glm_mat4_copy(mat, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_mat4_copy(mat4 mat, mat4 dest) {\n   20    glm_mat4_copy(mat, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_mat4_identity(mat4 mat) {\n   26    glm_mat4_identity(mat);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_mat4_identity_array(mat4 * __restrict mat, size_t count) {\n   32    glm_mat4_identity_array(mat, count);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_mat4_zero(mat4 mat) {\n   38    glm_mat4_zero(mat);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_mat4_pick3(mat4 mat, mat3 dest) {\n   44    glm_mat4_pick3(mat, dest);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_mat4_pick3t(mat4 mat, mat3 dest) {\n   50    glm_mat4_pick3t(mat, dest);\n   51  }\n   ..\n   53  CGLM_EXPORT\n   54  void\n   55: glmc_mat4_ins3(mat3 mat, mat4 dest) {\n   56    glm_mat4_ins3(mat, dest);\n   57  }\n   ..\n   59  CGLM_EXPORT\n   60  void\n   61: glmc_mat4_mul(mat4 m1, mat4 m2, mat4 dest) {\n   62    glm_mat4_mul(m1, m2, dest);\n   63  }\n   ..\n   65  CGLM_EXPORT\n   66  void\n   67: glmc_mat4_mulN(mat4 * __restrict matrices[], uint32_t len, mat4 dest) {\n   68    glm_mat4_mulN(matrices, len, dest);\n   69  }\n   ..\n   71  CGLM_EXPORT\n   72  void\n   73: glmc_mat4_mulv(mat4 m, vec4 v, vec4 dest) {\n   74    glm_mat4_mulv(m, v, dest);\n   75  }\n   ..\n   77  CGLM_EXPORT\n   78  void\n   79: glmc_mat4_mulv3(mat4 m, vec3 v, float last, vec3 dest) {\n   80    glm_mat4_mulv3(m, v, last, dest);\n   81  }\n   ..\n   83  CGLM_EXPORT\n   84  float\n   85: glmc_mat4_trace(mat4 m) {\n   86    return glm_mat4_trace(m);\n   87  }\n   ..\n   89  CGLM_EXPORT\n   90  float\n   91: glmc_mat4_trace3(mat4 m) {\n   92    return glm_mat4_trace3(m);\n   93  }\n   ..\n   95  CGLM_EXPORT\n   96  void\n   97: glmc_mat4_quat(mat4 m, versor dest) {\n   98    glm_mat4_quat(m, dest);\n   99  }\n  ...\n  101  CGLM_EXPORT\n  102  void\n  103: glmc_mat4_transpose_to(mat4 m, mat4 dest) {\n  104    glm_mat4_transpose_to(m, dest);\n  105  }\n  ...\n  107  CGLM_EXPORT\n  108  void\n  109: glmc_mat4_transpose(mat4 m) {\n  110    glm_mat4_transpose(m);\n  111  }\n  ...\n  113  CGLM_EXPORT\n  114  void\n  115: glmc_mat4_scale_p(mat4 m, float s) {\n  116    glm_mat4_scale_p(m, s);\n  117  }\n  ...\n  119  CGLM_EXPORT\n  120  void\n  121: glmc_mat4_scale(mat4 m, float s) {\n  122    glm_mat4_scale(m, s);\n  123  }\n  ...\n  125  CGLM_EXPORT\n  126  float\n  127: glmc_mat4_det(mat4 mat) {\n  128    return glm_mat4_det(mat);\n  129  }\n  ...\n  131  CGLM_EXPORT\n  132  void\n  133: glmc_mat4_inv(mat4 mat, mat4 dest) {\n  134    glm_mat4_inv(mat, dest);\n  135  }\n  ...\n  137  CGLM_EXPORT\n  138  void\n  139: glmc_mat4_inv_precise(mat4 mat, mat4 dest) {\n  140    glm_mat4_inv_precise(mat, dest);\n  141  }\n  ...\n  143  CGLM_EXPORT\n  144  void\n  145: glmc_mat4_inv_fast(mat4 mat, mat4 dest) {\n  146    glm_mat4_inv_fast(mat, dest);\n  147  }\n  ...\n  149  CGLM_EXPORT\n  150  void\n  151: glmc_mat4_swap_col(mat4 mat, int col1, int col2) {\n  152    glm_mat4_swap_col(mat, col1, col2);\n  153  }\n  ...\n  155  CGLM_EXPORT\n  156  void\n  157: glmc_mat4_swap_row(mat4 mat, int row1, int row2) {\n  158    glm_mat4_swap_row(mat, row1, row2);\n  159  }\n  ...\n  161  CGLM_EXPORT\n  162  float\n  163: glmc_mat4_rmc(vec4 r, mat4 m, vec4 c) {\n  164    return glm_mat4_rmc(r, m, c);\n  165  }\n  ...\n  167  CGLM_EXPORT\n  168  void\n  169: glmc_mat4_make(const float * __restrict src, mat4 dest) {\n  170    glm_mat4_make(src, dest);\n  171  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\project.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_unprojecti(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {\n   14    glm_unprojecti(pos, invMat, vp, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_unproject(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n   20    glm_unproject(pos, m, vp, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_project(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n   26    glm_project(pos, m, vp, dest);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  float\n   31: glmc_project_z(vec3 pos, mat4 m) {\n   32    return glm_project_z(pos, m);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_pickmatrix(vec2 center, vec2 size, vec4 vp, mat4 dest) {\n   38    glm_pickmatrix(center, size, vp, dest);\n   39  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\quat.c:\n  143  CGLM_EXPORT\n  144  void\n  145: glmc_quat_mat4(versor q, mat4 dest) {\n  146    glm_quat_mat4(q, dest);\n  147  }\n  ...\n  149  CGLM_EXPORT\n  150  void\n  151: glmc_quat_mat4t(versor q, mat4 dest) {\n  152    glm_quat_mat4t(q, dest);\n  153  }\n  ...\n  191  CGLM_EXPORT\n  192  void\n  193: glmc_quat_look(vec3 eye, versor ori, mat4 dest) {\n  194    glm_quat_look(eye, ori, dest);\n  195  }\n  ...\n  215  CGLM_EXPORT\n  216  void\n  217: glmc_quat_rotate(mat4 m, versor q, mat4 dest) {\n  218    glm_quat_rotate(m, q, dest);\n  219  }\n  ...\n  221  CGLM_EXPORT\n  222  void\n  223: glmc_quat_rotate_at(mat4 model, versor q, vec3 pivot) {\n  224    glm_quat_rotate_at(model, q, pivot);\n  225  }\n  ...\n  227  CGLM_EXPORT\n  228  void\n  229: glmc_quat_rotate_atm(mat4 m, versor q, vec3 pivot) {\n  230    glm_quat_rotate_atm(m, q, pivot);\n  231  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\sphere.c:\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_sphere_transform(vec4 s, mat4 m, vec4 dest) {\n   20    glm_sphere_transform(s, m, dest);\n   21  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\vec3.c:\n  239  CGLM_EXPORT\n  240  void\n  241: glmc_vec3_rotate_m4(mat4 m, vec3 v, vec3 dest) {\n  242    glm_vec3_rotate_m4(m, v, dest);\n  243  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\ortho_lh_no.c:\n   14                   float bottom,  float top,\n   15                   float nearZ, float farZ,\n   16:                  mat4  dest) {\n   17    glm_ortho_lh_no(left,   right,\n   18                    bottom, top,\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_lh_no(vec3 box[2], mat4 dest) {\n   26    glm_ortho_aabb_lh_no(box, dest);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_ortho_aabb_p_lh_no(vec3 box[2], float padding, mat4 dest) {\n   32    glm_ortho_aabb_p_lh_no(box, padding, dest);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_aabb_pz_lh_no(vec3 box[2], float padding, mat4 dest) {\n   38    glm_ortho_aabb_pz_lh_no(box, padding, dest);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_ortho_default_lh_no(float aspect, mat4 dest) {\n   44    glm_ortho_default_lh_no(aspect, dest);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_ortho_default_s_lh_no(float aspect, float size, mat4 dest) {\n   50    glm_ortho_default_s_lh_no(aspect, size, dest);\n   51  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\ortho_lh_zo.c:\n   14                   float bottom,  float top,\n   15                   float nearZ, float farZ,\n   16:                  mat4  dest) {\n   17    glm_ortho_lh_zo(left,   right,\n   18                    bottom, top,\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_lh_zo(vec3 box[2], mat4 dest) {\n   26    glm_ortho_aabb_lh_zo(box, dest);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_ortho_aabb_p_lh_zo(vec3 box[2], float padding, mat4 dest) {\n   32    glm_ortho_aabb_p_lh_zo(box, padding, dest);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_aabb_pz_lh_zo(vec3 box[2], float padding, mat4 dest) {\n   38    glm_ortho_aabb_pz_lh_zo(box, padding, dest);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_ortho_default_lh_zo(float aspect, mat4 dest) {\n   44    glm_ortho_default_lh_zo(aspect, dest);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_ortho_default_s_lh_zo(float aspect, float size, mat4 dest) {\n   50    glm_ortho_default_s_lh_zo(aspect, size, dest);\n   51  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\ortho_rh_no.c:\n   14                   float bottom,  float top,\n   15                   float nearZ, float farZ,\n   16:                  mat4  dest) {\n   17    glm_ortho_rh_no(left,   right,\n   18                    bottom, top,\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_rh_no(vec3 box[2], mat4 dest) {\n   26    glm_ortho_aabb_rh_no(box, dest);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_ortho_aabb_p_rh_no(vec3 box[2], float padding, mat4 dest) {\n   32    glm_ortho_aabb_p_rh_no(box, padding, dest);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_aabb_pz_rh_no(vec3 box[2], float padding, mat4 dest) {\n   38    glm_ortho_aabb_pz_rh_no(box, padding, dest);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_ortho_default_rh_no(float aspect, mat4 dest) {\n   44    glm_ortho_default_rh_no(aspect, dest);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_ortho_default_s_rh_no(float aspect, float size, mat4 dest) {\n   50    glm_ortho_default_s_rh_no(aspect, size, dest);\n   51  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\ortho_rh_zo.c:\n   14                   float bottom,  float top,\n   15                   float nearZ, float farZ,\n   16:                  mat4  dest) {\n   17    glm_ortho_rh_zo(left,   right,\n   18                    bottom, top,\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_rh_zo(vec3 box[2], mat4 dest) {\n   26    glm_ortho_aabb_rh_zo(box, dest);\n   27  }\n   ..\n   29  CGLM_EXPORT\n   30  void\n   31: glmc_ortho_aabb_p_rh_zo(vec3 box[2], float padding, mat4 dest) {\n   32    glm_ortho_aabb_p_rh_zo(box, padding, dest);\n   33  }\n   ..\n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_aabb_pz_rh_zo(vec3 box[2], float padding, mat4 dest) {\n   38    glm_ortho_aabb_pz_rh_zo(box, padding, dest);\n   39  }\n   ..\n   41  CGLM_EXPORT\n   42  void\n   43: glmc_ortho_default_rh_zo(float aspect, mat4 dest) {\n   44    glm_ortho_default_rh_zo(aspect, dest);\n   45  }\n   ..\n   47  CGLM_EXPORT\n   48  void\n   49: glmc_ortho_default_s_rh_zo(float aspect, float size, mat4 dest) {\n   50    glm_ortho_default_s_rh_zo(aspect, size, dest);\n   51  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\persp_lh_no.c:\n   14                     float bottom,  float top,\n   15                     float nearZ, float farZ,\n   16:                    mat4  dest) {\n   17    glm_frustum_lh_no(left, right,\n   18                      bottom, top,\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest) {\n   30    glm_perspective_lh_no(fovy,\n   31                          aspect,\n   ..\n   37  CGLM_EXPORT\n   38  void\n   39: glmc_persp_move_far_lh_no(mat4 proj, float deltaFar) {\n   40    glm_persp_move_far_lh_no(proj, deltaFar);\n   41  }\n   ..\n   43  CGLM_EXPORT\n   44  void\n   45: glmc_persp_decomp_lh_no(mat4 proj,\n   46                          float * __restrict nearZ, float * __restrict farZ,\n   47                          float * __restrict top,   float * __restrict bottom,\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decompv_lh_no(mat4 proj, float dest[6]) {\n   55    glm_persp_decompv_lh_no(proj, dest);\n   56  }\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_x_lh_no(mat4 proj,\n   61                            float * __restrict left,\n   62                            float * __restrict right) {\n   ..\n   66  CGLM_EXPORT\n   67  void\n   68: glmc_persp_decomp_y_lh_no(mat4 proj,\n   69                            float * __restrict top,\n   70                            float * __restrict bottom) {\n   ..\n   74  CGLM_EXPORT\n   75  void\n   76: glmc_persp_decomp_z_lh_no(mat4 proj,\n   77                            float * __restrict nearZ,\n   78                            float * __restrict farZ) {\n   ..\n   82  CGLM_EXPORT\n   83  void\n   84: glmc_persp_decomp_far_lh_no(mat4 proj, float * __restrict farZ) {\n   85    glm_persp_decomp_far_lh_no(proj, farZ);\n   86  }\n   ..\n   88  CGLM_EXPORT\n   89  void\n   90: glmc_persp_decomp_near_lh_no(mat4 proj, float * __restrict nearZ) {\n   91    glm_persp_decomp_near_lh_no(proj, nearZ);\n   92  }\n   ..\n   94  CGLM_EXPORT\n   95  void\n   96: glmc_persp_sizes_lh_no(mat4 proj, float fovy, vec4 dest) {\n   97    glm_persp_sizes_lh_no(proj, fovy, dest);\n   98  }\n   ..\n  100  CGLM_EXPORT\n  101  float\n  102: glmc_persp_fovy_lh_no(mat4 proj) {\n  103    return glm_persp_fovy_lh_no(proj);\n  104  }\n  ...\n  106  CGLM_EXPORT\n  107  float\n  108: glmc_persp_aspect_lh_no(mat4 proj) {\n  109    return glm_persp_aspect_lh_no(proj);\n  110  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\persp_lh_zo.c:\n   14                     float bottom,  float top,\n   15                     float nearZ, float farZ,\n   16:                    mat4  dest) {\n   17    glm_frustum_lh_zo(left, right,\n   18                      bottom, top,\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest) {\n   30    glm_perspective_lh_zo(fovy,\n   31                          aspect,\n   ..\n   37  CGLM_EXPORT\n   38  void\n   39: glmc_persp_move_far_lh_zo(mat4 proj, float deltaFar) {\n   40    glm_persp_move_far_lh_zo(proj, deltaFar);\n   41  }\n   ..\n   43  CGLM_EXPORT\n   44  void\n   45: glmc_persp_decomp_lh_zo(mat4 proj,\n   46                          float * __restrict nearZ, float * __restrict farZ,\n   47                          float * __restrict top,   float * __restrict bottom,\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decompv_lh_zo(mat4 proj, float dest[6]) {\n   55    glm_persp_decompv_lh_zo(proj, dest);\n   56  }\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_x_lh_zo(mat4 proj,\n   61                            float * __restrict left,\n   62                            float * __restrict right) {\n   ..\n   66  CGLM_EXPORT\n   67  void\n   68: glmc_persp_decomp_y_lh_zo(mat4 proj,\n   69                            float * __restrict top,\n   70                            float * __restrict bottom) {\n   ..\n   74  CGLM_EXPORT\n   75  void\n   76: glmc_persp_decomp_z_lh_zo(mat4 proj,\n   77                            float * __restrict nearZ,\n   78                            float * __restrict farZ) {\n   ..\n   82  CGLM_EXPORT\n   83  void\n   84: glmc_persp_decomp_far_lh_zo(mat4 proj, float * __restrict farZ) {\n   85    glm_persp_decomp_far_lh_zo(proj, farZ);\n   86  }\n   ..\n   88  CGLM_EXPORT\n   89  void\n   90: glmc_persp_decomp_near_lh_zo(mat4 proj, float * __restrict nearZ) {\n   91    glm_persp_decomp_near_lh_zo(proj, nearZ);\n   92  }\n   ..\n   94  CGLM_EXPORT\n   95  void\n   96: glmc_persp_sizes_lh_zo(mat4 proj, float fovy, vec4 dest) {\n   97    glm_persp_sizes_lh_zo(proj, fovy, dest);\n   98  }\n   ..\n  100  CGLM_EXPORT\n  101  float\n  102: glmc_persp_fovy_lh_zo(mat4 proj) {\n  103    return glm_persp_fovy_lh_zo(proj);\n  104  }\n  ...\n  106  CGLM_EXPORT\n  107  float\n  108: glmc_persp_aspect_lh_zo(mat4 proj) {\n  109    return glm_persp_aspect_lh_zo(proj);\n  110  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\persp_rh_no.c:\n   14                     float bottom,  float top,\n   15                     float nearZ, float farZ,\n   16:                    mat4  dest) {\n   17    glm_frustum_rh_no(left, right,\n   18                      bottom, top,\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest) {\n   30    glm_perspective_rh_no(fovy,\n   31                          aspect,\n   ..\n   37  CGLM_EXPORT\n   38  void\n   39: glmc_persp_move_far_rh_no(mat4 proj, float deltaFar) {\n   40    glm_persp_move_far_rh_no(proj, deltaFar);\n   41  }\n   ..\n   43  CGLM_EXPORT\n   44  void\n   45: glmc_persp_decomp_rh_no(mat4 proj,\n   46                          float * __restrict nearZ, float * __restrict farZ,\n   47                          float * __restrict top,   float * __restrict bottom,\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decompv_rh_no(mat4 proj, float dest[6]) {\n   55    glm_persp_decompv_rh_no(proj, dest);\n   56  }\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_x_rh_no(mat4 proj,\n   61                            float * __restrict left,\n   62                            float * __restrict right) {\n   ..\n   66  CGLM_EXPORT\n   67  void\n   68: glmc_persp_decomp_y_rh_no(mat4 proj,\n   69                            float * __restrict top,\n   70                            float * __restrict bottom) {\n   ..\n   74  CGLM_EXPORT\n   75  void\n   76: glmc_persp_decomp_z_rh_no(mat4 proj,\n   77                            float * __restrict nearZ,\n   78                            float * __restrict farZ) {\n   ..\n   82  CGLM_EXPORT\n   83  void\n   84: glmc_persp_decomp_far_rh_no(mat4 proj, float * __restrict farZ) {\n   85    glm_persp_decomp_far_rh_no(proj, farZ);\n   86  }\n   ..\n   88  CGLM_EXPORT\n   89  void\n   90: glmc_persp_decomp_near_rh_no(mat4 proj, float * __restrict nearZ) {\n   91    glm_persp_decomp_near_rh_no(proj, nearZ);\n   92  }\n   ..\n   94  CGLM_EXPORT\n   95  void\n   96: glmc_persp_sizes_rh_no(mat4 proj, float fovy, vec4 dest) {\n   97    glm_persp_sizes_rh_no(proj, fovy, dest);\n   98  }\n   ..\n  100  CGLM_EXPORT\n  101  float\n  102: glmc_persp_fovy_rh_no(mat4 proj) {\n  103    return glm_persp_fovy_rh_no(proj);\n  104  }\n  ...\n  106  CGLM_EXPORT\n  107  float\n  108: glmc_persp_aspect_rh_no(mat4 proj) {\n  109    return glm_persp_aspect_rh_no(proj);\n  110  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\persp_rh_zo.c:\n   14                     float bottom,  float top,\n   15                     float nearZ, float farZ,\n   16:                    mat4  dest) {\n   17    glm_frustum_rh_zo(left, right,\n   18                      bottom, top,\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest) {\n   30    glm_perspective_rh_zo(fovy,\n   31                          aspect,\n   ..\n   37  CGLM_EXPORT\n   38  void\n   39: glmc_persp_move_far_rh_zo(mat4 proj, float deltaFar) {\n   40    glm_persp_move_far_rh_zo(proj, deltaFar);\n   41  }\n   ..\n   43  CGLM_EXPORT\n   44  void\n   45: glmc_persp_decomp_rh_zo(mat4 proj,\n   46                          float * __restrict nearZ, float * __restrict farZ,\n   47                          float * __restrict top,   float * __restrict bottom,\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decompv_rh_zo(mat4 proj, float dest[6]) {\n   55    glm_persp_decompv_rh_zo(proj, dest);\n   56  }\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_x_rh_zo(mat4 proj,\n   61                            float * __restrict left,\n   62                            float * __restrict right) {\n   ..\n   66  CGLM_EXPORT\n   67  void\n   68: glmc_persp_decomp_y_rh_zo(mat4 proj,\n   69                            float * __restrict top,\n   70                            float * __restrict bottom) {\n   ..\n   74  CGLM_EXPORT\n   75  void\n   76: glmc_persp_decomp_z_rh_zo(mat4 proj,\n   77                            float * __restrict nearZ,\n   78                            float * __restrict farZ) {\n   ..\n   82  CGLM_EXPORT\n   83  void\n   84: glmc_persp_decomp_far_rh_zo(mat4 proj, float * __restrict farZ) {\n   85    glm_persp_decomp_far_rh_zo(proj, farZ);\n   86  }\n   ..\n   88  CGLM_EXPORT\n   89  void\n   90: glmc_persp_decomp_near_rh_zo(mat4 proj, float * __restrict nearZ) {\n   91    glm_persp_decomp_near_rh_zo(proj, nearZ);\n   92  }\n   ..\n   94  CGLM_EXPORT\n   95  void\n   96: glmc_persp_sizes_rh_zo(mat4 proj, float fovy, vec4 dest) {\n   97    glm_persp_sizes_rh_zo(proj, fovy, dest);\n   98  }\n   ..\n  100  CGLM_EXPORT\n  101  float\n  102: glmc_persp_fovy_rh_zo(mat4 proj) {\n  103    return glm_persp_fovy_rh_zo(proj);\n  104  }\n  ...\n  106  CGLM_EXPORT\n  107  float\n  108: glmc_persp_aspect_rh_zo(mat4 proj) {\n  109    return glm_persp_aspect_rh_zo(proj);\n  110  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\project_no.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_unprojecti_no(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {\n   14    glm_unprojecti_no(pos, invMat, vp, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_project_no(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n   20    glm_project_no(pos, m, vp, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  float\n   25: glmc_project_z_no(vec3 pos, mat4 m) {\n   26    return glm_project_z_no(pos, m);\n   27  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\project_zo.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_unprojecti_zo(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {\n   14    glm_unprojecti_zo(pos, invMat, vp, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_project_zo(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n   20    glm_project_zo(pos, m, vp, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  float\n   25: glmc_project_z_zo(vec3 pos, mat4 m) {\n   26    return glm_project_z_zo(pos, m);\n   27  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\view_lh_no.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_lookat_lh_no(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   14    glm_lookat_lh_no(eye, center, up, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_look_lh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   20    glm_look_lh_no(eye, dir, up, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_look_anyup_lh_no(vec3 eye, vec3 dir, mat4 dest) {\n   26    glm_look_anyup_lh_no(eye, dir, dest);\n   27  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\view_lh_zo.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_lookat_lh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   14    glm_lookat_lh_zo(eye, center, up, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_look_lh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   20    glm_look_lh_zo(eye, dir, up, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_look_anyup_lh_zo(vec3 eye, vec3 dir, mat4 dest) {\n   26    glm_look_anyup_lh_zo(eye, dir, dest);\n   27  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\view_rh_no.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_lookat_rh_no(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   14    glm_lookat_rh_no(eye, center, up, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_look_rh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   20    glm_look_rh_no(eye, dir, up, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_look_anyup_rh_no(vec3 eye, vec3 dir, mat4 dest) {\n   26    glm_look_anyup_rh_no(eye, dir, dest);\n   27  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\src\\clipspace\\view_rh_zo.c:\n   11  CGLM_EXPORT\n   12  void\n   13: glmc_lookat_rh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   14    glm_lookat_rh_zo(eye, center, up, dest);\n   15  }\n   ..\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_look_rh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   20    glm_look_rh_zo(eye, dir, up, dest);\n   21  }\n   ..\n   23  CGLM_EXPORT\n   24  void\n   25: glmc_look_anyup_rh_zo(vec3 eye, vec3 dir, mat4 dest) {\n   26    glm_look_anyup_rh_zo(eye, dir, dest);\n   27  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\affine-common.rst:\n   26  ~~~~~~~~~~~~~~~~~~~~~~~\n   27  \n   28: .. c:function:: void  glm_translate_make(mat4 m, vec3 v)\n   29  \n   30      creates NEW translate transform matrix by *v* vector.\n   ..\n   34        | *[in]*      **v**  translate vector [x, y, z]\n   35  \n   36: .. c:function:: void  glm_scale_to(mat4 m, vec3 v, mat4 dest)\n   37  \n   38      scale existing transform matrix by *v* vector and store result in dest\n   ..\n   43        | *[out]* **dest** scaled matrix\n   44  \n   45: .. c:function:: void  glm_scale_make(mat4 m, vec3 v)\n   46  \n   47      creates NEW scale matrix by v vector\n   ..\n   51        | *[in]*  **v** scale vector [x, y, z]\n   52  \n   53: .. c:function:: void  glm_scale(mat4 m, vec3 v)\n   54  \n   55      scales existing transform matrix by v vector\n   ..\n   60        | *[in]*      **v** scale vector [x, y, z]\n   61  \n   62: .. c:function:: void  glm_scale_uni(mat4 m, float s)\n   63  \n   64      applies uniform scale to existing transform matrix v = [s, s, s]\n   ..\n   69        | *[in]*      **v** scale factor\n   70  \n   71: .. c:function:: void  glm_rotate_make(mat4 m, float angle, vec3 axis)\n   72  \n   73      creates NEW rotation matrix by angle and axis,\n   ..\n   79        | *[in]*  **axis** axis\n   80  \n   81: .. c:function:: void  glm_rotate_atm(mat4 m, vec3 pivot, float angle, vec3 axis)\n   82  \n   83      | creates NEW rotation matrix by angle and axis at given point\n   ..\n   92        | *[in]*      **axis**  axis\n   93  \n   94: .. c:function:: void  glm_decompose_scalev(mat4 m, vec3 s)\n   95  \n   96      decompose scale vector\n   ..\n  100        | *[out]* **s**  scale vector (Sx, Sy, Sz)\n  101  \n  102: .. c:function:: bool  glm_uniscaled(mat4 m)\n  103  \n  104      returns true if matrix is uniform scaled.\n  ...\n  108        | *[in]*  **m**   matrix\n  109  \n  110: .. c:function:: void  glm_decompose_rs(mat4 m, mat4 r, vec3 s)\n  111  \n  112:     decompose rotation matrix (mat4) and scale vector [Sx, Sy, Sz]\n  113      DON'T pass projected matrix here\n  114  \n  ...\n  118        | *[out]* **s** scale matrix\n  119  \n  120: .. c:function:: void  glm_decompose(mat4 m, vec4 t, mat4 r, vec3 s)\n  121  \n  122      decompose affine transform, TODO: extract shear factors.\n  ...\n  126        | *[in]*  **m** affine transform\n  127        | *[out]* **t** translation vector\n  128:       | *[out]* **r** rotation matrix (mat4)\n  129        | *[out]* **s** scaling vector [X, Y, Z]\n  130  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\affine-mat.rst:\n   40  ~~~~~~~~~~~~~~~~~~~~~~~\n   41  \n   42: .. c:function:: void  glm_mul(mat4 m1, mat4 m2, mat4 dest)\n   43  \n   44      | this is similar to glm_mat4_mul but specialized to affine transform\n   ..\n   61        | *[out]* **dest**  result matrix\n   62  \n   63: .. c:function:: void  glm_mul_rot(mat4 m1, mat4 m2, mat4 dest)\n   64  \n   65      | this is similar to glm_mat4_mul but specialized to rotation matrix\n   ..\n   82        | *[out]* **dest**  result matrix\n   83  \n   84: .. c:function:: void  glm_inv_tr(mat4 mat)\n   85  \n   86      | inverse orthonormal rotation + translation matrix (ridig-body)\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\affine-post.rst:\n   27  ~~~~~~~~~~~~~~~~~~~~~~~\n   28  \n   29: .. c:function:: void  glm_translated_to(mat4 m, vec3 v, mat4 dest)\n   30  \n   31      translate existing transform matrix by *v* vector and store result in dest\n   ..\n   36        | *[out]* **dest** translated matrix\n   37  \n   38: .. c:function:: void  glm_translated(mat4 m, vec3 v)\n   39  \n   40      translate existing transform matrix by *v* vector\n   ..\n   45        | *[in]*      **v**  translate vector [x, y, z]\n   46  \n   47: .. c:function:: void  glm_translated_x(mat4 m, float x)\n   48  \n   49      translate existing transform matrix by x factor\n   ..\n   53        | *[in]*      **v**  x factor\n   54  \n   55: .. c:function:: void  glm_translated_y(mat4 m, float y)\n   56  \n   57      translate existing transform matrix by *y* factor\n   ..\n   61        | *[in]*      **v**  y factor\n   62  \n   63: .. c:function:: void  glm_translated_z(mat4 m, float z)\n   64  \n   65      translate existing transform matrix by *z* factor\n   ..\n   69        | *[in]*      **v**  z factor\n   70  \n   71: .. c:function:: void  glm_rotated_x(mat4 m, float angle, mat4 dest)\n   72  \n   73      rotate existing transform matrix around X axis by angle\n   ..\n   79        | *[out]* **dest**  rotated matrix\n   80  \n   81: .. c:function:: void  glm_rotated_y(mat4 m, float angle, mat4 dest)\n   82  \n   83      rotate existing transform matrix around Y axis by angle\n   ..\n   89        | *[out]* **dest**  rotated matrix\n   90  \n   91: .. c:function:: void  glm_rotated_z(mat4 m, float angle, mat4 dest)\n   92  \n   93      rotate existing transform matrix around Z axis by angle\n   ..\n   99        | *[out]* **dest**  rotated matrix\n  100  \n  101: .. c:function:: void  glm_rotated(mat4 m, float angle, vec3 axis)\n  102  \n  103      rotate existing transform matrix around Z axis by angle and axis\n  ...\n  108        | *[in]*      **axis**  axis\n  109  \n  110: .. c:function:: void  glm_rotated_at(mat4 m, vec3 pivot, float angle, vec3 axis)\n  111  \n  112      rotate existing transform around given axis by angle at given pivot point (rotation center)\n  ...\n  118        | *[in]*      **axis**  axis\n  119  \n  120: .. c:function:: void  glm_spinned(mat4 m, float angle, vec3 axis)\n  121  \n  122      | rotate existing transform matrix around given axis by angle around self (doesn't affected by position)\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\affine-pre.rst:\n   37  ~~~~~~~~~~~~~~~~~~~~~~~\n   38  \n   39: .. c:function:: void  glm_translate_to(mat4 m, vec3 v, mat4 dest)\n   40  \n   41      translate existing transform matrix by *v* vector and store result in dest\n   ..\n   46        | *[out]* **dest** translated matrix\n   47  \n   48: .. c:function:: void  glm_translate(mat4 m, vec3 v)\n   49  \n   50      translate existing transform matrix by *v* vector\n   ..\n   55        | *[in]*      **v**  translate vector [x, y, z]\n   56  \n   57: .. c:function:: void  glm_translate_x(mat4 m, float x)\n   58  \n   59      translate existing transform matrix by x factor\n   ..\n   63        | *[in]*      **v**  x factor\n   64  \n   65: .. c:function:: void  glm_translate_y(mat4 m, float y)\n   66  \n   67      translate existing transform matrix by *y* factor\n   ..\n   71        | *[in]*      **v**  y factor\n   72  \n   73: .. c:function:: void  glm_translate_z(mat4 m, float z)\n   74  \n   75      translate existing transform matrix by *z* factor\n   ..\n   79        | *[in]*      **v**  z factor\n   80  \n   81: .. c:function:: void  glm_rotate_x(mat4 m, float angle, mat4 dest)\n   82  \n   83      rotate existing transform matrix around X axis by angle\n   ..\n   89        | *[out]* **dest**  rotated matrix\n   90  \n   91: .. c:function:: void  glm_rotate_y(mat4 m, float angle, mat4 dest)\n   92  \n   93      rotate existing transform matrix around Y axis by angle\n   ..\n   99        | *[out]* **dest**  rotated matrix\n  100  \n  101: .. c:function:: void  glm_rotate_z(mat4 m, float angle, mat4 dest)\n  102  \n  103      rotate existing transform matrix around Z axis by angle\n  ...\n  109        | *[out]* **dest**  rotated matrix\n  110  \n  111: .. c:function:: void  glm_rotate(mat4 m, float angle, vec3 axis)\n  112  \n  113      rotate existing transform matrix around given axis by angle at ORIGIN (0,0,0)\n  ...\n  135        | *[in]*      **axis**  axis\n  136  \n  137: .. c:function:: void  glm_rotate_at(mat4 m, vec3 pivot, float angle, vec3 axis)\n  138  \n  139      rotate existing transform around given axis by angle at given pivot point (rotation center)\n  ...\n  145        | *[in]*      **axis**  axis\n  146  \n  147: .. c:function:: void  glm_spin(mat4 m, float angle, vec3 axis)\n  148  \n  149      | rotate existing transform matrix around given axis by angle around self (doesn't affected by position)\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\affine.rst:\n  129    :linenos:\n  130  \n  131:   mat4 transform1, transform2, transform3, finalTransform;\n  132  \n  133    glm_translate_make(transform1, translate1);\n  ...\n  136  \n  137    /* first apply transform1, then transform2, thentransform3 */\n  138:   glm_mat4_mulN((mat4 *[]){&transform3, &transform2, &transform1}, 3, finalTransform);\n  139  \n  140    /* if you don't want to use mulN, same as above */\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\api_inline_array.rst:\n   53     mat3x2\n   54     mat3x4\n   55:    mat4\n   56     mat4x2\n   57     mat4x3\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\box.rst:\n   38  ~~~~~~~~~~~~~~~~~~~~~~~\n   39  \n   40: .. c:function:: void  glm_aabb_transform(vec3 box[2], mat4 m, vec3 dest[2])\n   41  \n   42      | apply transform to Axis-Aligned Bounding Box\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\cam.rst:\n   57  ~~~~~~~~~~~~~~~~~~~~~~~\n   58  \n   59: .. c:function:: void  glm_frustum(float left, float right, float bottom, float top, float nearVal, float farVal, mat4  dest)\n   60  \n   61      | set up perspective peprojection matrix\n   ..\n   70        | *[out]* **dest**      result matrix\n   71  \n   72: .. c:function:: void  glm_ortho(float left, float right, float bottom, float top, float nearVal, float farVal, mat4  dest)\n   73  \n   74      | set up orthographic projection matrix\n   ..\n   83        | *[out]* **dest**      result matrix\n   84  \n   85: .. c:function:: void  glm_ortho_aabb(vec3 box[2], mat4 dest)\n   86  \n   87      | set up orthographic projection matrix using bounding box\n   ..\n   92        | *[in]*  **dest**  result matrix\n   93  \n   94: .. c:function:: void  glm_ortho_aabb_p(vec3 box[2], float padding, mat4 dest)\n   95  \n   96      | set up orthographic projection matrix using bounding box\n   ..\n  104        | *[out]* **dest**        result matrix\n  105  \n  106: .. c:function:: void  glm_ortho_aabb_pz(vec3 box[2], float padding, mat4 dest)\n  107  \n  108      | set up orthographic projection matrix using bounding box\n  ...\n  119        square of norm / magnitude\n  120  \n  121: .. c:function:: void  glm_ortho_default(float aspect, mat4  dest)\n  122  \n  123      | set up unit orthographic projection matrix\n  ...\n  127        | *[out]* **dest**   result matrix\n  128  \n  129: .. c:function:: void  glm_ortho_default_s(float aspect, float size, mat4  dest)\n  130  \n  131      | set up orthographic projection matrix with given CUBE size\n  ...\n  136        | *[out]* **dest**   result matrix\n  137  \n  138: .. c:function:: void  glm_perspective(float fovy, float aspect, float nearVal, float farVal, mat4  dest)\n  139  \n  140      | set up perspective projection matrix\n  ...\n  147        | *[out]* **dest**    result matrix\n  148  \n  149: .. c:function:: void  glm_persp_move_far(mat4 proj, float deltaFar)\n  150  \n  151      | extend perspective projection matrix's far distance\n  ...\n  157        | *[in]*       **deltaFar**  distance from existing far (negative to shink)\n  158  \n  159: .. c:function:: void glm_perspective_default(float aspect, mat4 dest)\n  160  \n  161       | set up perspective projection matrix with default near/far\n  ...\n  166        | *[out]* **dest**   result matrix\n  167  \n  168: .. c:function:: void  glm_perspective_resize(float aspect, mat4 proj)\n  169  \n  170      | resize perspective matrix by aspect ratio ( width / height )\n  ...\n  175        | *[in, out]* **proj**   perspective projection matrix\n  176  \n  177: .. c:function:: void  glm_lookat(vec3 eye, vec3 center, vec3 up, mat4 dest)\n  178  \n  179      | set up view matrix\n  ...\n  187        | *[out]* **dest**    result matrix\n  188  \n  189: .. c:function:: void  glm_look(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n  190  \n  191      | set up view matrix\n  ...\n  203        | *[out]* **dest**    result matrix\n  204  \n  205: .. c:function:: void  glm_look_anyup(vec3 eye, vec3 dir, mat4 dest)\n  206  \n  207      | set up view matrix\n  ...\n  216        | *[out]* **dest**    result matrix\n  217  \n  218: .. c:function:: void  glm_persp_decomp(mat4 proj, float *nearVal, float *farVal, float *top, float *bottom, float *left, float *right)\n  219  \n  220      | decomposes frustum values of perspective projection.\n  ...\n  229        | *[out]* **right**     right\n  230  \n  231: .. c:function:: void  glm_persp_decompv(mat4 proj, float dest[6])\n  232  \n  233      | decomposes frustum values of perspective projection.\n  ...\n  238        | *[out]*  **dest**  array\n  239  \n  240: .. c:function:: void  glm_persp_decomp_x(mat4 proj, float *left, float *right)\n  241  \n  242      | decomposes left and right values of perspective projection.\n  ...\n  248        | *[out]*  **right**  right\n  249  \n  250: .. c:function:: void  glm_persp_decomp_y(mat4 proj, float *top, float *bottom)\n  251  \n  252      | decomposes top and bottom values of perspective projection.\n  ...\n  258        | *[out]*  **bottom**  bottom\n  259  \n  260: .. c:function:: void  glm_persp_decomp_z(mat4 proj, float *nearVal, float *farVal)\n  261  \n  262      | decomposes near and far values of perspective projection.\n  ...\n  268        | *[out]*  **farVal**   far\n  269  \n  270: .. c:function:: void  glm_persp_decomp_far(mat4 proj, float * __restrict farVal)\n  271  \n  272      | decomposes far value of perspective projection.\n  ...\n  276        | *[out]* **farVal**  far\n  277  \n  278: .. c:function:: void  glm_persp_decomp_near(mat4 proj, float * __restrict nearVal)\n  279  \n  280      | decomposes near value of perspective projection.\n  ...\n  284        | *[out]* **nearVal** near\n  285  \n  286: .. c:function:: float  glm_persp_fovy(mat4 proj)\n  287  \n  288      | returns field of view angle along the Y-axis (in radians)\n  ...\n  297        | fovy in radians\n  298  \n  299: .. c:function:: float  glm_persp_aspect(mat4 proj)\n  300  \n  301      | returns aspect ratio of perspective projection\n  ...\n  304        | *[in]*  **proj**  perspective projection matrix\n  305  \n  306: .. c:function:: void  glm_persp_sizes(mat4 proj, float fovy, vec4 dest)\n  307  \n  308      | returns sizes of near and far planes of perspective projection\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\curve.rst:\n   19  ~~~~~~~~~~~~~~~~~~~~~~~\n   20  \n   21: .. c:function:: float  glm_smc(float s, mat4 m, vec4 c)\n   22  \n   23      | helper function to calculate **S** * **M** * **C** multiplication for curves\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\euler.rst:\n   19  \n   20     float pitch, yaw, roll;\n   21:    mat4  rot;\n   22  \n   23     /* pitch = ...; yaw = ...; roll = ... */\n   ..\n   47  \n   48     float pitch, yaw, roll;\n   49:    mat4  rot;\n   50  \n   51     /* pitch = degrees; yaw = degrees; roll = degrees */\n   ..\n  105        packed euler order\n  106  \n  107: .. c:function:: void  glm_euler_angles(mat4 m, vec3 dest)\n  108  \n  109      | extract euler angles (in radians) using xyz order\n  ...\n  113        | *[out]* **dest**  angles vector [x, y, z]\n  114  \n  115: .. c:function:: void  glm_euler(vec3 angles, mat4 dest)\n  116  \n  117      | build rotation matrix from euler angles\n  ...\n  123        | *[in]*  **dest**    rotation matrix\n  124  \n  125: .. c:function:: void  glm_euler_xyz(vec3 angles, mat4 dest)\n  126  \n  127      | build rotation matrix from euler angles\n  ...\n  131        | *[in]*  **dest**    rotation matrix\n  132  \n  133: .. c:function:: void  glm_euler_zyx(vec3 angles, mat4 dest)\n  134  \n  135      | build rotation matrix from euler angles\n  ...\n  139        | *[in]*  **dest**    rotation matrix\n  140  \n  141: .. c:function:: void  glm_euler_zxy(vec3 angles, mat4 dest)\n  142  \n  143      | build rotation matrix from euler angles\n  ...\n  147        | *[in]*  **dest**    rotation matrix\n  148  \n  149: .. c:function:: void  glm_euler_xzy(vec3 angles, mat4 dest)\n  150  \n  151      | build rotation matrix from euler angles\n  ...\n  155        | *[in]*  **dest**    rotation matrix\n  156  \n  157: .. c:function:: void  glm_euler_yzx(vec3 angles, mat4 dest)\n  158  \n  159      build rotation matrix from euler angles\n  ...\n  163        | *[in]*  **dest**    rotation matrix\n  164  \n  165: .. c:function:: void  glm_euler_yxz(vec3 angles, mat4 dest)\n  166  \n  167      | build rotation matrix from euler angles\n  ...\n  171        | *[in]*  **dest**    rotation matrix\n  172  \n  173: .. c:function:: void glm_euler_by_order(vec3 angles, glm_euler_sq ord, mat4 dest)\n  174  \n  175      | build rotation matrix from euler angles with given euler order.\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\features.rst:\n    5  * option to use different clipspaces e.g. Left Handed, Zero-to-One... (currently right handed negative-one is default)\n    6  * array api and struct api, you can use arrays or structs.\n    7: * general purpose matrix operations (mat4, mat3)\n    8  * chain matrix multiplication (square only)\n    9  * general purpose vector operations (cross, dot, rotate, proj, angle...)\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\frustum.rst:\n   80  ~~~~~~~~~~~~~~~~~~~~~~~\n   81  \n   82: .. c:function:: void  glm_frustum_planes(mat4 m, vec4 dest[6])\n   83  \n   84      | extracts view frustum planes\n   ..\n  102        | *[out]* **dest**  exracted view frustum planes\n  103  \n  104: .. c:function:: void  glm_frustum_corners(mat4 invMat, vec4 dest[8])\n  105  \n  106      | extracts view frustum corners using clip-space coordinates\n  ...\n  145        | *[out]* **dest**     view frustum center\n  146  \n  147: .. c:function:: void  glm_frustum_box(vec4 corners[8], mat4 m, vec3 box[2])\n  148  \n  149      | finds bounding box of frustum relative to given matrix e.g. view mat\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\getting_started.rst:\n   18  \n   19    #ifdef __AVX__\n   20:   typedef CGLM_ALIGN_IF(32) vec4  mat4[4];\n   21    #else\n   22:   typedef CGLM_ALIGN_IF(16) vec4  mat4[4];\n   23    #endif\n   24  \n   ..\n   29  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   30  \n   31: **vec4** and **mat4** requires 16 (32 for **mat4** if AVX is enabled) byte alignment because **vec4** and **mat4** operations are vectorized by SIMD instructions (SSE/AVX/NEON).\n   32  \n   33  **UPDATE:**\n   ..\n   41  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   42  *cglm* doesn't alloc any memory on heap. So it doesn't provide any allocator.\n   43: You must allocate memory yourself. You should alloc memory for out parameters too if you pass pointer of memory location. When allocating memory, don't forget that **vec4** and **mat4** require alignment.\n   44  \n   45: .. note:: Unaligned **vec4** and unaligned **mat4** operations will be supported in the future. Check todo list.\n   46     Because you may want to multiply a CGLM matrix with external matrix.\n   47     There is no guarantee that non-CGLM matrix is aligned. Unaligned types will have *u* prefix e.g. **umat4**\n   ..\n   83     CGLM_INLINE\n   84     void\n   85:    glm_mat4_mul(mat4 m1, mat4 m2, mat4 dest)\n   86  \n   87  The dest parameter is out parameter. Result will be stored in **dest**.\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\io.rst:\n   17  Using **stderr** is suggested.\n   18  \n   19: Example to print mat4 matrix:\n   20  \n   21  .. code-block:: c\n   22  \n   23:    mat4 transform;\n   24     /* ... */\n   25     glm_mat4_print(transform, stderr);\n   ..\n   65  ~~~~~~~~~~~~~~~~~~~~~~~\n   66  \n   67: .. c:function:: void  glm_mat4_print(mat4 matrix, FILE * __restrict ostream)\n   68  \n   69      | print matrix to given stream\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\mat2.rst:\n   86  .. c:function:: void glm_mat2_transpose_to(mat2 m, mat2 dest)\n   87  \n   88:     transpose mat4 and store in dest\n   89      source matrix will not be transposed unless dest is m\n   90  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\mat2x4.rst:\n   63        | *[out]* **dest** destination matrix2x4\n   64  \n   65: .. c:function:: void glm_mat2x4_mul(mat2x4 m1, mat4x2 m2, mat4 dest)\n   66  \n   67      multiply m1 and m2 to dest\n   ..\n   69      .. code-block:: c\n   70  \n   71:        glm_mat2x4_mul(mat2x4, mat4x2, mat4);\n   72  \n   73      Parameters:\n   74        | *[in]*  **m1**    left matrix (mat2x4)\n   75        | *[in]*  **m2**    right matrix (mat4x2)\n   76:       | *[out]* **dest**  destination matrix (mat4)\n   77  \n   78      .. csv-table:: mat2x4\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\mat3.rst:\n   88  .. c:function:: void  glm_mat3_transpose_to(mat3 m, mat3 dest)\n   89  \n   90:     transpose mat4 and store in dest\n   91      source matrix will not be transposed unless dest is m\n   92  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\mat3x4.rst:\n   63        | *[out]* **dest** destination matrix3x4\n   64  \n   65: .. c:function:: void glm_mat3x4_mul(mat3x4 m1, mat4x3 m2, mat4 dest)\n   66  \n   67      multiply m1 and m2 to dest\n   ..\n   69      .. code-block:: c\n   70  \n   71:        glm_mat3x4_mul(mat3x4, mat4x3, mat4);\n   72  \n   73      Parameters:\n   74        | *[in]*  **m1**    left matrix (mat3x4)\n   75        | *[in]*  **m2**    right matrix (mat4x3)\n   76:       | *[out]* **dest**  destination matrix (mat4)\n   77  \n   78      .. csv-table:: mat3x4\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\mat4.rst:\n    1  .. default-domain:: C\n    2  \n    3: mat4\n    4  ====\n    5  \n    6: Header: cglm/mat4.h\n    7  \n    8: Important: :c:func:`glm_mat4_scale` multiplies mat4 with scalar, if you need to\n    9  apply scale transform use :c:func:`glm_scale` functions.\n   10  \n   ..\n   53  ~~~~~~~~~~~~~~~~~~~~~~~\n   54  \n   55: .. c:function:: void  glm_mat4_ucopy(mat4 mat, mat4 dest)\n   56  \n   57:     copy mat4 to another one (dest). u means align is not required for dest\n   58  \n   59      Parameters:\n   ..\n   61        | *[out]* **dest**  destination\n   62  \n   63: .. c:function:: void  glm_mat4_copy(mat4 mat, mat4 dest)\n   64  \n   65:     copy mat4 to another one (dest).\n   66  \n   67      Parameters:\n   ..\n   69        | *[out]* **dest**  destination\n   70  \n   71: .. c:function:: void  glm_mat4_identity(mat4 mat)\n   72  \n   73:     copy identity mat4 to mat, or makes mat to identity\n   74  \n   75      Parameters:\n   76        | *[out]* **mat**  matrix\n   77  \n   78: .. c:function:: void  glm_mat4_identity_array(mat4 * __restrict mat, size_t count)\n   79  \n   80      make given matrix array's each element identity matrix\n   ..\n   84        | *[in]* **count**  count of matrices\n   85  \n   86: .. c:function:: void  glm_mat4_zero(mat4 mat)\n   87  \n   88      make given matrix zero\n   ..\n   91        | *[in,out]* **mat**  matrix to\n   92  \n   93: .. c:function:: void  glm_mat4_pick3(mat4 mat, mat3 dest)\n   94  \n   95:     copy upper-left of mat4 to mat3\n   96  \n   97      Parameters:\n   ..\n   99        | *[out]* **dest**  destination\n  100  \n  101: .. c:function:: void  glm_mat4_pick3t(mat4 mat, mat4 dest)\n  102  \n  103:     copy upper-left of mat4 to mat3 (transposed)\n  104      the postfix t stands for transpose\n  105  \n  ...\n  108        | *[out]* **dest**  destination\n  109  \n  110: .. c:function:: void  glm_mat4_ins3(mat3 mat, mat4 dest)\n  111  \n  112:     copy mat3 to mat4's upper-left. this function does not fill mat4's other\n  113      elements. To do that use glm_mat4.\n  114  \n  ...\n  117        | *[out]* **dest**  destination\n  118  \n  119: .. c:function:: void  glm_mat4_mul(mat4 m1, mat4 m2, mat4 dest)\n  120  \n  121      multiply m1 and m2 to dest\n  ...\n  125      .. code-block:: c\n  126  \n  127:        mat4 m = GLM_MAT4_IDENTITY_INIT;\n  128         glm_mat4_mul(m, m, m);\n  129  \n  ...\n  133        | *[out]* **dest**  destination matrix\n  134  \n  135: .. c:function:: void glm_mat4_mulN(mat4 * __restrict matrices[], int len, mat4 dest)\n  136  \n  137:     mupliply N mat4 matrices and store result in dest\n  138      | this function lets you multiply multiple (more than two or more...)\n  139      | matrices\n  ...\n  145  \n  146         mat m1, m2, m3, m4, res;\n  147:        glm_mat4_mulN((mat4 *[]){&m1, &m2, &m3, &m4}, 4, res);\n  148  \n  149      Parameters:\n  150:       | *[in]*  **matrices** array of mat4\n  151        | *[in]*  **len**      matrices count\n  152        | *[out]* **dest**     destination matrix\n  153  \n  154: .. c:function:: void  glm_mat4_mulv(mat4 m, vec4 v, vec4 dest)\n  155  \n  156:     multiply mat4 with vec4 (column vector) and store in dest vector\n  157  \n  158      Parameters:\n  159:       | *[in]*  **m**     mat4 (left)\n  160        | *[in]*  **v**     vec4 (right, column vector)\n  161        | *[out]* **dest**  vec4 (result, column vector)\n  162  \n  163: .. c:function:: void  glm_mat4_mulv3(mat4 m, vec3 v, float last, vec3 dest)\n  164  \n  165:     | multiply **vec3** with **mat4** and get **vec3** as result\n  166      |\n  167      | actually the result is **vec4**, after multiplication, \n  ...\n  170  \n  171      Parameters:\n  172:       | *[in]*  **m**     mat4(affine transform)\n  173        | *[in]*  **v**     vec3\n  174        | *[in]*  **last**  4th item to make it vec4\n  175        | *[out]* **dest**  result vector (vec3)\n  176  \n  177: .. c:function:: void  glm_mat4_trace(mat4 m)\n  178  \n  179      | sum of the elements on the main diagonal from upper left to the lower right\n  ...\n  185          trace of matrix\n  186  \n  187: .. c:function:: void  glm_mat4_trace3(mat4 m)\n  188  \n  189      | trace of matrix (rotation part)\n  ...\n  196          trace of matrix\n  197  \n  198: .. c:function:: void  glm_mat4_quat(mat4 m, versor dest)\n  199  \n  200:     convert mat4's rotation part to quaternion\n  201  \n  202      Parameters:\n  ...\n  204      | *[out]* **dest**  destination quaternion\n  205  \n  206: .. c:function:: void  glm_mat4_transpose_to(mat4 m, mat4 dest)\n  207  \n  208:     transpose mat4 and store in dest\n  209      source matrix will not be transposed unless dest is m\n  210  \n  ...\n  213        | *[out]* **dest**  destination matrix\n  214  \n  215: .. c:function:: void  glm_mat4_transpose(mat4 m)\n  216  \n  217:     transpose mat4 and store result in same matrix\n  218  \n  219      Parameters:\n  ...\n  221        | *[out]* **dest**  destination matrix\n  222  \n  223: .. c:function:: void  glm_mat4_scale_p(mat4 m, float s)\n  224  \n  225      scale (multiply with scalar) matrix without simd optimization\n  ...\n  229        | *[in]*       **s**  scalar\n  230  \n  231: .. c:function:: void  glm_mat4_scale(mat4 m, float s)\n  232  \n  233      scale (multiply with scalar) matrix\n  ...\n  238        | *[in]*       **s**  scalar\n  239  \n  240: .. c:function:: float  glm_mat4_det(mat4 mat)\n  241  \n  242:     mat4 determinant\n  243  \n  244      Parameters:\n  ...\n  248        | determinant\n  249  \n  250: .. c:function:: void  glm_mat4_inv(mat4 mat, mat4 dest)\n  251  \n  252:     inverse mat4 and store in dest\n  253  \n  254      Parameters:\n  ...\n  256        | *[out]* **dest**  destination matrix (inverse matrix)\n  257  \n  258: .. c:function:: void  glm_mat4_inv_fast(mat4 mat, mat4 dest)\n  259  \n  260:     inverse mat4 and store in dest\n  261  \n  262      | this func uses reciprocal approximation without extra corrections\n  ...\n  270        | *[out]* **dest**  destination\n  271  \n  272: .. c:function:: void  glm_mat4_swap_col(mat4 mat, int col1, int col2)\n  273  \n  274      swap two matrix columns\n  ...\n  279        | *[in]*       **col2**  col2\n  280  \n  281: .. c:function:: void  glm_mat4_swap_row(mat4 mat, int row1, int row2)\n  282  \n  283      swap two matrix rows\n  ...\n  288        | *[in]*       **row2**  row2\n  289  \n  290: .. c:function:: float  glm_mat4_rmc(vec4 r, mat4 m, vec4 c)\n  291  \n  292      | **rmc** stands for **Row** * **Matrix** * **Column**\n  ...\n  305          scalar value e.g. Matrix1x1\n  306  \n  307: .. c:function:: void glm_mat4_make(const float * __restrict src, mat4 dest)\n  308  \n  309:     Create mat4 matrix from pointer\n  310  \n  311      .. note:: **@src** must contain at least 16 elements.\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\opengl.rst:\n   23  .. code-block:: c\n   24  \n   25:    mat4 matrix;\n   26     /* ... */\n   27     glUniformMatrix4fv(location, 1, GL_FALSE, matrix[0]);\n   ..\n   31  .. code-block:: c\n   32  \n   33:    mat4 matrix;\n   34     /* ... */\n   35     glUniformMatrix4fv(location, count, GL_FALSE, matrix[0][0]);\n   ..\n   40  .. code-block:: c\n   41  \n   42:    mat4 matrix;\n   43     /* ... */\n   44     glUniformMatrix4fv(location, count, GL_FALSE, (float *)matrix);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\opt.rst:\n   17  - vec3: 8 bytes\n   18  - vec4: 16 bytes\n   19: - mat4: 16 bytes (32 on AVX)\n   20  - versor: 16 bytes\n   21  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\project.rst:\n   22  ~~~~~~~~~~~~~~~~~~~~~~~\n   23  \n   24: .. c:function:: void glm_unprojecti(vec3 pos, mat4 invMat, vec4 vp, vec3 dest)\n   25  \n   26      | maps the specified viewport coordinates into specified space [1]\n   ..\n   53        | *[out]* **dest**    unprojected coordinates\n   54  \n   55: .. c:function:: void  glm_unproject(vec3 pos, mat4 m, vec4 vp, vec3 dest)\n   56  \n   57      | maps the specified viewport coordinates into specified space [1]\n   ..\n   81        | *[out]* **dest** unprojected coordinates\n   82  \n   83: .. c:function:: void glm_project(vec3 pos, mat4 m, vec4 vp, vec3 dest)\n   84  \n   85      | map object coordinates to window coordinates\n   ..\n   98        | *[out]* **dest**     projected coordinates\n   99  \n  100: .. c:function:: float glm_project_z(vec3 pos, mat4 m)\n  101  \n  102      | map object's z coordinate to window coordinates\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\quat.rst:\n  279        | *[out]* **dest**  result quaternion\n  280  \n  281: .. c:function:: void  glm_quat_mat4(versor q, mat4 dest)\n  282  \n  283:     | convert quaternion to mat4\n  284  \n  285      Parameters:\n  ...\n  287        | *[out]* **dest**  result matrix\n  288  \n  289: .. c:function:: void  glm_quat_mat4t(versor q, mat4 dest)\n  290  \n  291:     | convert quaternion to mat4 (transposed). This is transposed version of glm_quat_mat4\n  292  \n  293      Parameters:\n  ...\n  352        | *[out]* **dest**  result quaternion\n  353  \n  354: .. c:function:: void  glm_quat_look(vec3 eye, versor ori, mat4 dest)\n  355  \n  356      | creates view matrix using quaternion as camera orientation\n  ...\n  391        | *[out]* **dest**  rotated vector\n  392  \n  393: .. c:function:: void glm_quat_rotate(mat4 m, versor q, mat4 dest)\n  394  \n  395      | rotate existing transform matrix using quaternion\n  ...\n  402        | *[out]* **dest**  rotated matrix/transform\n  403  \n  404: .. c:function:: void glm_quat_rotate_at(mat4 m, versor q, vec3 pivot)\n  405  \n  406      | rotate existing transform matrix using quaternion at pivot point\n  ...\n  411        | *[in]*       **pivot**  pivot\n  412  \n  413: .. c:function:: void glm_quat_rotate_atm(mat4 m, versor q, vec3 pivot)\n  414  \n  415      | rotate NEW transform matrix using quaternion at pivot point\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\sphere.rst:\n   37         returns radii\n   38  \n   39: .. c:function:: void  glm_sphere_transform(vec4 s, mat4 m, vec4 dest)\n   40  \n   41      | apply transform to sphere, it is just wrapper for glm_mat4_mulv3\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\troubleshooting.rst:\n   19  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   20  \n   21: **vec4** and **mat4** types require 16 byte alignment.\n   22  These types are marked with the align attribute to let the compiler know about this\n   23  requirement.\n   ..\n   89  then you probably get **BAD ACCESS** or similar...\n   90  \n   91: Because if you compile **cglm** with AVX it aligns **mat4** with 32 byte boundary, \n   92  and your project aligns that as a 16 byte boundary...\n   93  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4\\docs\\source\\vec3.rst:\n  399        | *[in]*       **angle**  angle (radians)\n  400  \n  401: .. c:function:: void  glm_vec3_rotate_m4(mat4 m, vec3 v, vec3 dest)\n  402  \n  403      apply rotation matrix to vector\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\affine-mat.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_mul(mat4 m1, mat4 m2, mat4 dest);\n   11:    CGLM_INLINE void glm_mul_rot(mat4 m1, mat4 m2, mat4 dest);\n   12:    CGLM_INLINE void glm_inv_tr(mat4 mat);\n   13   */\n   14  \n   ..\n   17  \n   18  #include \"common.h\"\n   19: #include \"mat4.h\"\n   20  #include \"mat3.h\"\n   21  \n   ..\n   54  CGLM_INLINE\n   55  void\n   56: glm_mul(mat4 m1, mat4 m2, mat4 dest) {\n   57  #if defined(__wasm__) && defined(__wasm_simd128__)\n   58    glm_mul_wasm(m1, m2, dest);\n   ..\n  114  CGLM_INLINE\n  115  void\n  116: glm_mul_rot(mat4 m1, mat4 m2, mat4 dest) {\n  117  #if defined(__wasm__) && defined(__wasm_simd128__)\n  118    glm_mul_rot_wasm(m1, m2, dest);\n  ...\n  165  CGLM_INLINE\n  166  void\n  167: glm_inv_tr(mat4 mat) {\n  168  #if defined(__wasm__) && defined(__wasm_simd128__)\n  169    glm_inv_tr_wasm(mat);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\affine-post.h:\n   11  /*\n   12   Functions:\n   13:    CGLM_INLINE void glm_translated_to(mat4 m, vec3 v, mat4 dest);\n   14:    CGLM_INLINE void glm_translated(mat4 m, vec3 v);\n   15:    CGLM_INLINE void glm_translated_x(mat4 m, float to);\n   16:    CGLM_INLINE void glm_translated_y(mat4 m, float to);\n   17:    CGLM_INLINE void glm_translated_z(mat4 m, float to);\n   18:    CGLM_INLINE void glm_rotated_x(mat4 m, float angle, mat4 dest);\n   19:    CGLM_INLINE void glm_rotated_y(mat4 m, float angle, mat4 dest);\n   20:    CGLM_INLINE void glm_rotated_z(mat4 m, float angle, mat4 dest);\n   21:    CGLM_INLINE void glm_rotated(mat4 m, float angle, vec3 axis);\n   22:    CGLM_INLINE void glm_rotated_at(mat4 m, vec3 pivot, float angle, vec3 axis);\n   23:    CGLM_INLINE void glm_spinned(mat4 m, float angle, vec3 axis);\n   24   */\n   25  \n   ..\n   28  #include \"vec3.h\"\n   29  #include \"vec4.h\"\n   30: #include \"mat4.h\"\n   31  #include \"affine-mat.h\"\n   32  \n   ..\n   42  CGLM_INLINE\n   43  void\n   44: glm_translated(mat4 m, vec3 v) {\n   45    glm_vec3_add(m[3], v, m[3]);\n   46  }\n   ..\n   60  CGLM_INLINE\n   61  void\n   62: glm_translated_to(mat4 m, vec3 v, mat4 dest) {\n   63    glm_mat4_copy(m, dest);\n   64    glm_translated(dest, v);\n   ..\n   75  CGLM_INLINE\n   76  void\n   77: glm_translated_x(mat4 m, float x) {\n   78    m[3][0] += x;\n   79  }\n   ..\n   89  CGLM_INLINE\n   90  void\n   91: glm_translated_y(mat4 m, float y) {\n   92    m[3][1] += y;\n   93  }\n   ..\n  103  CGLM_INLINE\n  104  void\n  105: glm_translated_z(mat4 m, float z) {\n  106    m[3][2] += z;\n  107  }\n  ...\n  119  CGLM_INLINE\n  120  void\n  121: glm_rotated_x(mat4 m, float angle, mat4 dest) {\n  122:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  123    float c, s;\n  124  \n  ...\n  146  CGLM_INLINE\n  147  void\n  148: glm_rotated_y(mat4 m, float angle, mat4 dest) {\n  149:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  150    float c, s;\n  151  \n  ...\n  173  CGLM_INLINE\n  174  void\n  175: glm_rotated_z(mat4 m, float angle, mat4 dest) {\n  176:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  177    float c, s;\n  178  \n  ...\n  199  CGLM_INLINE\n  200  void\n  201: glm_rotated(mat4 m, float angle, vec3 axis) {\n  202:   CGLM_ALIGN_MAT mat4 rot;\n  203    glm_rotate_make(rot, angle, axis);\n  204    glm_mul_rot(rot, m, m);\n  ...\n  218  CGLM_INLINE\n  219  void\n  220: glm_rotated_at(mat4 m, vec3 pivot, float angle, vec3 axis) {\n  221    CGLM_ALIGN(8) vec3 pivotInv;\n  222  \n  ...\n  239  CGLM_INLINE\n  240  void\n  241: glm_spinned(mat4 m, float angle, vec3 axis) {\n  242:   CGLM_ALIGN_MAT mat4 rot;\n  243    glm_rotate_atm(rot, m[3], angle, axis);\n  244    glm_mat4_mul(rot, m, m);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\affine-pre.h:\n   11  /*\n   12   Functions:\n   13:    CGLM_INLINE void glm_translate_to(mat4 m, vec3 v, mat4 dest);\n   14:    CGLM_INLINE void glm_translate(mat4 m, vec3 v);\n   15:    CGLM_INLINE void glm_translate_x(mat4 m, float to);\n   16:    CGLM_INLINE void glm_translate_y(mat4 m, float to);\n   17:    CGLM_INLINE void glm_translate_z(mat4 m, float to);\n   18:    CGLM_INLINE void glm_rotate_x(mat4 m, float angle, mat4 dest);\n   19:    CGLM_INLINE void glm_rotate_y(mat4 m, float angle, mat4 dest);\n   20:    CGLM_INLINE void glm_rotate_z(mat4 m, float angle, mat4 dest);\n   21:    CGLM_INLINE void glm_rotate(mat4 m, float angle, vec3 axis);\n   22:    CGLM_INLINE void glm_rotate_at(mat4 m, vec3 pivot, float angle, vec3 axis);\n   23:    CGLM_INLINE void glm_rotate_atm(mat4 m, vec3 pivot, float angle, vec3 axis);\n   24:    CGLM_INLINE void glm_spin(mat4 m, float angle, vec3 axis);\n   25   */\n   26  \n   ..\n   29  #include \"vec3.h\"\n   30  #include \"vec4.h\"\n   31: #include \"mat4.h\"\n   32  #include \"affine-mat.h\"\n   33  \n   ..\n   41  CGLM_INLINE\n   42  void\n   43: glm_translate(mat4 m, vec3 v) {\n   44  #if defined(CGLM_SIMD)\n   45    glmm_128 m0, m1, m2, m3;\n   ..\n   73  CGLM_INLINE\n   74  void\n   75: glm_translate_to(mat4 m, vec3 v, mat4 dest) {\n   76    glm_mat4_copy(m, dest);\n   77    glm_translate(dest, v);\n   ..\n   86  CGLM_INLINE\n   87  void\n   88: glm_translate_x(mat4 m, float x) {\n   89  #if defined(CGLM_SIMD)\n   90    glmm_store(m[3], glmm_fmadd(glmm_load(m[0]), glmm_set1(x), glmm_load(m[3])));\n   ..\n  104  CGLM_INLINE\n  105  void\n  106: glm_translate_y(mat4 m, float y) {\n  107  #if defined(CGLM_SIMD)\n  108    glmm_store(m[3], glmm_fmadd(glmm_load(m[1]), glmm_set1(y), glmm_load(m[3])));\n  ...\n  122  CGLM_INLINE\n  123  void\n  124: glm_translate_z(mat4 m, float z) {\n  125  #if defined(CGLM_SIMD)\n  126    glmm_store(m[3], glmm_fmadd(glmm_load(m[2]), glmm_set1(z), glmm_load(m[3])));\n  ...\n  142  CGLM_INLINE\n  143  void\n  144: glm_rotate_x(mat4 m, float angle, mat4 dest) {\n  145:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  146    float c, s;\n  147  \n  ...\n  167  CGLM_INLINE\n  168  void\n  169: glm_rotate_y(mat4 m, float angle, mat4 dest) {\n  170:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  171    float c, s;\n  172  \n  ...\n  192  CGLM_INLINE\n  193  void\n  194: glm_rotate_z(mat4 m, float angle, mat4 dest) {\n  195:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  196    float c, s;\n  197  \n  ...\n  234  CGLM_INLINE\n  235  void\n  236: glm_rotate(mat4 m, float angle, vec3 axis) {\n  237:   CGLM_ALIGN_MAT mat4 rot;\n  238    glm_rotate_make(rot, angle, axis);\n  239    glm_mul_rot(m, rot, m);\n  ...\n  251  CGLM_INLINE\n  252  void\n  253: glm_rotate_at(mat4 m, vec3 pivot, float angle, vec3 axis) {\n  254    CGLM_ALIGN(8) vec3 pivotInv;\n  255  \n  ...\n  276  CGLM_INLINE\n  277  void\n  278: glm_rotate_atm(mat4 m, vec3 pivot, float angle, vec3 axis) {\n  279    CGLM_ALIGN(8) vec3 pivotInv;\n  280  \n  ...\n  296  CGLM_INLINE\n  297  void\n  298: glm_spin(mat4 m, float angle, vec3 axis) {\n  299:   CGLM_ALIGN_MAT mat4 rot;\n  300    glm_rotate_atm(rot, m[3], angle, axis);\n  301    glm_mat4_mul(m, rot, m);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\affine.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_translate_to(mat4 m, vec3 v, mat4 dest);\n   11:    CGLM_INLINE void glm_translate(mat4 m, vec3 v);\n   12:    CGLM_INLINE void glm_translate_x(mat4 m, float to);\n   13:    CGLM_INLINE void glm_translate_y(mat4 m, float to);\n   14:    CGLM_INLINE void glm_translate_z(mat4 m, float to);\n   15:    CGLM_INLINE void glm_translate_make(mat4 m, vec3 v);\n   16:    CGLM_INLINE void glm_scale_to(mat4 m, vec3 v, mat4 dest);\n   17:    CGLM_INLINE void glm_scale_make(mat4 m, vec3 v);\n   18:    CGLM_INLINE void glm_scale(mat4 m, vec3 v);\n   19:    CGLM_INLINE void glm_scale_uni(mat4 m, float s);\n   20:    CGLM_INLINE void glm_rotate_x(mat4 m, float angle, mat4 dest);\n   21:    CGLM_INLINE void glm_rotate_y(mat4 m, float angle, mat4 dest);\n   22:    CGLM_INLINE void glm_rotate_z(mat4 m, float angle, mat4 dest);\n   23:    CGLM_INLINE void glm_rotate_make(mat4 m, float angle, vec3 axis);\n   24:    CGLM_INLINE void glm_rotate(mat4 m, float angle, vec3 axis);\n   25:    CGLM_INLINE void glm_rotate_at(mat4 m, vec3 pivot, float angle, vec3 axis);\n   26:    CGLM_INLINE void glm_rotate_atm(mat4 m, vec3 pivot, float angle, vec3 axis);\n   27:    CGLM_INLINE void glm_spin(mat4 m, float angle, vec3 axis);\n   28:    CGLM_INLINE void glm_decompose_scalev(mat4 m, vec3 s);\n   29:    CGLM_INLINE bool glm_uniscaled(mat4 m);\n   30:    CGLM_INLINE void glm_decompose_rs(mat4 m, mat4 r, vec3 s);\n   31:    CGLM_INLINE void glm_decompose(mat4 m, vec4 t, mat4 r, vec3 s);\n   32   */\n   33  \n   ..\n   39  #include \"vec3.h\"\n   40  #include \"vec4.h\"\n   41: #include \"mat4.h\"\n   42  #include \"affine-mat.h\"\n   43  \n   ..\n   50  CGLM_INLINE\n   51  void\n   52: glm_translate_make(mat4 m, vec3 v) {\n   53    glm_mat4_identity(m);\n   54    glm_vec3_copy(v, m[3]);\n   ..\n   65  CGLM_INLINE\n   66  void\n   67: glm_scale_to(mat4 m, vec3 v, mat4 dest) {\n   68    glm_vec4_scale(m[0], v[0], dest[0]);\n   69    glm_vec4_scale(m[1], v[1], dest[1]);\n   ..\n   81  CGLM_INLINE\n   82  void\n   83: glm_scale_make(mat4 m, vec3 v) {\n   84    glm_mat4_identity(m);\n   85    m[0][0] = v[0];\n   ..\n   97  CGLM_INLINE\n   98  void\n   99: glm_scale(mat4 m, vec3 v) {\n  100    glm_scale_to(m, v, m);\n  101  }\n  ...\n  110  CGLM_INLINE\n  111  void\n  112: glm_scale_uni(mat4 m, float s) {\n  113    CGLM_ALIGN(8) vec3 v = { s, s, s };\n  114    glm_scale_to(m, v, m);\n  ...\n  126  CGLM_INLINE\n  127  void\n  128: glm_rotate_make(mat4 m, float angle, vec3 axis) {\n  129    CGLM_ALIGN(8) vec3 axisn, v, vs;\n  130    float c;\n  ...\n  156  CGLM_INLINE\n  157  void\n  158: glm_decompose_scalev(mat4 m, vec3 s) {\n  159    s[0] = glm_vec3_norm(m[0]);\n  160    s[1] = glm_vec3_norm(m[1]);\n  ...\n  172  CGLM_INLINE\n  173  bool\n  174: glm_uniscaled(mat4 m) {\n  175    CGLM_ALIGN(8) vec3 s;\n  176    glm_decompose_scalev(m, s);\n  ...\n  179  \n  180  /*!\n  181:  * @brief decompose rotation matrix (mat4) and scale vector [Sx, Sy, Sz]\n  182   *        DON'T pass projected matrix here\n  183   *\n  ...\n  188  CGLM_INLINE\n  189  void\n  190: glm_decompose_rs(mat4 m, mat4 r, vec3 s) {\n  191    CGLM_ALIGN(16) vec4 t = {0.0f, 0.0f, 0.0f, 1.0f};\n  192    CGLM_ALIGN(8)  vec3 v;\n  ...\n  223   * @param[in]  m affine transform\n  224   * @param[out] t translation vector\n  225:  * @param[out] r rotation matrix (mat4)\n  226   * @param[out] s scaling vector [X, Y, Z]\n  227   */\n  228  CGLM_INLINE\n  229  void\n  230: glm_decompose(mat4 m, vec4 t, mat4 r, vec3 s) {\n  231    glm_vec4_copy(m[3], t);\n  232    glm_decompose_rs(m, r, s);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\applesimd.h:\n   17  \n   18  /*!\n   19: * @brief converts mat4 to Apple's simd type simd_float4x4\n   20  * @return simd_float4x4\n   21  */\n   22  CGLM_INLINE\n   23  simd_float4x4\n   24: glm_mat4_applesimd(mat4 m) {\n   25    simd_float4x4 t;\n   26    \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\bezier.h:\n   20                                { 1.0f, -1.0f,  0.0f,  0.0f}}\n   21  /* for C only */\n   22: #define GLM_BEZIER_MAT  ((mat4)GLM_BEZIER_MAT_INIT)\n   23: #define GLM_HERMITE_MAT ((mat4)GLM_HERMITE_MAT_INIT)\n   24  \n   25  #define CGLM_DECASTEL_EPS   1e-9f\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\box.h:\n   23  CGLM_INLINE\n   24  void\n   25: glm_aabb_transform(vec3 box[2], mat4 m, vec3 dest[2]) {\n   26    vec3 v[2], xa, xb, ya, yb, za, zb;\n   27  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call.h:\n   25  #include \"call/mat3x2.h\"\n   26  #include \"call/mat3x4.h\"\n   27: #include \"call/mat4.h\"\n   28  #include \"call/mat4x2.h\"\n   29  #include \"call/mat4x3.h\"\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\cam.h:\n   11                                   float bottom, float top,\n   12                                   float nearZ,  float farZ,\n   13:                                  mat4  dest)\n   14     CGLM_INLINE void  glm_ortho(float left,   float right,\n   15                                 float bottom, float top,\n   16                                 float nearZ,  float farZ,\n   17:                                mat4  dest)\n   18:    CGLM_INLINE void  glm_ortho_aabb(vec3 box[2], mat4 dest)\n   19:    CGLM_INLINE void  glm_ortho_aabb_p(vec3 box[2],  float padding, mat4 dest)\n   20:    CGLM_INLINE void  glm_ortho_aabb_pz(vec3 box[2], float padding, mat4 dest)\n   21:    CGLM_INLINE void  glm_ortho_default(float aspect, mat4  dest)\n   22:    CGLM_INLINE void  glm_ortho_default_s(float aspect, float size, mat4 dest)\n   23     CGLM_INLINE void  glm_perspective(float fovy,\n   24                                       float aspect,\n   25                                       float nearZ,\n   26                                       float farZ,\n   27:                                      mat4  dest)\n   28:    CGLM_INLINE void  glm_perspective_default(float aspect, mat4 dest)\n   29:    CGLM_INLINE void  glm_perspective_resize(float aspect, mat4 proj)\n   30:    CGLM_INLINE void  glm_lookat(vec3 eye, vec3 center, vec3 up, mat4 dest)\n   31:    CGLM_INLINE void  glm_look(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n   32:    CGLM_INLINE void  glm_look_anyup(vec3 eye, vec3 dir, mat4 dest)\n   33:    CGLM_INLINE void  glm_persp_decomp(mat4   proj,\n   34                                        float *nearZ, float *farZ,\n   35                                        float *top,   float *bottom,\n   36                                        float *left,  float *right)\n   37:    CGLM_INLINE void  glm_persp_decompv(mat4 proj, float dest[6])\n   38:    CGLM_INLINE void  glm_persp_decomp_x(mat4 proj, float *left, float *right)\n   39:    CGLM_INLINE void  glm_persp_decomp_y(mat4 proj, float *top,  float *bottom)\n   40:    CGLM_INLINE void  glm_persp_decomp_z(mat4 proj, float *nearv, float *farv)\n   41:    CGLM_INLINE void  glm_persp_decomp_far(mat4 proj, float *farZ)\n   42:    CGLM_INLINE void  glm_persp_decomp_near(mat4 proj, float *nearZ)\n   43:    CGLM_INLINE float glm_persp_fovy(mat4 proj)\n   44:    CGLM_INLINE float glm_persp_aspect(mat4 proj)\n   45:    CGLM_INLINE void  glm_persp_sizes(mat4 proj, float fovy, vec4 dest)\n   46   */\n   47  \n   ..\n  103              float bottom,  float top,\n  104              float nearZ,   float farZ,\n  105:             mat4  dest) {\n  106  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  107    glm_frustum_lh_zo(left, right, bottom, top, nearZ, farZ, dest);\n  ...\n  131            float bottom,  float top,\n  132            float nearZ,   float farZ,\n  133:           mat4  dest) {\n  134  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  135    glm_ortho_lh_zo(left, right, bottom, top, nearZ, farZ, dest);\n  ...\n  153  CGLM_INLINE\n  154  void\n  155: glm_ortho_aabb(vec3 box[2], mat4 dest) {\n  156  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  157    glm_ortho_aabb_lh_zo(box, dest);\n  ...\n  176  CGLM_INLINE\n  177  void\n  178: glm_ortho_aabb_p(vec3 box[2], float padding, mat4 dest) {\n  179  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  180    glm_ortho_aabb_p_lh_zo(box, padding, dest);\n  ...\n  199  CGLM_INLINE\n  200  void\n  201: glm_ortho_aabb_pz(vec3 box[2], float padding, mat4 dest) {\n  202  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  203    glm_ortho_aabb_pz_lh_zo(box, padding, dest);\n  ...\n  219  CGLM_INLINE\n  220  void\n  221: glm_ortho_default(float aspect, mat4 dest) {\n  222  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  223    glm_ortho_default_lh_zo(aspect, dest);\n  ...\n  240  CGLM_INLINE\n  241  void\n  242: glm_ortho_default_s(float aspect, float size, mat4 dest) {\n  243  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  244    glm_ortho_default_s_lh_zo(aspect, size, dest);\n  ...\n  263  CGLM_INLINE\n  264  void\n  265: glm_perspective(float fovy, float aspect, float nearZ, float farZ, mat4 dest) {\n  266  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  267    glm_perspective_lh_zo(fovy, aspect, nearZ, farZ, dest);\n  ...\n  285  CGLM_INLINE\n  286  void\n  287: glm_persp_move_far(mat4 proj, float deltaFar) {\n  288  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  289    glm_persp_move_far_lh_zo(proj, deltaFar);\n  ...\n  306  CGLM_INLINE\n  307  void\n  308: glm_perspective_default(float aspect, mat4 dest) {\n  309  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  310    glm_perspective_default_lh_zo(aspect, dest);\n  ...\n  328  CGLM_INLINE\n  329  void\n  330: glm_perspective_resize(float aspect, mat4 proj) {\n  331    if (proj[0][0] == 0.0f)\n  332      return;\n  ...\n  348  CGLM_INLINE\n  349  void\n  350: glm_lookat(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n  351  #if CGLM_CONFIG_CLIP_CONTROL & CGLM_CLIP_CONTROL_LH_BIT\n  352    glm_lookat_lh(eye, center, up, dest);\n  ...\n  372  CGLM_INLINE\n  373  void\n  374: glm_look(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n  375  #if CGLM_CONFIG_CLIP_CONTROL & CGLM_CLIP_CONTROL_LH_BIT\n  376    glm_look_lh(eye, dir, up, dest);\n  ...\n  392  CGLM_INLINE\n  393  void\n  394: glm_look_anyup(vec3 eye, vec3 dir, mat4 dest) {\n  395  #if CGLM_CONFIG_CLIP_CONTROL & CGLM_CLIP_CONTROL_LH_BIT\n  396    glm_look_anyup_lh(eye, dir, dest);\n  ...\n  413  CGLM_INLINE\n  414  void\n  415: glm_persp_decomp(mat4 proj,\n  416                   float * __restrict nearZ, float * __restrict farZ,\n  417                   float * __restrict top,   float * __restrict bottom,\n  ...\n  437  CGLM_INLINE\n  438  void\n  439: glm_persp_decompv(mat4 proj, float dest[6]) {\n  440  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  441    glm_persp_decompv_lh_zo(proj, dest);\n  ...\n  459  CGLM_INLINE\n  460  void\n  461: glm_persp_decomp_x(mat4 proj,\n  462                     float * __restrict left,\n  463                     float * __restrict right) {\n  ...\n  483  CGLM_INLINE\n  484  void\n  485: glm_persp_decomp_y(mat4 proj,\n  486                     float * __restrict top,\n  487                     float * __restrict bottom) {\n  ...\n  507  CGLM_INLINE\n  508  void\n  509: glm_persp_decomp_z(mat4 proj, float * __restrict nearZ, float * __restrict farZ) {\n  510  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  511    glm_persp_decomp_z_lh_zo(proj, nearZ, farZ);\n  ...\n  527  CGLM_INLINE\n  528  void\n  529: glm_persp_decomp_far(mat4 proj, float * __restrict farZ) {\n  530  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  531    glm_persp_decomp_far_lh_zo(proj, farZ);\n  ...\n  547  CGLM_INLINE\n  548  void\n  549: glm_persp_decomp_near(mat4 proj, float * __restrict nearZ) {\n  550  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  551    glm_persp_decomp_near_lh_zo(proj, nearZ);\n  ...\n  568  CGLM_INLINE\n  569  void\n  570: glm_persp_sizes(mat4 proj, float fovy, vec4 dest) {\n  571  #if CGLM_CONFIG_CLIP_CONTROL == CGLM_CLIP_CONTROL_LH_ZO\n  572    glm_persp_sizes_lh_zo(proj, fovy, dest);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\cglm.h:\n   16  #include \"ivec3.h\"\n   17  #include \"ivec4.h\"\n   18: #include \"mat4.h\"\n   19  #include \"mat4x2.h\"\n   20  #include \"mat4x3.h\"\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\curve.h:\n   11  #include \"common.h\"\n   12  #include \"vec4.h\"\n   13: #include \"mat4.h\"\n   14  \n   15  /*!\n   ..\n   32  CGLM_INLINE\n   33  float\n   34: glm_smc(float s, mat4 m, vec4 c) {\n   35    vec4 vs;\n   36    glm_vec4_cubic(s, vs);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\euler.h:\n   20   Functions:\n   21     CGLM_INLINE glm_euler_seq glm_euler_order(int newOrder[3]);\n   22:    CGLM_INLINE void glm_euler_angles(mat4 m, vec3 dest);\n   23:    CGLM_INLINE void glm_euler(vec3 angles, mat4 dest);\n   24:    CGLM_INLINE void glm_euler_xyz(vec3 angles, mat4 dest);\n   25:    CGLM_INLINE void glm_euler_zyx(vec3 angles, mat4 dest);\n   26:    CGLM_INLINE void glm_euler_zxy(vec3 angles, mat4 dest);\n   27:    CGLM_INLINE void glm_euler_xzy(vec3 angles, mat4 dest);\n   28:    CGLM_INLINE void glm_euler_yzx(vec3 angles, mat4 dest);\n   29:    CGLM_INLINE void glm_euler_yxz(vec3 angles, mat4 dest);\n   30     CGLM_INLINE void glm_euler_by_order(vec3         angles,\n   31                                         glm_euler_seq ord,\n   32:                                        mat4         dest);\n   33     CGLM_INLINE void glm_euler_xyz_quat(vec3 angles, versor dest);\n   34     CGLM_INLINE void glm_euler_xzy_quat(vec3 angles, versor dest);\n   ..\n  117  CGLM_INLINE\n  118  void\n  119: glm_euler_angles(mat4 m, vec3 dest) {\n  120    float m00, m01, m10, m11, m20, m21, m22;\n  121    float thetaX, thetaY, thetaZ;\n  ...\n  155  CGLM_INLINE\n  156  void\n  157: glm_euler_xyz(vec3 angles, mat4 dest) {\n  158    float cx, cy, cz,\n  159          sx, sy, sz, czsx, cxcz, sysz;\n  ...\n  193  CGLM_INLINE\n  194  void\n  195: glm_euler(vec3 angles, mat4 dest) {\n  196    glm_euler_xyz(angles, dest);\n  197  }\n  ...\n  205  CGLM_INLINE\n  206  void\n  207: glm_euler_xzy(vec3 angles, mat4 dest) {\n  208    float cx, cy, cz,\n  209    sx, sy, sz, sxsy, cysx, cxsy, cxcy;\n  ...\n  244  CGLM_INLINE\n  245  void\n  246: glm_euler_yxz(vec3 angles, mat4 dest) {\n  247    float cx, cy, cz,\n  248          sx, sy, sz, cycz, sysz, czsy, cysz;\n  ...\n  283  CGLM_INLINE\n  284  void\n  285: glm_euler_yzx(vec3 angles, mat4 dest) {\n  286    float cx, cy, cz,\n  287          sx, sy, sz, sxsy, cxcy, cysx, cxsy;\n  ...\n  322  CGLM_INLINE\n  323  void\n  324: glm_euler_zxy(vec3 angles, mat4 dest) {\n  325    float cx, cy, cz,\n  326          sx, sy, sz, cycz, sxsy, cysz;\n  ...\n  360  CGLM_INLINE\n  361  void\n  362: glm_euler_zyx(vec3 angles, mat4 dest) {\n  363    float cx, cy, cz,\n  364          sx, sy, sz, czsx, cxcz, sysz;\n  ...\n  399  CGLM_INLINE\n  400  void\n  401: glm_euler_by_order(vec3 angles, glm_euler_seq ord, mat4 dest) {\n  402    float cx, cy, cz,\n  403          sx, sy, sz;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\frustum.h:\n   13  #include \"vec3.h\"\n   14  #include \"vec4.h\"\n   15: #include \"mat4.h\"\n   16  \n   17  #define GLM_LBN 0 /* left  bottom near */\n   ..\n   70  CGLM_INLINE\n   71  void\n   72: glm_frustum_planes(mat4 m, vec4 dest[6]) {\n   73:   mat4 t;\n   74  \n   75    glm_mat4_transpose_to(m, t);\n   ..\n  115  CGLM_INLINE\n  116  void\n  117: glm_frustum_corners(mat4 invMat, vec4 dest[8]) {\n  118    vec4 c[8];\n  119  \n  ...\n  183  CGLM_INLINE\n  184  void\n  185: glm_frustum_box(vec4 corners[8], mat4 m, vec3 box[2]) {\n  186    vec4 v;\n  187    vec3 min, max;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\io.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_mat4_print(mat4 matrix, FILE *ostream);\n   11     CGLM_INLINE void glm_mat3_print(mat3 matrix, FILE *ostream);\n   12     CGLM_INLINE void glm_vec4_print(vec4 vec, FILE *ostream);\n   ..\n  118  CGLM_INLINE\n  119  void\n  120: glm_mat4_print(mat4              matrix,\n  121                 FILE * __restrict ostream) {\n  122    char buff[16];\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\mat2x4.h:\n   15     CGLM_INLINE void glm_mat2x4_zero(mat2x4 mat);\n   16     CGLM_INLINE void glm_mat2x4_make(const float * __restrict src, mat2x4 dest);\n   17:    CGLM_INLINE void glm_mat2x4_mul(mat2x4 m1, mat4x2 m2, mat4 dest);\n   18     CGLM_INLINE void glm_mat2x4_mulv(mat2x4 m, vec2 v, vec4 dest);\n   19     CGLM_INLINE void glm_mat2x4_transpose(mat2x4 m, mat4x2 dest);\n   ..\n   81   *\n   82   * @code\n   83:  * glm_mat2x4_mul(mat2x4, mat4x2, mat4);\n   84   * @endcode\n   85   *\n   86   * @param[in]  m1   left matrix (mat2x4)\n   87   * @param[in]  m2   right matrix (mat4x2)\n   88:  * @param[out] dest destination matrix (mat4)\n   89   */\n   90  CGLM_INLINE\n   91  void\n   92: glm_mat2x4_mul(mat2x4 m1, mat4x2 m2, mat4 dest) {\n   93    float a00 = m1[0][0], a01 = m1[0][1], a02 = m1[0][2], a03 = m1[0][3],\n   94          a10 = m1[1][0], a11 = m1[1][1], a12 = m1[1][2], a13 = m1[1][3],\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\mat3x4.h:\n   15     CGLM_INLINE void glm_mat3x4_zero(mat3x4 mat);\n   16     CGLM_INLINE void glm_mat3x4_make(const float * __restrict src, mat3x4 dest);\n   17:    CGLM_INLINE void glm_mat3x4_mul(mat3x4 m1, mat4x3 m2, mat4 dest);\n   18     CGLM_INLINE void glm_mat3x4_mulv(mat3x4 m, vec3 v, vec4 dest);\n   19     CGLM_INLINE void glm_mat3x4_transpose(mat3x4 m, mat4x3 dest);\n   ..\n   88   *\n   89   * @code\n   90:  * glm_mat3x4_mul(mat3x4, mat4x3, mat4);\n   91   * @endcode\n   92   *\n   93   * @param[in]  m1   left matrix (mat3x4)\n   94   * @param[in]  m2   right matrix (mat4x3)\n   95:  * @param[out] dest destination matrix (mat4)\n   96   */\n   97  CGLM_INLINE\n   98  void\n   99: glm_mat3x4_mul(mat3x4 m1, mat4x3 m2, mat4 dest) {\n  100    float a00 = m1[0][0], a01 = m1[0][1], a02 = m1[0][2], a03 = m1[0][3],\n  101          a10 = m1[1][0], a11 = m1[1][1], a12 = m1[1][2], a13 = m1[1][3],\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\mat4.h:\n   19  \n   20   Functions:\n   21:    CGLM_INLINE void  glm_mat4_ucopy(mat4 mat, mat4 dest);\n   22:    CGLM_INLINE void  glm_mat4_copy(mat4 mat, mat4 dest);\n   23:    CGLM_INLINE void  glm_mat4_identity(mat4 mat);\n   24:    CGLM_INLINE void  glm_mat4_identity_array(mat4 * restrict mat, size_t count);\n   25:    CGLM_INLINE void  glm_mat4_zero(mat4 mat);\n   26:    CGLM_INLINE void  glm_mat4_pick3(mat4 mat, mat3 dest);\n   27:    CGLM_INLINE void  glm_mat4_pick3t(mat4 mat, mat3 dest);\n   28:    CGLM_INLINE void  glm_mat4_ins3(mat3 mat, mat4 dest);\n   29:    CGLM_INLINE void  glm_mat4_mul(mat4 m1, mat4 m2, mat4 dest);\n   30:    CGLM_INLINE void  glm_mat4_mulN(mat4 *matrices[], int len, mat4 dest);\n   31:    CGLM_INLINE void  glm_mat4_mulv(mat4 m, vec4 v, vec4 dest);\n   32:    CGLM_INLINE void  glm_mat4_mulv3(mat4 m, vec3 v, float last, vec3 dest);\n   33:    CGLM_INLINE float glm_mat4_trace(mat4 m);\n   34:    CGLM_INLINE float glm_mat4_trace3(mat4 m);\n   35:    CGLM_INLINE void  glm_mat4_quat(mat4 m, versor dest) ;\n   36:    CGLM_INLINE void  glm_mat4_transpose_to(mat4 m, mat4 dest);\n   37:    CGLM_INLINE void  glm_mat4_transpose(mat4 m);\n   38:    CGLM_INLINE void  glm_mat4_scale_p(mat4 m, float s);\n   39:    CGLM_INLINE void  glm_mat4_scale(mat4 m, float s);\n   40:    CGLM_INLINE float glm_mat4_det(mat4 mat);\n   41:    CGLM_INLINE void  glm_mat4_inv(mat4 mat, mat4 dest);\n   42:    CGLM_INLINE void  glm_mat4_inv_fast(mat4 mat, mat4 dest);\n   43:    CGLM_INLINE void  glm_mat4_swap_col(mat4 mat, int col1, int col2);\n   44:    CGLM_INLINE void  glm_mat4_swap_row(mat4 mat, int row1, int row2);\n   45:    CGLM_INLINE float glm_mat4_rmc(vec4 r, mat4 m, vec4 c);\n   46:    CGLM_INLINE void  glm_mat4_make(float * restrict src, mat4 dest);\n   47   */\n   48  \n   ..\n   55  \n   56  #ifdef CGLM_SSE_FP\n   57: #  include \"simd/sse2/mat4.h\"\n   58  #endif\n   59  \n   60  #ifdef CGLM_AVX_FP\n   61: #  include \"simd/avx/mat4.h\"\n   62  #endif\n   63  \n   64  #ifdef CGLM_NEON_FP\n   65: #  include \"simd/neon/mat4.h\"\n   66  #endif\n   67  \n   68  #ifdef CGLM_SIMD_WASM\n   69: #  include \"simd/wasm/mat4.h\"\n   70  #endif\n   71  \n   ..\n   85  \n   86  /* for C only */\n   87: #define GLM_MAT4_IDENTITY ((mat4)GLM_MAT4_IDENTITY_INIT)\n   88: #define GLM_MAT4_ZERO     ((mat4)GLM_MAT4_ZERO_INIT)\n   89  \n   90  /* DEPRECATED! use _copy, _ucopy versions */\n   ..\n  106  CGLM_INLINE\n  107  void\n  108: glm_mat4_ucopy(mat4 mat, mat4 dest) {\n  109    dest[0][0] = mat[0][0];  dest[1][0] = mat[1][0];\n  110    dest[0][1] = mat[0][1];  dest[1][1] = mat[1][1];\n  ...\n  126  CGLM_INLINE\n  127  void\n  128: glm_mat4_copy(mat4 mat, mat4 dest) {\n  129  #if defined(__wasm__) && defined(__wasm_simd128__)\n  130    glmm_store(dest[0], glmm_load(mat[0]));\n  ...\n  159   *\n  160   * // or\n  161:  * mat4 mat = GLM_MAT4_IDENTITY_INIT;\n  162   * @endcode\n  163   *\n  ...\n  166  CGLM_INLINE\n  167  void\n  168: glm_mat4_identity(mat4 mat) {\n  169:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  170    glm_mat4_copy(t, mat);\n  171  }\n  ...\n  181  CGLM_INLINE\n  182  void\n  183: glm_mat4_identity_array(mat4 * __restrict mat, size_t count) {\n  184:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;\n  185    size_t i;\n  186  \n  ...\n  197  CGLM_INLINE\n  198  void\n  199: glm_mat4_zero(mat4 mat) {\n  200  #if defined(__wasm__) && defined(__wasm_simd128__)\n  201    glmm_128 x0;\n  ...\n  225    vst1q_f32(mat[3], x0);\n  226  #else\n  227:   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_ZERO_INIT;\n  228    glm_mat4_copy(t, mat);\n  229  #endif\n  ...\n  231  \n  232  /*!\n  233:  * @brief copy upper-left of mat4 to mat3\n  234   *\n  235   * @param[in]  mat  source\n  ...\n  238  CGLM_INLINE\n  239  void\n  240: glm_mat4_pick3(mat4 mat, mat3 dest) {\n  241    dest[0][0] = mat[0][0];\n  242    dest[0][1] = mat[0][1];\n  ...\n  253  \n  254  /*!\n  255:  * @brief copy upper-left of mat4 to mat3 (transposed)\n  256   *\n  257   * the postfix t stands for transpose\n  ...\n  262  CGLM_INLINE\n  263  void\n  264: glm_mat4_pick3t(mat4 mat, mat3 dest) {\n  265    dest[0][0] = mat[0][0];\n  266    dest[0][1] = mat[1][0];\n  ...\n  277  \n  278  /*!\n  279:  * @brief copy mat3 to mat4's upper-left\n  280   *\n  281   * @param[in]  mat  source\n  ...\n  284  CGLM_INLINE\n  285  void\n  286: glm_mat4_ins3(mat3 mat, mat4 dest) {\n  287    dest[0][0] = mat[0][0];\n  288    dest[0][1] = mat[0][1];\n  ...\n  304   *\n  305   * @code\n  306:  * mat4 m = GLM_MAT4_IDENTITY_INIT;\n  307   * glm_mat4_mul(m, m, m);\n  308   * @endcode\n  ...\n  314  CGLM_INLINE\n  315  void\n  316: glm_mat4_mul(mat4 m1, mat4 m2, mat4 dest) {\n  317  #if defined(__wasm__) && defined(__wasm_simd128__)\n  318    glm_mat4_mul_wasm(m1, m2, dest);\n  ...\n  354  \n  355  /*!\n  356:  * @brief mupliply N mat4 matrices and store result in dest\n  357   *\n  358   * this function lets you multiply multiple (more than two or more...) matrices\n  ...\n  363   * mat m1, m2, m3, m4, res;\n  364   *\n  365:  * glm_mat4_mulN((mat4 *[]){&m1, &m2, &m3, &m4}, 4, res);\n  366   * @endcode\n  367   *\n  368:  * @warning matrices parameter is pointer array not mat4 array!\n  369   *\n  370:  * @param[in]  matrices mat4 * array\n  371   * @param[in]  len      matrices count\n  372   * @param[out] dest     result\n  ...\n  374  CGLM_INLINE\n  375  void\n  376: glm_mat4_mulN(mat4 * __restrict matrices[], uint32_t len, mat4 dest) {\n  377    uint32_t i;\n  378  \n  ...\n  388  \n  389  /*!\n  390:  * @brief multiply mat4 with vec4 (column vector) and store in dest vector\n  391   *\n  392:  * @param[in]  m    mat4 (left)\n  393   * @param[in]  v    vec4 (right, column vector)\n  394   * @param[out] dest vec4 (result, column vector)\n  ...\n  396  CGLM_INLINE\n  397  void\n  398: glm_mat4_mulv(mat4 m, vec4 v, vec4 dest) {\n  399  #if defined(__wasm__) && defined(__wasm_simd128__)\n  400    glm_mat4_mulv_wasm(m, v, dest);\n  ...\n  422  CGLM_INLINE\n  423  float\n  424: glm_mat4_trace(mat4 m) {\n  425    return m[0][0] + m[1][1] + m[2][2] + m[3][3];\n  426  }\n  ...\n  435  CGLM_INLINE\n  436  float\n  437: glm_mat4_trace3(mat4 m) {\n  438    return m[0][0] + m[1][1] + m[2][2];\n  439  }\n  440  \n  441  /*!\n  442:  * @brief convert mat4's rotation part to quaternion\n  443   *\n  444   * @param[in]  m    affine matrix\n  ...\n  447  CGLM_INLINE\n  448  void\n  449: glm_mat4_quat(mat4 m, versor dest) {\n  450    float trace, r, rinv;\n  451  \n  ...\n  489  \n  490  /*!\n  491:  * @brief multiply vector with mat4\n  492   *\n  493   * actually the result is vec4, after multiplication the last component\n  494   * is trimmed. if you need it don't use this func.\n  495   *\n  496:  * @param[in]  m    mat4(affine transform)\n  497   * @param[in]  v    vec3\n  498   * @param[in]  last 4th item to make it vec4\n  ...\n  501  CGLM_INLINE\n  502  void\n  503: glm_mat4_mulv3(mat4 m, vec3 v, float last, vec3 dest) {\n  504    vec4 res;\n  505    glm_vec4(v, last, res);\n  ...\n  509  \n  510  /*!\n  511:  * @brief transpose mat4 and store in dest\n  512   *\n  513   * source matrix will not be transposed unless dest is m\n  ...\n  518  CGLM_INLINE\n  519  void\n  520: glm_mat4_transpose_to(mat4 m, mat4 dest) {\n  521  #if defined(__wasm__) && defined(__wasm_simd128__)\n  522    glm_mat4_transp_wasm(m, dest);\n  ...\n  538  \n  539  /*!\n  540:  * @brief transpose mat4 and store result in same matrix\n  541   *\n  542   * @param[in, out] m source and dest\n  ...\n  544  CGLM_INLINE\n  545  void\n  546: glm_mat4_transpose(mat4 m) {\n  547  #if defined(__wasm__) && defined(__wasm_simd128__)\n  548    glm_mat4_transp_wasm(m, m);\n  ...\n  552    glm_mat4_transp_neon(m, m);\n  553  #else\n  554:   mat4 d;\n  555    glm_mat4_transpose_to(m, d);\n  556    glm_mat4_ucopy(d, m);\n  ...\n  568  CGLM_INLINE\n  569  void\n  570: glm_mat4_scale_p(mat4 m, float s) {\n  571    m[0][0] *= s; m[0][1] *= s; m[0][2] *= s; m[0][3] *= s;\n  572    m[1][0] *= s; m[1][1] *= s; m[1][2] *= s; m[1][3] *= s;\n  ...\n  585  CGLM_INLINE\n  586  void\n  587: glm_mat4_scale(mat4 m, float s) {\n  588  #if defined(__wasm__) && defined(__wasm_simd128__)\n  589    glm_mat4_scale_wasm(m, s);\n  ...\n  600  \n  601  /*!\n  602:  * @brief mat4 determinant\n  603   *\n  604   * @param[in] mat matrix\n  ...\n  608  CGLM_INLINE\n  609  float\n  610: glm_mat4_det(mat4 mat) {\n  611  #if defined(__wasm__) && defined(__wasm_simd128__)\n  612    return glm_mat4_det_wasm(mat);\n  ...\n  638  \n  639  /*!\n  640:  * @brief inverse mat4 and store in dest\n  641   *\n  642   * @param[in]  mat  matrix\n  ...\n  645  CGLM_INLINE\n  646  void\n  647: glm_mat4_inv(mat4 mat, mat4 dest) {\n  648  #if defined( __SSE__ ) || defined( __SSE2__ )\n  649    glm_mat4_inv_sse2(mat, dest);\n  ...\n  695  \n  696  /*!\n  697:  * @brief inverse mat4 and store in dest\n  698   *\n  699   * this func uses reciprocal approximation without extra corrections\n  ...\n  708  CGLM_INLINE\n  709  void\n  710: glm_mat4_inv_fast(mat4 mat, mat4 dest) {\n  711  #if defined(__wasm__) && defined(__wasm_simd128__)\n  712    glm_mat4_inv_fast_wasm(mat, dest);\n  ...\n  727  CGLM_INLINE\n  728  void\n  729: glm_mat4_swap_col(mat4 mat, int col1, int col2) {\n  730    CGLM_ALIGN(16) vec4 tmp;\n  731    glm_vec4_copy(mat[col1], tmp);\n  ...\n  743  CGLM_INLINE\n  744  void\n  745: glm_mat4_swap_row(mat4 mat, int row1, int row2) {\n  746    CGLM_ALIGN(16) vec4 tmp;\n  747    tmp[0] = mat[0][row1];\n  ...\n  777  CGLM_INLINE\n  778  float\n  779: glm_mat4_rmc(vec4 r, mat4 m, vec4 c) {\n  780    vec4 tmp;\n  781    glm_mat4_mulv(m, c, tmp);\n  ...\n  784  \n  785  /*!\n  786:  * @brief Create mat4 matrix from pointer\n  787   *\n  788   * @param[in]  src  pointer to an array of floats\n  ...\n  791  CGLM_INLINE\n  792  void\n  793: glm_mat4_make(const float * __restrict src, mat4 dest) {\n  794    dest[0][0] = src[0];   dest[1][0] = src[4];\n  795    dest[0][1] = src[1];   dest[1][1] = src[5];\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\project.h:\n   12  #include \"vec3.h\"\n   13  #include \"vec4.h\"\n   14: #include \"mat4.h\"\n   15  \n   16  #ifndef CGLM_CLIPSPACE_INCLUDE_ALL\n   ..\n   53  CGLM_INLINE\n   54  void\n   55: glm_unprojecti(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {\n   56  #if CGLM_CONFIG_CLIP_CONTROL & CGLM_CLIP_CONTROL_ZO_BIT\n   57    glm_unprojecti_zo(pos, invMat, vp, dest);\n   ..\n   87  CGLM_INLINE\n   88  void\n   89: glm_unproject(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n   90:   mat4 inv;\n   91    glm_mat4_inv(m, inv);\n   92    glm_unprojecti(pos, inv, vp, dest);\n   ..\n  107  CGLM_INLINE\n  108  void\n  109: glm_project(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n  110  #if CGLM_CONFIG_CLIP_CONTROL & CGLM_CLIP_CONTROL_ZO_BIT\n  111    glm_project_zo(pos, m, vp, dest);\n  ...\n  129  CGLM_INLINE\n  130  float\n  131: glm_project_z(vec3 v, mat4 m) {\n  132  #if CGLM_CONFIG_CLIP_CONTROL & CGLM_CLIP_CONTROL_ZO_BIT\n  133    return glm_project_z_zo(v, m);\n  ...\n  147  CGLM_INLINE\n  148  void\n  149: glm_pickmatrix(vec2 center, vec2 size, vec4 vp, mat4 dest) {\n  150:   mat4 res;\n  151    vec3 v;\n  152  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\quat.h:\n   33     CGLM_INLINE void glm_quat_axis(versor q, vec3 dest);\n   34     CGLM_INLINE void glm_quat_mul(versor p, versor q, versor dest);\n   35:    CGLM_INLINE void glm_quat_mat4(versor q, mat4 dest);\n   36:    CGLM_INLINE void glm_quat_mat4t(versor q, mat4 dest);\n   37     CGLM_INLINE void glm_quat_mat3(versor q, mat3 dest);\n   38     CGLM_INLINE void glm_quat_mat3t(versor q, mat3 dest);\n   ..\n   41     CGLM_INLINE void glm_quat_slerp(versor q, versor r, float t, versor dest);\n   42     CGLM_INLINE void glm_quat_nlerp(versor q, versor r, float t, versor dest);\n   43:    CGLM_INLINE void glm_quat_look(vec3 eye, versor ori, mat4 dest);\n   44     CGLM_INLINE void glm_quat_for(vec3 dir, vec3 fwd, vec3 up, versor dest);\n   45     CGLM_INLINE void glm_quat_forp(vec3 from,\n   ..\n   49                                    versor dest);\n   50     CGLM_INLINE void glm_quat_rotatev(versor q, vec3 v, vec3 dest);\n   51:    CGLM_INLINE void glm_quat_rotate(mat4 m, versor q, mat4 dest);\n   52     CGLM_INLINE void glm_quat_make(float * restrict src, versor dest);\n   53   */\n   ..\n   59  #include \"vec3.h\"\n   60  #include \"vec4.h\"\n   61: #include \"mat4.h\"\n   62  #include \"mat3.h\"\n   63  #include \"affine-mat.h\"\n   ..\n  474  \n  475  /*!\n  476:  * @brief convert quaternion to mat4\n  477   *\n  478   * @param[in]   q     quaternion\n  ...\n  481  CGLM_INLINE\n  482  void\n  483: glm_quat_mat4(versor q, mat4 dest) {\n  484    float w, x, y, z,\n  485          xx, yy, zz,\n  ...\n  521  \n  522  /*!\n  523:  * @brief convert quaternion to mat4 (transposed)\n  524   *\n  525   * @param[in]   q     quaternion\n  ...\n  528  CGLM_INLINE\n  529  void\n  530: glm_quat_mat4t(versor q, mat4 dest) {\n  531    float w, x, y, z,\n  532          xx, yy, zz,\n  ...\n  752  CGLM_INLINE\n  753  void\n  754: glm_quat_look(vec3 eye, versor ori, mat4 dest) {\n  755    /* orientation */\n  756    glm_quat_mat4t(ori, dest);\n  ...\n  838  CGLM_INLINE\n  839  void\n  840: glm_quat_rotate(mat4 m, versor q, mat4 dest) {\n  841:   CGLM_ALIGN_MAT mat4 rot;\n  842    glm_quat_mat4(q, rot);\n  843    glm_mul_rot(m, rot, dest);\n  ...\n  853  CGLM_INLINE\n  854  void\n  855: glm_quat_rotate_at(mat4 m, versor q, vec3 pivot) {\n  856    CGLM_ALIGN(8) vec3 pivotInv;\n  857  \n  ...\n  877  CGLM_INLINE\n  878  void\n  879: glm_quat_rotate_atm(mat4 m, versor q, vec3 pivot) {\n  880    CGLM_ALIGN(8) vec3 pivotInv;\n  881  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\sphere.h:\n   10  \n   11  #include \"common.h\"\n   12: #include \"mat4.h\"\n   13  \n   14  /*\n   ..\n   41  CGLM_INLINE\n   42  void\n   43: glm_sphere_transform(vec4 s, mat4 m, vec4 dest) {\n   44    glm_mat4_mulv3(m, s, 1.0f, dest);\n   45    dest[3] = s[3];\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct.h:\n   26  #include \"struct/mat3x2.h\"\n   27  #include \"struct/mat3x4.h\"\n   28: #include \"struct/mat4.h\"\n   29  #include \"struct/mat4x2.h\"\n   30  #include \"struct/mat4x3.h\"\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\types-struct.h:\n  257  \n  258  typedef union CGLM_ALIGN_MAT mat4s {\n  259:   mat4  raw;\n  260    vec4s col[4];\n  261  #if CGLM_USE_ANONYMOUS_STRUCT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\types.h:\n   87  typedef vec3                    mat2x3[2];  /* [col (2), row (3)] */\n   88  typedef vec4                    mat2x4[2];  /* [col (2), row (4)] */\n   89: typedef CGLM_ALIGN_MAT    vec4  mat4[4];\n   90  typedef vec2                    mat4x2[4];  /* [col (4), row (2)] */\n   91  typedef vec3                    mat4x3[4];  /* [col (4), row (3)] */\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\vec3.h:\n   59     CGLM_INLINE float glm_vec3_angle(vec3 a, vec3 b);\n   60     CGLM_INLINE void  glm_vec3_rotate(vec3 v, float angle, vec3 axis);\n   61:    CGLM_INLINE void  glm_vec3_rotate_m4(mat4 m, vec3 v, vec3 dest);\n   62     CGLM_INLINE void  glm_vec3_rotate_m3(mat3 m, vec3 v, vec3 dest);\n   63     CGLM_INLINE void  glm_vec3_proj(vec3 a, vec3 b, vec3 dest);\n   ..\n  785  CGLM_INLINE\n  786  void\n  787: glm_vec3_rotate_m4(mat4 m, vec3 v, vec3 dest) {\n  788    vec4 x, y, z, res;\n  789  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\aabb2d.h:\n   14  #include \"vec2.h\"\n   15  #include \"vec4.h\"\n   16: #include \"mat4.h\"\n   17  \n   18  /* api definition */\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\affine-mat.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE mat4s glms_mul(mat4 m1, mat4 m2);\n   11:    CGLM_INLINE mat4s glms_mul_rot(mat4 m1, mat4 m2);\n   12     CGLM_INLINE mat4s glms_inv_tr();\n   13   */\n   ..\n   21  #include \"vec3.h\"\n   22  #include \"vec4.h\"\n   23: #include \"mat4.h\"\n   24  \n   25  /*!\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\affine-post.h:\n   28  #include \"vec3.h\"\n   29  #include \"vec4.h\"\n   30: #include \"mat4.h\"\n   31  \n   32  /*!\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\affine-pre.h:\n   28  #include \"vec3.h\"\n   29  #include \"vec4.h\"\n   30: #include \"mat4.h\"\n   31  \n   32  /*!\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\affine.h:\n   39  #include \"vec3.h\"\n   40  #include \"vec4.h\"\n   41: #include \"mat4.h\"\n   42  #include \"affine-mat.h\"\n   43  \n   ..\n  168  \n  169  /*!\n  170:  * @brief decompose rotation matrix (mat4) and scale vector [Sx, Sy, Sz]\n  171   *        DON'T pass projected matrix here\n  172   *\n  ...\n  187   * @param[in]  m affine transform\n  188   * @param[out] t translation vector\n  189:  * @param[out] r rotation matrix (mat4)\n  190   * @param[out] s scaling vector [X, Y, Z]\n  191   */\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\box.h:\n   14  #include \"vec3.h\"\n   15  #include \"vec4.h\"\n   16: #include \"mat4.h\"\n   17  \n   18  /* api definition */\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\cam.h:\n  275   *\n  276   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n  277:  *       like glm_persp_move_far(prooj.raw, deltaFar) to avoid create new mat4\n  278   *       each time\n  279   *\n  ...\n  324   *\n  325   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n  326:  *       like glms_perspective_resize(proj.raw, aspect) to avoid create new mat4\n  327   *       each time\n  328   *\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\curve.h:\n   13  #include \"../curve.h\"\n   14  #include \"vec4.h\"\n   15: #include \"mat4.h\"\n   16  \n   17  /*!\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\frustum.h:\n   15  #include \"vec3.h\"\n   16  #include \"vec4.h\"\n   17: #include \"mat4.h\"\n   18  \n   19  /* you can override clip space coords\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\io.h:\n   25  #include \"../common.h\"\n   26  #include \"../io.h\"\n   27: #include \"mat4.h\"\n   28  \n   29  #include <stdio.h>\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\mat4.h:\n   51  #include \"../common.h\"\n   52  #include \"../types-struct.h\"\n   53: #include \"../mat4.h\"\n   54  #include \"vec4.h\"\n   55  #include \"vec3.h\"\n   56  \n   57  /* api definition */ \n   58: #define glms_mat4_(NAME) CGLM_STRUCTAPI(mat4, NAME)\n   59  \n   60  #define GLMS_MAT4_IDENTITY_INIT  {GLM_MAT4_IDENTITY_INIT}\n   ..\n  105   *\n  106   * // or\n  107:  * mat4 mat = GLM_MAT4_IDENTITY_INIT;\n  108   * @endcode\n  109   *\n  ...\n  151  \n  152  /*!\n  153:  * @brief copy upper-left of mat4 to mat3\n  154   *\n  155   * @param[in]  mat  source\n  ...\n  165  \n  166  /*!\n  167:  * @brief copy upper-left of mat4 to mat3 (transposed)\n  168   *\n  169   * the postfix t stands for transpose\n  ...\n  181  \n  182  /*!\n  183:  * @brief copy mat3 to mat4's upper-left\n  184   *\n  185   * @param[in]  mat  source\n  ...\n  200   *\n  201   * @code\n  202:  * mat4 m = GLM_MAT4_IDENTITY_INIT;\n  203   * r = glms_mat4_mul(m, m);\n  204   * @endcode\n  ...\n  217  \n  218  /*!\n  219:  * @brief mupliply N mat4 matrices and store result in dest\n  220   *\n  221   * this function lets you multiply multiple (more than two or more...) matrices\n  ...\n  226   * mat m1, m2, m3, m4, res;\n  227   *\n  228:  * res = glm_mat4_mulN((mat4 *[]){&m1, &m2, &m3, &m4}, 4);\n  229   * @endcode\n  230   *\n  231:  * @warning matrices parameter is pointer array not mat4 array!\n  232   *\n  233:  * @param[in]  matrices mat4 * array\n  234   * @param[in]  len      matrices count\n  235   * @returns             result matrix\n  ...\n  249  \n  250  /*!\n  251:  * @brief multiply mat4 with vec4 (column vector) and store in dest vector\n  252   *\n  253:  * @param[in]  m    mat4 (left)\n  254   * @param[in]  v    vec4 (right, column vector)\n  255   * @returns         vec4 (result, column vector)\n  ...\n  290  \n  291  /*!\n  292:  * @brief convert mat4's rotation part to quaternion\n  293   *\n  294   * @param[in]  m    affine matrix\n  ...\n  304  \n  305  /*!\n  306:  * @brief multiply vector with mat4\n  307   *\n  308:  * @param[in]  m    mat4(affine transform)\n  309   * @param[in]  v    vec3\n  310   * @param[in]  last 4th item to make it vec4\n  ...\n  320  \n  321  /*!\n  322:  * @brief transpose mat4 and store result in same matrix\n  323   *\n  324   * @param[in] m source\n  ...\n  365  \n  366  /*!\n  367:  * @brief mat4 determinant\n  368   *\n  369   * @param[in] mat matrix\n  ...\n  378  \n  379  /*!\n  380:  * @brief inverse mat4 and store in dest\n  381   *\n  382   * @param[in]  mat  matrix\n  ...\n  392  \n  393  /*!\n  394:  * @brief inverse mat4 and store in dest\n  395   *\n  396   * this func uses reciprocal approximation without extra corrections\n  ...\n  462  \n  463  /*!\n  464:  * @brief Create mat4 matrix from pointer\n  465   *\n  466   * @param[in]  src  pointer to an array of floats\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\project.h:\n   14  #include \"vec3.h\"\n   15  #include \"vec4.h\"\n   16: #include \"mat4.h\"\n   17  \n   18  #ifndef CGLM_CLIPSPACE_INCLUDE_ALL\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\quat.h:\n  334  \n  335  /*!\n  336:  * @brief convert quaternion to mat4\n  337   *\n  338   * @param[in]   q     quaternion\n  ...\n  341  CGLM_INLINE\n  342  mat4s\n  343: glms_quat_(mat4)(versors q) {\n  344    mat4s dest;\n  345    glm_quat_mat4(q.raw, dest.raw);\n  ...\n  348  \n  349  /*!\n  350:  * @brief convert quaternion to mat4 (transposed)\n  351   *\n  352   * @param[in]   q     quaternion\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\sphere.h:\n   12  #include \"../types-struct.h\"\n   13  #include \"../sphere.h\"\n   14: #include \"mat4.h\"\n   15  \n   16  /*\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\clipspace\\persp_lh_no.h:\n   90   *\n   91   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n   92:  *       like glms_persp_move_far_lh_no(prooj.raw, deltaFar) to avoid create new mat4\n   93   *       each time\n   94   *       \n   ..\n  130   *\n  131   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n  132:  *       like glm_perspective_resize_lh_no(proj.raw, aspect) to avoid create new mat4\n  133   *       each time\n  134   *       \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\clipspace\\persp_lh_zo.h:\n   90   *\n   91   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n   92:  *       like glms_persp_move_far_lh_zo(prooj.raw, deltaFar) to avoid create new mat4\n   93   *       each time\n   94   *\n   ..\n  130   *\n  131   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n  132:  *       like glms_perspective_resize_lh_zo(proj.raw, aspect) to avoid create new mat4\n  133   *       each time\n  134   *       \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\clipspace\\persp_rh_no.h:\n   90   *\n   91   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n   92:  *       like glms_persp_move_far_rh_no(prooj.raw, deltaFar) to avoid create new mat4\n   93   *       each time\n   94   *       s\n   ..\n  130   *\n  131   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n  132:  *       like glm_perspective_resize_rh_no(proj.raw, aspect) to avoid create new mat4\n  133   *       each time\n  134   *       \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\struct\\clipspace\\persp_rh_zo.h:\n   90   *\n   91   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n   92:  *       like glms_persp_move_far_rh_zo(prooj.raw, deltaFar) to avoid create new mat4\n   93   *       each time\n   94   *       \n   ..\n  130   *\n  131   * NOTE: if you dodn't want to create new matrix then use array api on struct.raw\n  132:  *       like glm_perspective_resize_rh_zo(proj.raw, aspect) to avoid create new mat4\n  133   *       each time\n  134   *       \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\wasm\\affine.h:\n   15  CGLM_INLINE\n   16  void\n   17: glm_mul_wasm(mat4 m1, mat4 m2, mat4 dest) {\n   18    /* D = R * L (Column-Major) */\n   19    glmm_128 l, r0, r1, r2, r3, v0, v1, v2, v3;\n   ..\n   53  CGLM_INLINE\n   54  void\n   55: glm_mul_rot_wasm(mat4 m1, mat4 m2, mat4 dest) {\n   56    /* D = R * L (Column-Major) */\n   57  \n   ..\n   85  CGLM_INLINE\n   86  void\n   87: glm_inv_tr_wasm(mat4 mat) {\n   88    glmm_128 r0, r1, r2, r3, x0, x1, x2, x3, x4, x5;\n   89  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\wasm\\mat4.h:\n   17  CGLM_INLINE\n   18  void\n   19: glm_mat4_scale_wasm(mat4 m, float s) {\n   20    glmm_128 x0;\n   21    x0 = wasm_f32x4_splat(s);\n   ..\n   29  CGLM_INLINE\n   30  void\n   31: glm_mat4_transp_wasm(mat4 m, mat4 dest) {\n   32    glmm_128 r0, r1, r2, r3, tmp0, tmp1, tmp2, tmp3;\n   33  \n   ..\n   59  CGLM_INLINE\n   60  void\n   61: glm_mat4_mul_wasm(mat4 m1, mat4 m2, mat4 dest) {\n   62    /* D = R * L (Column-Major) */\n   63  \n   ..\n  101  CGLM_INLINE\n  102  void\n  103: glm_mat4_mulv_wasm(mat4 m, vec4 v, vec4 dest) {\n  104    glmm_128 x0, x1, m0, m1, m2, m3, v0, v1, v2, v3;\n  105  \n  ...\n  125  CGLM_INLINE\n  126  float\n  127: glm_mat4_det_wasm(mat4 mat) {\n  128    glmm_128 r0, r1, r2, r3, x0, x1, x2;\n  129  \n  ...\n  173  CGLM_INLINE\n  174  void\n  175: glm_mat4_inv_fast_wasm(mat4 mat, mat4 dest) {\n  176    glmm_128 r0, r1, r2, r3,\n  177           v0, v1, v2, v3,\n  ...\n  314  CGLM_INLINE\n  315  void\n  316: glm_mat4_inv_wasm(mat4 mat, mat4 dest) {\n  317    glmm_128 r0, r1, r2, r3,\n  318           v0, v1, v2, v3,\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\sse2\\affine.h:\n   15  CGLM_INLINE\n   16  void\n   17: glm_mul_sse2(mat4 m1, mat4 m2, mat4 dest) {\n   18    /* D = R * L (Column-Major) */\n   19    glmm_128 l, r0, r1, r2, r3, v0, v1, v2, v3;\n   ..\n   53  CGLM_INLINE\n   54  void\n   55: glm_mul_rot_sse2(mat4 m1, mat4 m2, mat4 dest) {\n   56    /* D = R * L (Column-Major) */\n   57  \n   ..\n   85  CGLM_INLINE\n   86  void\n   87: glm_inv_tr_sse2(mat4 mat) {\n   88    __m128 r0, r1, r2, r3, x0, x1, x2, x3, x4, x5;\n   89  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\sse2\\mat4.h:\n   17  CGLM_INLINE\n   18  void\n   19: glm_mat4_scale_sse2(mat4 m, float s) {\n   20    __m128 x0;\n   21    x0 = _mm_set1_ps(s);\n   ..\n   29  CGLM_INLINE\n   30  void\n   31: glm_mat4_transp_sse2(mat4 m, mat4 dest) {\n   32    __m128 r0, r1, r2, r3;\n   33  \n   ..\n   47  CGLM_INLINE\n   48  void\n   49: glm_mat4_mul_sse2(mat4 m1, mat4 m2, mat4 dest) {\n   50    /* D = R * L (Column-Major) */\n   51  \n   ..\n   89  CGLM_INLINE\n   90  void\n   91: glm_mat4_mulv_sse2(mat4 m, vec4 v, vec4 dest) {\n   92    __m128 x0, x1, m0, m1, m2, m3, v0, v1, v2, v3;\n   93  \n   ..\n  113  CGLM_INLINE\n  114  float\n  115: glm_mat4_det_sse2(mat4 mat) {\n  116    __m128 r0, r1, r2, r3, x0, x1, x2;\n  117  \n  ...\n  161  CGLM_INLINE\n  162  void\n  163: glm_mat4_inv_fast_sse2(mat4 mat, mat4 dest) {\n  164    __m128 r0, r1, r2, r3,\n  165           v0, v1, v2, v3,\n  ...\n  298  CGLM_INLINE\n  299  void\n  300: glm_mat4_inv_sse2(mat4 mat, mat4 dest) {\n  301    __m128 r0, r1, r2, r3,\n  302           v0, v1, v2, v3,\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\neon\\affine.h:\n   15  CGLM_INLINE\n   16  void\n   17: glm_mul_neon(mat4 m1, mat4 m2, mat4 dest) {\n   18    /* D = R * L (Column-Major) */\n   19  \n   ..\n   53  CGLM_INLINE\n   54  void\n   55: glm_mul_rot_neon(mat4 m1, mat4 m2, mat4 dest) {\n   56    /* D = R * L (Column-Major) */\n   57  \n   ..\n   85  CGLM_INLINE\n   86  void\n   87: glm_inv_tr_neon(mat4 mat) {\n   88    float32x4x4_t vmat;\n   89    glmm_128      r0, r1, r2, x0;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\neon\\mat4.h:\n   15  CGLM_INLINE\n   16  void\n   17: glm_mat4_scale_neon(mat4 m, float s) {\n   18    float32x4_t v0;\n   19    \n   ..\n   28  CGLM_INLINE\n   29  void\n   30: glm_mat4_transp_neon(mat4 m, mat4 dest) {\n   31    float32x4x4_t vmat;\n   32    \n   ..\n   41  CGLM_INLINE\n   42  void\n   43: glm_mat4_mul_neon(mat4 m1, mat4 m2, mat4 dest) {\n   44    /* D = R * L (Column-Major) */\n   45  \n   ..\n   83  CGLM_INLINE\n   84  void\n   85: glm_mat4_mulv_neon(mat4 m, vec4 v, vec4 dest) {\n   86    float32x4_t l0, l1, l2, l3;\n   87    float32x2_t vlo, vhi;\n   ..\n  105  CGLM_INLINE\n  106  float\n  107: glm_mat4_det_neon(mat4 mat) {\n  108    float32x4_t   r0, r1, r2, r3, x0, x1, x2;\n  109    float32x2_t   ij, op, mn, kl, nn, mm, jj, ii, gh, ef, t12, t34;\n  ...\n  175  CGLM_INLINE\n  176  void\n  177: glm_mat4_inv_neon(mat4 mat, mat4 dest) {\n  178    float32x4_t   r0, r1, r2, r3,\n  179                  v0, v1, v2, v3,\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\avx\\affine.h:\n   17  CGLM_INLINE\n   18  void\n   19: glm_mul_avx(mat4 m1, mat4 m2, mat4 dest) {\n   20    /* D = R * L (Column-Major) */\n   21  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\simd\\avx\\mat4.h:\n   17  CGLM_INLINE\n   18  void\n   19: glm_mat4_scale_avx(mat4 m, float s) {\n   20    __m256 y0;\n   21    y0 = _mm256_set1_ps(s);\n   ..\n   27  CGLM_INLINE\n   28  void\n   29: glm_mat4_mul_avx(mat4 m1, mat4 m2, mat4 dest) {\n   30    /* D = R * L (Column-Major) */\n   31  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\ortho_lh_no.h:\n   11                                      float bottom,  float top,\n   12                                      float nearZ, float farZ,\n   13:                                     mat4  dest)\n   14:    CGLM_INLINE void glm_ortho_aabb_lh_no(vec3 box[2], mat4 dest)\n   15     CGLM_INLINE void glm_ortho_aabb_p_lh_no(vec3 box[2],\n   16                                             float padding,\n   17:                                            mat4 dest)\n   18     CGLM_INLINE void glm_ortho_aabb_pz_lh_no(vec3 box[2],\n   19                                              float padding,\n   20:                                             mat4 dest)\n   21     CGLM_INLINE void glm_ortho_default_lh_no(float aspect,\n   22:                                             mat4 dest)\n   23     CGLM_INLINE void glm_ortho_default_s_lh_no(float aspect,\n   24                                                float size,\n   25:                                               mat4 dest)\n   26   */\n   27  \n   ..\n   31  #include \"../common.h\"\n   32  #include \"../plane.h\"\n   33: #include \"../mat4.h\"\n   34  \n   35  /*!\n   ..\n   51                  float bottom,  float top,\n   52                  float nearZ, float farZ,\n   53:                 mat4  dest) {\n   54    float rl, tb, fn;\n   55  \n   ..\n   81  CGLM_INLINE\n   82  void\n   83: glm_ortho_aabb_lh_no(vec3 box[2], mat4 dest) {\n   84    glm_ortho_lh_no(box[0][0],  box[1][0],\n   85                    box[0][1],  box[1][1],\n   ..\n  101  CGLM_INLINE\n  102  void\n  103: glm_ortho_aabb_p_lh_no(vec3 box[2], float padding, mat4 dest) {\n  104    glm_ortho_lh_no(box[0][0] - padding,    box[1][0] + padding,\n  105                    box[0][1] - padding,    box[1][1] + padding,\n  ...\n  121  CGLM_INLINE\n  122  void\n  123: glm_ortho_aabb_pz_lh_no(vec3 box[2], float padding, mat4 dest) {\n  124    glm_ortho_lh_no(box[0][0],              box[1][0],\n  125                    box[0][1],              box[1][1],\n  ...\n  138  CGLM_INLINE\n  139  void\n  140: glm_ortho_default_lh_no(float aspect, mat4 dest) {\n  141    if (aspect >= 1.0f) {\n  142      glm_ortho_lh_no(-aspect, aspect, -1.0f, 1.0f, -100.0f, 100.0f, dest);\n  ...\n  160  CGLM_INLINE\n  161  void\n  162: glm_ortho_default_s_lh_no(float aspect, float size, mat4 dest) {\n  163    if (aspect >= 1.0f) {\n  164      glm_ortho_lh_no(-size * aspect,\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\ortho_lh_zo.h:\n   11                                      float bottom,  float top,\n   12                                      float nearZ, float farZ,\n   13:                                     mat4  dest)\n   14:    CGLM_INLINE void glm_ortho_aabb_lh_zo(vec3 box[2], mat4 dest)\n   15     CGLM_INLINE void glm_ortho_aabb_p_lh_zo(vec3 box[2],\n   16                                             float padding,\n   17:                                            mat4 dest)\n   18     CGLM_INLINE void glm_ortho_aabb_pz_lh_zo(vec3 box[2],\n   19                                              float padding,\n   20:                                             mat4 dest)\n   21     CGLM_INLINE void glm_ortho_default_lh_zo(float aspect,\n   22:                                             mat4 dest)\n   23     CGLM_INLINE void glm_ortho_default_s_lh_zo(float aspect,\n   24                                                float size,\n   25:                                               mat4 dest)\n   26   */\n   27  \n   ..\n   31  #include \"../common.h\"\n   32  #include \"../plane.h\"\n   33: #include \"../mat4.h\"\n   34  \n   35  /*!\n   ..\n   50                  float bottom,  float top,\n   51                  float nearZ, float farZ,\n   52:                 mat4  dest) {\n   53    float rl, tb, fn;\n   54  \n   ..\n   79  CGLM_INLINE\n   80  void\n   81: glm_ortho_aabb_lh_zo(vec3 box[2], mat4 dest) {\n   82    glm_ortho_lh_zo(box[0][0],  box[1][0],\n   83                    box[0][1],  box[1][1],\n   ..\n   98  CGLM_INLINE\n   99  void\n  100: glm_ortho_aabb_p_lh_zo(vec3 box[2], float padding, mat4 dest) {\n  101    glm_ortho_lh_zo(box[0][0] - padding,    box[1][0] + padding,\n  102                    box[0][1] - padding,    box[1][1] + padding,\n  ...\n  117  CGLM_INLINE\n  118  void\n  119: glm_ortho_aabb_pz_lh_zo(vec3 box[2], float padding, mat4 dest) {\n  120    glm_ortho_lh_zo(box[0][0],              box[1][0],\n  121                    box[0][1],              box[1][1],\n  ...\n  133  CGLM_INLINE\n  134  void\n  135: glm_ortho_default_lh_zo(float aspect, mat4 dest) {\n  136    if (aspect >= 1.0f) {\n  137      glm_ortho_lh_zo(-aspect, aspect, -1.0f, 1.0f, -100.0f, 100.0f, dest);\n  ...\n  154  CGLM_INLINE\n  155  void\n  156: glm_ortho_default_s_lh_zo(float aspect, float size, mat4 dest) {\n  157    if (aspect >= 1.0f) {\n  158      glm_ortho_lh_zo(-size * aspect,\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\ortho_rh_no.h:\n   11                                      float bottom,  float top,\n   12                                      float nearZ, float farZ,\n   13:                                     mat4  dest)\n   14:    CGLM_INLINE void glm_ortho_aabb_rh_no(vec3 box[2], mat4 dest)\n   15     CGLM_INLINE void glm_ortho_aabb_p_rh_no(vec3 box[2],\n   16                                             float padding,\n   17:                                            mat4 dest)\n   18     CGLM_INLINE void glm_ortho_aabb_pz_rh_no(vec3 box[2],\n   19                                              float padding,\n   20:                                             mat4 dest)\n   21     CGLM_INLINE void glm_ortho_default_rh_no(float aspect,\n   22:                                             mat4 dest)\n   23     CGLM_INLINE void glm_ortho_default_s_rh_no(float aspect,\n   24                                                float size,\n   25:                                               mat4 dest)\n   26   */\n   27  \n   ..\n   31  #include \"../common.h\"\n   32  #include \"../plane.h\"\n   33: #include \"../mat4.h\"\n   34  \n   35  /*!\n   ..\n   51                  float bottom,  float top,\n   52                  float nearZ, float farZ,\n   53:                 mat4  dest) {\n   54    float rl, tb, fn;\n   55  \n   ..\n   81  CGLM_INLINE\n   82  void\n   83: glm_ortho_aabb_rh_no(vec3 box[2], mat4 dest) {\n   84    glm_ortho_rh_no(box[0][0],  box[1][0],\n   85                    box[0][1],  box[1][1],\n   ..\n  101  CGLM_INLINE\n  102  void\n  103: glm_ortho_aabb_p_rh_no(vec3 box[2], float padding, mat4 dest) {\n  104    glm_ortho_rh_no(box[0][0] - padding,    box[1][0] + padding,\n  105                    box[0][1] - padding,    box[1][1] + padding,\n  ...\n  121  CGLM_INLINE\n  122  void\n  123: glm_ortho_aabb_pz_rh_no(vec3 box[2], float padding, mat4 dest) {\n  124    glm_ortho_rh_no(box[0][0],              box[1][0],\n  125                    box[0][1],              box[1][1],\n  ...\n  138  CGLM_INLINE\n  139  void\n  140: glm_ortho_default_rh_no(float aspect, mat4 dest) {\n  141    if (aspect >= 1.0f) {\n  142      glm_ortho_rh_no(-aspect, aspect, -1.0f, 1.0f, -100.0f, 100.0f, dest);\n  ...\n  160  CGLM_INLINE\n  161  void\n  162: glm_ortho_default_s_rh_no(float aspect, float size, mat4 dest) {\n  163    if (aspect >= 1.0f) {\n  164      glm_ortho_rh_no(-size * aspect,\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\ortho_rh_zo.h:\n   11                                      float bottom,  float top,\n   12                                      float nearZ, float farZ,\n   13:                                     mat4  dest)\n   14:    CGLM_INLINE void glm_ortho_aabb_rh_zo(vec3 box[2], mat4 dest)\n   15     CGLM_INLINE void glm_ortho_aabb_p_rh_zo(vec3 box[2],\n   16                                             float padding,\n   17:                                            mat4 dest)\n   18     CGLM_INLINE void glm_ortho_aabb_pz_rh_zo(vec3 box[2],\n   19                                              float padding,\n   20:                                             mat4 dest)\n   21     CGLM_INLINE void glm_ortho_default_rh_zo(float aspect,\n   22:                                             mat4 dest)\n   23     CGLM_INLINE void glm_ortho_default_s_rh_zo(float aspect,\n   24                                                float size,\n   25:                                               mat4 dest)\n   26   */\n   27  \n   ..\n   31  #include \"../common.h\"\n   32  #include \"../plane.h\"\n   33: #include \"../mat4.h\"\n   34  \n   35  /*!\n   ..\n   50                  float bottom,  float top,\n   51                  float nearZ, float farZ,\n   52:                 mat4  dest) {\n   53    float rl, tb, fn;\n   54  \n   ..\n   80  CGLM_INLINE\n   81  void\n   82: glm_ortho_aabb_rh_zo(vec3 box[2], mat4 dest) {\n   83    glm_ortho_rh_zo(box[0][0],  box[1][0],\n   84                    box[0][1],  box[1][1],\n   ..\n  100  CGLM_INLINE\n  101  void\n  102: glm_ortho_aabb_p_rh_zo(vec3 box[2], float padding, mat4 dest) {\n  103    glm_ortho_rh_zo(box[0][0] - padding,    box[1][0] + padding,\n  104                    box[0][1] - padding,    box[1][1] + padding,\n  ...\n  120  CGLM_INLINE\n  121  void\n  122: glm_ortho_aabb_pz_rh_zo(vec3 box[2], float padding, mat4 dest) {\n  123    glm_ortho_rh_zo(box[0][0],              box[1][0],\n  124                    box[0][1],              box[1][1],\n  ...\n  136  CGLM_INLINE\n  137  void\n  138: glm_ortho_default_rh_zo(float aspect, mat4 dest) {\n  139    if (aspect >= 1.0f) {\n  140      glm_ortho_rh_zo(-aspect, aspect, -1.0f, 1.0f, -100.0f, 100.0f, dest);\n  ...\n  158  CGLM_INLINE\n  159  void\n  160: glm_ortho_default_s_rh_zo(float aspect, float size, mat4 dest) {\n  161    if (aspect >= 1.0f) {\n  162      glm_ortho_rh_zo(-size * aspect,\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\persp.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void  glm_persp_decomp_far(mat4 proj, float *farZ)\n   11:    CGLM_INLINE float glm_persp_fovy(mat4 proj)\n   12:    CGLM_INLINE float glm_persp_aspect(mat4 proj)\n   13:    CGLM_INLINE void  glm_persp_sizes(mat4 proj, float fovy, vec4 dest)\n   14   */\n   15  \n   ..\n   19  #include \"../common.h\"\n   20  #include \"../plane.h\"\n   21: #include \"../mat4.h\"\n   22  \n   23  /*!\n   ..\n   31  CGLM_INLINE\n   32  float\n   33: glm_persp_fovy(mat4 proj) {\n   34    return 2.0f * atanf(1.0f / proj[1][1]);\n   35  }\n   ..\n   42  CGLM_INLINE\n   43  float\n   44: glm_persp_aspect(mat4 proj) {\n   45    return proj[1][1] / proj[0][0];\n   46  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\persp_lh_no.h:\n   11                                         float bottom,  float top,\n   12                                         float nearZ, float farZ,\n   13:                                        mat4  dest)\n   14     CGLM_INLINE void glm_perspective_lh_no(float fovy,\n   15                                            float aspect,\n   16                                            float nearZ,\n   17                                            float farZ,\n   18:                                           mat4  dest)\n   19:    CGLM_INLINE void glm_perspective_default_lh_no(float aspect, mat4 dest)\n   20:    CGLM_INLINE void glm_perspective_resize_lh_no(float aspect, mat4 proj)\n   21:    CGLM_INLINE void glm_persp_move_far_lh_no(mat4 proj,\n   22                                               float deltaFar)\n   23:    CGLM_INLINE void glm_persp_decomp_lh_no(mat4 proj,\n   24                                             float * __restrict nearZ,\n   25                                             float * __restrict farZ,\n   ..\n   28                                             float * __restrict left,\n   29                                             float * __restrict right)\n   30:   CGLM_INLINE void glm_persp_decompv_lh_no(mat4 proj,\n   31                                             float dest[6])\n   32:   CGLM_INLINE void glm_persp_decomp_x_lh_no(mat4 proj,\n   33                                              float * __restrict left,\n   34                                              float * __restrict right)\n   35:   CGLM_INLINE void glm_persp_decomp_y_lh_no(mat4 proj,\n   36                                              float * __restrict top,\n   37                                              float * __restrict bottom)\n   38:   CGLM_INLINE void glm_persp_decomp_z_lh_no(mat4 proj,\n   39                                              float * __restrict nearZ,\n   40                                              float * __restrict farZ)\n   41:   CGLM_INLINE void glm_persp_decomp_far_lh_no(mat4 proj, float * __restrict farZ)\n   42:   CGLM_INLINE void glm_persp_decomp_near_lh_no(mat4 proj, float * __restrict nearZ)\n   43:   CGLM_INLINE void glm_persp_sizes_lh_no(mat4 proj, float fovy, vec4 dest)\n   44   */\n   45  \n   ..\n   68                    float bottom,  float top,\n   69                    float nearZ, float farZ,\n   70:                   mat4  dest) {\n   71    float rl, tb, fn, nv;\n   72  \n   ..\n  104                        float nearZ,\n  105                        float farZ,\n  106:                       mat4  dest) {\n  107    float f, fn;\n  108  \n  ...\n  130  CGLM_INLINE\n  131  void\n  132: glm_perspective_default_lh_no(float aspect, mat4 dest) {\n  133    glm_perspective_lh_no(GLM_PI_4f, aspect, 0.01f, 100.0f, dest);\n  134  }\n  ...\n  145  CGLM_INLINE\n  146  void\n  147: glm_perspective_resize_lh_no(float aspect, mat4 proj) {\n  148    if (proj[0][0] == 0.0f)\n  149      return;\n  ...\n  164  CGLM_INLINE\n  165  void\n  166: glm_persp_move_far_lh_no(mat4 proj, float deltaFar) {\n  167    float fn, farZ, nearZ, p22, p32;\n  168  \n  ...\n  193  CGLM_INLINE\n  194  void\n  195: glm_persp_decomp_lh_no(mat4 proj,\n  196                         float * __restrict nearZ, float * __restrict farZ,\n  197                         float * __restrict top,   float * __restrict bottom,\n  ...\n  232  CGLM_INLINE\n  233  void\n  234: glm_persp_decompv_lh_no(mat4 proj, float dest[6]) {\n  235    glm_persp_decomp_lh_no(proj, &dest[0], &dest[1], &dest[2],\n  236                                 &dest[3], &dest[4], &dest[5]);\n  ...\n  249  CGLM_INLINE\n  250  void\n  251: glm_persp_decomp_x_lh_no(mat4 proj,\n  252                           float * __restrict left,\n  253                           float * __restrict right) {\n  ...\n  275  CGLM_INLINE\n  276  void\n  277: glm_persp_decomp_y_lh_no(mat4 proj,\n  278                           float * __restrict top,\n  279                           float * __restrict bottom) {\n  ...\n  301  CGLM_INLINE\n  302  void\n  303: glm_persp_decomp_z_lh_no(mat4 proj,\n  304                           float * __restrict nearZ,\n  305                           float * __restrict farZ) {\n  ...\n  323  CGLM_INLINE\n  324  void\n  325: glm_persp_decomp_far_lh_no(mat4 proj, float * __restrict farZ) {\n  326    *farZ = proj[3][2] / (-proj[2][2] + 1.0f);\n  327  }\n  ...\n  337  CGLM_INLINE\n  338  void\n  339: glm_persp_decomp_near_lh_no(mat4 proj, float * __restrict nearZ) {\n  340    *nearZ = proj[3][2] / (-proj[2][2] - 1.0f);\n  341  }\n  ...\n  352  CGLM_INLINE\n  353  void\n  354: glm_persp_sizes_lh_no(mat4 proj, float fovy, vec4 dest) {\n  355    float t, a, nearZ, farZ;\n  356  \n  ...\n  377  CGLM_INLINE\n  378  float\n  379: glm_persp_fovy_lh_no(mat4 proj) {\n  380    return glm_persp_fovy(proj);\n  381  }\n  ...\n  389  CGLM_INLINE\n  390  float\n  391: glm_persp_aspect_lh_no(mat4 proj) {\n  392    return glm_persp_aspect(proj);\n  393  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\persp_lh_zo.h:\n   11                                        float bottom,  float top,\n   12                                        float nearZ, float farZ,\n   13:                                       mat4  dest)\n   14     CGLM_INLINE void glm_perspective_lh_zo(float fovy,\n   15                                            float aspect,\n   16                                            float nearZ,\n   17                                            float farZ,\n   18:                                           mat4  dest)\n   19:    CGLM_INLINE void glm_perspective_default_lh_zo(float aspect, mat4 dest)\n   20:    CGLM_INLINE void glm_perspective_resize_lh_zo(float aspect, mat4 proj)\n   21:    CGLM_INLINE void glm_persp_move_far_lh_zo(mat4 proj,\n   22                                               float deltaFar)\n   23:    CGLM_INLINE void glm_persp_decomp_lh_zo(mat4 proj,\n   24                                             float * __restrict nearZ,\n   25                                             float * __restrict farZ,\n   ..\n   28                                             float * __restrict left,\n   29                                             float * __restrict right)\n   30:   CGLM_INLINE void glm_persp_decompv_lh_zo(mat4 proj,\n   31                                             float dest[6])\n   32:   CGLM_INLINE void glm_persp_decomp_x_lh_zo(mat4 proj,\n   33                                              float * __restrict left,\n   34                                              float * __restrict right)\n   35:   CGLM_INLINE void glm_persp_decomp_y_lh_zo(mat4 proj,\n   36                                              float * __restrict top,\n   37                                              float * __restrict bottom)\n   38:   CGLM_INLINE void glm_persp_decomp_z_lh_zo(mat4 proj,\n   39                                              float * __restrict nearZ,\n   40                                              float * __restrict farZ)\n   41:   CGLM_INLINE void glm_persp_decomp_far_lh_zo(mat4 proj, float * __restrict farZ)\n   42:   CGLM_INLINE void glm_persp_decomp_near_lh_zo(mat4 proj, float * __restrict nearZ)\n   43:   CGLM_INLINE void glm_persp_sizes_lh_zo(mat4 proj, float fovy, vec4 dest)\n   44   */\n   45  \n   ..\n   67                    float bottom,  float top,\n   68                    float nearZ, float farZ,\n   69:                   mat4  dest) {\n   70    float rl, tb, fn, nv;\n   71  \n   ..\n  102                        float nearZ,\n  103                        float farZ,\n  104:                       mat4  dest) {\n  105    float f, fn;\n  106  \n  ...\n  129  CGLM_INLINE\n  130  void\n  131: glm_persp_move_far_lh_zo(mat4 proj, float deltaFar) {\n  132    float fn, farZ, nearZ, p22, p32;\n  133  \n  ...\n  153  CGLM_INLINE\n  154  void\n  155: glm_perspective_default_lh_zo(float aspect, mat4 dest) {\n  156    glm_perspective_lh_zo(GLM_PI_4f, aspect, 0.01f, 100.0f, dest);\n  157  }\n  ...\n  167  CGLM_INLINE\n  168  void\n  169: glm_perspective_resize_lh_zo(float aspect, mat4 proj) {\n  170    if (proj[0][0] == 0.0f)\n  171      return;\n  ...\n  189  CGLM_INLINE\n  190  void\n  191: glm_persp_decomp_lh_zo(mat4 proj,\n  192                      float * __restrict nearZ, float * __restrict farZ,\n  193                      float * __restrict top,     float * __restrict bottom,\n  ...\n  228  CGLM_INLINE\n  229  void\n  230: glm_persp_decompv_lh_zo(mat4 proj, float dest[6]) {\n  231    glm_persp_decomp_lh_zo(proj, &dest[0], &dest[1], &dest[2],\n  232                                 &dest[3], &dest[4], &dest[5]);\n  ...\n  243  CGLM_INLINE\n  244  void\n  245: glm_persp_decomp_x_lh_zo(mat4 proj,\n  246                           float * __restrict left,\n  247                           float * __restrict right) {\n  ...\n  268  CGLM_INLINE\n  269  void\n  270: glm_persp_decomp_y_lh_zo(mat4 proj,\n  271                           float * __restrict top,\n  272                           float * __restrict bottom) {\n  ...\n  293  CGLM_INLINE\n  294  void\n  295: glm_persp_decomp_z_lh_zo(mat4 proj,\n  296                           float * __restrict nearZ,\n  297                           float * __restrict farZ) {\n  ...\n  315  CGLM_INLINE\n  316  void\n  317: glm_persp_decomp_far_lh_zo(mat4 proj, float * __restrict farZ) {\n  318    *farZ = proj[3][2] / (-proj[2][2] + 1.0f);\n  319  }\n  ...\n  329  CGLM_INLINE\n  330  void\n  331: glm_persp_decomp_near_lh_zo(mat4 proj, float * __restrict nearZ) {\n  332    *nearZ = proj[3][2] / -proj[2][2];\n  333  }\n  ...\n  344  CGLM_INLINE\n  345  void\n  346: glm_persp_sizes_lh_zo(mat4 proj, float fovy, vec4 dest) {\n  347    float t, a, nearZ, farZ;\n  348  \n  ...\n  369  CGLM_INLINE\n  370  float\n  371: glm_persp_fovy_lh_zo(mat4 proj) {\n  372    return glm_persp_fovy(proj);\n  373  }\n  ...\n  381  CGLM_INLINE\n  382  float\n  383: glm_persp_aspect_lh_zo(mat4 proj) {\n  384    return glm_persp_aspect(proj);\n  385  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\persp_rh_no.h:\n   11                                        float bottom,  float top,\n   12                                        float nearZ, float farZ,\n   13:                                       mat4  dest)\n   14     CGLM_INLINE void glm_perspective_rh_no(float fovy,\n   15                                            float aspect,\n   16                                            float nearZ,\n   17                                            float farZ,\n   18:                                           mat4  dest)\n   19:    CGLM_INLINE void glm_perspective_default_rh_no(float aspect, mat4 dest)\n   20:    CGLM_INLINE void glm_perspective_resize_rh_no(float aspect, mat4 proj)\n   21:    CGLM_INLINE void glm_persp_move_far_rh_no(mat4 proj,\n   22                                               float deltaFar)\n   23:    CGLM_INLINE void glm_persp_decomp_rh_no(mat4 proj,\n   24                                             float * __restrict nearZ,\n   25                                             float * __restrict farZ,\n   ..\n   28                                             float * __restrict left,\n   29                                             float * __restrict right)\n   30:   CGLM_INLINE void glm_persp_decompv_rh_no(mat4 proj,\n   31                                             float dest[6])\n   32:   CGLM_INLINE void glm_persp_decomp_x_rh_no(mat4 proj,\n   33                                              float * __restrict left,\n   34                                              float * __restrict right)\n   35:   CGLM_INLINE void glm_persp_decomp_y_rh_no(mat4 proj,\n   36                                              float * __restrict top,\n   37                                              float * __restrict bottom)\n   38:   CGLM_INLINE void glm_persp_decomp_z_rh_no(mat4 proj,\n   39                                              float * __restrict nearZ,\n   40                                              float * __restrict farZ)\n   41:   CGLM_INLINE void glm_persp_decomp_far_rh_no(mat4 proj, float * __restrict farZ)\n   42:   CGLM_INLINE void glm_persp_decomp_near_rh_no(mat4 proj, float * __restrict nearZ)\n   43:   CGLM_INLINE void glm_persp_sizes_rh_no(mat4 proj, float fovy, vec4 dest)\n   44   */\n   45  \n   ..\n   68                    float bottom,  float top,\n   69                    float nearZ, float farZ,\n   70:                   mat4  dest) {\n   71    float rl, tb, fn, nv;\n   72  \n   ..\n  104                        float nearZ,\n  105                        float farZ,\n  106:                       mat4  dest) {\n  107    float f, fn;\n  108  \n  ...\n  130  CGLM_INLINE\n  131  void\n  132: glm_perspective_default_rh_no(float aspect, mat4 dest) {\n  133    glm_perspective_rh_no(GLM_PI_4f, aspect, 0.01f, 100.0f, dest);\n  134  }\n  ...\n  145  CGLM_INLINE\n  146  void\n  147: glm_perspective_resize_rh_no(float aspect, mat4 proj) {\n  148    if (proj[0][0] == 0.0f)\n  149      return;\n  ...\n  164  CGLM_INLINE\n  165  void\n  166: glm_persp_move_far_rh_no(mat4 proj, float deltaFar) {\n  167    float fn, farZ, nearZ, p22, p32;\n  168  \n  ...\n  193  CGLM_INLINE\n  194  void\n  195: glm_persp_decomp_rh_no(mat4 proj,\n  196                         float * __restrict nearZ, float * __restrict farZ,\n  197                         float * __restrict top,     float * __restrict bottom,\n  ...\n  232  CGLM_INLINE\n  233  void\n  234: glm_persp_decompv_rh_no(mat4 proj, float dest[6]) {\n  235    glm_persp_decomp_rh_no(proj, &dest[0], &dest[1], &dest[2],\n  236                                 &dest[3], &dest[4], &dest[5]);\n  ...\n  249  CGLM_INLINE\n  250  void\n  251: glm_persp_decomp_x_rh_no(mat4 proj,\n  252                           float * __restrict left,\n  253                           float * __restrict right) {\n  ...\n  275  CGLM_INLINE\n  276  void\n  277: glm_persp_decomp_y_rh_no(mat4 proj,\n  278                           float * __restrict top,\n  279                           float * __restrict bottom) {\n  ...\n  301  CGLM_INLINE\n  302  void\n  303: glm_persp_decomp_z_rh_no(mat4 proj,\n  304                        float * __restrict nearZ,\n  305                        float * __restrict farZ) {\n  ...\n  323  CGLM_INLINE\n  324  void\n  325: glm_persp_decomp_far_rh_no(mat4 proj, float * __restrict farZ) {\n  326    *farZ = proj[3][2] / (proj[2][2] + 1.0f);\n  327  }\n  ...\n  337  CGLM_INLINE\n  338  void\n  339: glm_persp_decomp_near_rh_no(mat4 proj, float * __restrict nearZ) {\n  340    *nearZ = proj[3][2] / (proj[2][2] - 1.0f);\n  341  }\n  ...\n  352  CGLM_INLINE\n  353  void\n  354: glm_persp_sizes_rh_no(mat4 proj, float fovy, vec4 dest) {\n  355    float t, a, nearZ, farZ;\n  356  \n  ...\n  377  CGLM_INLINE\n  378  float\n  379: glm_persp_fovy_rh_no(mat4 proj) {\n  380    return glm_persp_fovy(proj);\n  381  }\n  ...\n  389  CGLM_INLINE\n  390  float\n  391: glm_persp_aspect_rh_no(mat4 proj) {\n  392    return glm_persp_aspect(proj);\n  393  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\persp_rh_zo.h:\n   11                                        float bottom,  float top,\n   12                                        float nearZ, float farZ,\n   13:                                       mat4  dest)\n   14     CGLM_INLINE void glm_perspective_rh_zo(float fovy,\n   15                                            float aspect,\n   16                                            float nearZ,\n   17                                            float farZ,\n   18:                                           mat4  dest)\n   19:    CGLM_INLINE void glm_perspective_default_rh_zo(float aspect, mat4 dest)\n   20:    CGLM_INLINE void glm_perspective_resize_rh_zo(float aspect, mat4 proj)\n   21:    CGLM_INLINE void glm_persp_move_far_rh_zo(mat4 proj,\n   22                                               float deltaFar)\n   23:    CGLM_INLINE void glm_persp_decomp_rh_zo(mat4 proj,\n   24                                             float * __restrict nearZ,\n   25                                             float * __restrict farZ,\n   ..\n   28                                             float * __restrict left,\n   29                                             float * __restrict right)\n   30:   CGLM_INLINE void glm_persp_decompv_rh_zo(mat4 proj,\n   31                                             float dest[6])\n   32:   CGLM_INLINE void glm_persp_decomp_x_rh_zo(mat4 proj,\n   33                                              float * __restrict left,\n   34                                              float * __restrict right)\n   35:   CGLM_INLINE void glm_persp_decomp_y_rh_zo(mat4 proj,\n   36                                              float * __restrict top,\n   37                                              float * __restrict bottom)\n   38:   CGLM_INLINE void glm_persp_decomp_z_rh_zo(mat4 proj,\n   39                                              float * __restrict nearZ,\n   40                                              float * __restrict farZ)\n   41:   CGLM_INLINE void glm_persp_decomp_far_rh_zo(mat4 proj, float * __restrict farZ)\n   42:   CGLM_INLINE void glm_persp_decomp_near_rh_zo(mat4 proj, float * __restrict nearZ)\n   43:   CGLM_INLINE void glm_persp_sizes_rh_zo(mat4 proj, float fovy, vec4 dest)\n   44   */\n   45  \n   ..\n   67                    float bottom,  float top,\n   68                    float nearZ, float farZ,\n   69:                   mat4  dest) {\n   70    float rl, tb, fn, nv;\n   71  \n   ..\n  102                        float nearZ,\n  103                        float farZ,\n  104:                       mat4  dest) {\n  105    float f, fn;\n  106  \n  ...\n  127  CGLM_INLINE\n  128  void\n  129: glm_perspective_default_rh_zo(float aspect, mat4 dest) {\n  130    glm_perspective_rh_zo(GLM_PI_4f, aspect, 0.01f, 100.0f, dest);\n  131  }\n  ...\n  142  CGLM_INLINE\n  143  void\n  144: glm_perspective_resize_rh_zo(float aspect, mat4 proj) {\n  145    if (proj[0][0] == 0.0f)\n  146      return;\n  ...\n  160  CGLM_INLINE\n  161  void\n  162: glm_persp_move_far_rh_zo(mat4 proj, float deltaFar) {\n  163    float fn, farZ, nearZ, p22, p32;\n  164  \n  ...\n  189  CGLM_INLINE\n  190  void\n  191: glm_persp_decomp_rh_zo(mat4 proj,\n  192                      float * __restrict nearZ, float * __restrict farZ,\n  193                      float * __restrict top,     float * __restrict bottom,\n  ...\n  228  CGLM_INLINE\n  229  void\n  230: glm_persp_decompv_rh_zo(mat4 proj, float dest[6]) {\n  231    glm_persp_decomp_rh_zo(proj, &dest[0], &dest[1], &dest[2],\n  232                                 &dest[3], &dest[4], &dest[5]);\n  ...\n  243  CGLM_INLINE\n  244  void\n  245: glm_persp_decomp_x_rh_zo(mat4 proj,\n  246                           float * __restrict left,\n  247                           float * __restrict right) {\n  ...\n  269  CGLM_INLINE\n  270  void\n  271: glm_persp_decomp_y_rh_zo(mat4 proj,\n  272                           float * __restrict top,\n  273                           float * __restrict bottom) {\n  ...\n  295  CGLM_INLINE\n  296  void\n  297: glm_persp_decomp_z_rh_zo(mat4 proj,\n  298                           float * __restrict nearZ,\n  299                           float * __restrict farZ) {\n  ...\n  317  CGLM_INLINE\n  318  void\n  319: glm_persp_decomp_far_rh_zo(mat4 proj, float * __restrict farZ) {\n  320    *farZ = proj[3][2] / (proj[2][2] + 1.0f);\n  321  }\n  ...\n  331  CGLM_INLINE\n  332  void\n  333: glm_persp_decomp_near_rh_zo(mat4 proj, float * __restrict nearZ) {\n  334    *nearZ = proj[3][2] / proj[2][2];\n  335  }\n  ...\n  346  CGLM_INLINE\n  347  void\n  348: glm_persp_sizes_rh_zo(mat4 proj, float fovy, vec4 dest) {\n  349    float t, a, nearZ, farZ;\n  350  \n  ...\n  371  CGLM_INLINE\n  372  float\n  373: glm_persp_fovy_rh_zo(mat4 proj) {\n  374    return glm_persp_fovy(proj);\n  375  }\n  ...\n  383  CGLM_INLINE\n  384  float\n  385: glm_persp_aspect_rh_zo(mat4 proj) {\n  386    return glm_persp_aspect(proj);\n  387  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\project_no.h:\n   12  #include \"../vec3.h\"\n   13  #include \"../vec4.h\"\n   14: #include \"../mat4.h\"\n   15  \n   16  /*!\n   ..\n   42  CGLM_INLINE\n   43  void\n   44: glm_unprojecti_no(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {\n   45    vec4 v;\n   46  \n   ..\n   69  CGLM_INLINE\n   70  void\n   71: glm_project_no(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n   72    CGLM_ALIGN(16) vec4 pos4;\n   73  \n   ..\n   98  CGLM_INLINE\n   99  float\n  100: glm_project_z_no(vec3 v, mat4 m) {\n  101    float z, w;\n  102  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\project_zo.h:\n   12  #include \"../vec3.h\"\n   13  #include \"../vec4.h\"\n   14: #include \"../mat4.h\"\n   15  \n   16  /*!\n   ..\n   42  CGLM_INLINE\n   43  void\n   44: glm_unprojecti_zo(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {\n   45    vec4 v;\n   46  \n   ..\n   69  CGLM_INLINE\n   70  void\n   71: glm_project_zo(vec3 pos, mat4 m, vec4 vp, vec3 dest) {\n   72    CGLM_ALIGN(16) vec4 pos4;\n   73  \n   ..\n  100  CGLM_INLINE\n  101  float\n  102: glm_project_z_zo(vec3 v, mat4 m) {\n  103    float z, w;\n  104  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\view_lh.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_lookat_lh(vec3 eye, vec3 center, vec3 up, mat4 dest)\n   11:    CGLM_INLINE void glm_look_lh(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n   12:    CGLM_INLINE void glm_look_anyup_lh(vec3 eye, vec3 dir, mat4 dest)\n   13   */\n   14  \n   ..\n   32  CGLM_INLINE\n   33  void\n   34: glm_lookat_lh(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   35    CGLM_ALIGN(8) vec3 f, u, s;\n   36  \n   ..\n   73  CGLM_INLINE\n   74  void\n   75: glm_look_lh(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   76    CGLM_ALIGN(8) vec3 target;\n   77    glm_vec3_add(eye, dir, target);\n   ..\n   91  CGLM_INLINE\n   92  void\n   93: glm_look_anyup_lh(vec3 eye, vec3 dir, mat4 dest) {\n   94    CGLM_ALIGN(8) vec3 up;\n   95    glm_vec3_ortho(dir, up);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\view_lh_no.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_lookat_lh_no(vec3 eye, vec3 center, vec3 up, mat4 dest)\n   11:    CGLM_INLINE void glm_look_lh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n   12:    CGLM_INLINE void glm_look_anyup_lh_no(vec3 eye, vec3 dir, mat4 dest)\n   13   */\n   14  \n   ..\n   32  CGLM_INLINE\n   33  void\n   34: glm_lookat_lh_no(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   35    glm_lookat_lh(eye, center, up, dest);\n   36  }\n   ..\n   52  CGLM_INLINE\n   53  void\n   54: glm_look_lh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   55    glm_look_lh(eye, dir, up, dest);\n   56  }\n   ..\n   68  CGLM_INLINE\n   69  void\n   70: glm_look_anyup_lh_no(vec3 eye, vec3 dir, mat4 dest) {\n   71    glm_look_anyup_lh(eye, dir, dest);\n   72  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\view_lh_zo.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_lookat_lh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest)\n   11:    CGLM_INLINE void glm_look_lh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n   12:    CGLM_INLINE void glm_look_anyup_lh_zo(vec3 eye, vec3 dir, mat4 dest)\n   13   */\n   14  \n   ..\n   32  CGLM_INLINE\n   33  void\n   34: glm_lookat_lh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   35    glm_lookat_lh(eye, center, up, dest);\n   36  }\n   ..\n   52  CGLM_INLINE\n   53  void\n   54: glm_look_lh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   55    glm_look_lh(eye, dir, up, dest);\n   56  }\n   ..\n   68  CGLM_INLINE\n   69  void\n   70: glm_look_anyup_lh_zo(vec3 eye, vec3 dir, mat4 dest) {\n   71    glm_look_anyup_lh(eye, dir, dest);\n   72  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\view_rh.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_lookat_rh(vec3 eye, vec3 center, vec3 up, mat4 dest)\n   11:    CGLM_INLINE void glm_look_rh(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n   12:    CGLM_INLINE void glm_look_anyup_rh(vec3 eye, vec3 dir, mat4 dest)\n   13   */\n   14  \n   ..\n   32  CGLM_INLINE\n   33  void\n   34: glm_lookat_rh(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   35    CGLM_ALIGN(8) vec3 f, u, s;\n   36  \n   ..\n   73  CGLM_INLINE\n   74  void\n   75: glm_look_rh(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   76    CGLM_ALIGN(8) vec3 target;\n   77    glm_vec3_add(eye, dir, target);\n   ..\n   91  CGLM_INLINE\n   92  void\n   93: glm_look_anyup_rh(vec3 eye, vec3 dir, mat4 dest) {\n   94    CGLM_ALIGN(8) vec3 up;\n   95    glm_vec3_ortho(dir, up);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\view_rh_no.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_lookat_rh_no(vec3 eye, vec3 center, vec3 up, mat4 dest)\n   11:    CGLM_INLINE void glm_look_rh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n   12:    CGLM_INLINE void glm_look_anyup_rh_no(vec3 eye, vec3 dir, mat4 dest)\n   13   */\n   14  \n   ..\n   32  CGLM_INLINE\n   33  void\n   34: glm_lookat_rh_no(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   35    glm_lookat_rh(eye, center, up, dest);\n   36  }\n   ..\n   52  CGLM_INLINE\n   53  void\n   54: glm_look_rh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   55    glm_look_rh(eye, dir, up, dest);\n   56  }\n   ..\n   68  CGLM_INLINE\n   69  void\n   70: glm_look_anyup_rh_no(vec3 eye, vec3 dir, mat4 dest) {\n   71    glm_look_anyup_rh(eye, dir, dest);\n   72  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\clipspace\\view_rh_zo.h:\n    8  /*\n    9   Functions:\n   10:    CGLM_INLINE void glm_lookat_rh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest)\n   11:    CGLM_INLINE void glm_look_rh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest)\n   12:    CGLM_INLINE void glm_look_anyup_rh_zo(vec3 eye, vec3 dir, mat4 dest)\n   13   */\n   14  \n   ..\n   32  CGLM_INLINE\n   33  void\n   34: glm_lookat_rh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest) {\n   35    glm_lookat_rh(eye, center, up, dest);\n   36  }\n   ..\n   52  CGLM_INLINE\n   53  void\n   54: glm_look_rh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest) {\n   55    glm_look_rh(eye, dir, up, dest);\n   56  }\n   ..\n   68  CGLM_INLINE\n   69  void\n   70: glm_look_anyup_rh_zo(vec3 eye, vec3 dir, mat4 dest) {\n   71    glm_look_anyup_rh(eye, dir, dest);\n   72  }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\affine.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_translate_make(mat4 m, vec3 v);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_translate_to(mat4 m, vec3 v, mat4 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_translate(mat4 m, vec3 v);\n   27  \n   28  CGLM_EXPORT\n   29  void\n   30: glmc_translate_x(mat4 m, float to);\n   31  \n   32  CGLM_EXPORT\n   33  void\n   34: glmc_translate_y(mat4 m, float to);\n   35  \n   36  CGLM_EXPORT\n   37  void\n   38: glmc_translate_z(mat4 m, float to);\n   39  \n   40  CGLM_EXPORT\n   41  void\n   42: glmc_scale_make(mat4 m, vec3 v);\n   43  \n   44  CGLM_EXPORT\n   45  void\n   46: glmc_scale_to(mat4 m, vec3 v, mat4 dest);\n   47  \n   48  CGLM_EXPORT\n   49  void\n   50: glmc_scale(mat4 m, vec3 v);\n   51  \n   52  CGLM_EXPORT\n   53  void\n   54: glmc_scale_uni(mat4 m, float s);\n   55  \n   56  CGLM_EXPORT\n   57  void\n   58: glmc_rotate_x(mat4 m, float rad, mat4 dest);\n   59  \n   60  CGLM_EXPORT\n   61  void\n   62: glmc_rotate_y(mat4 m, float rad, mat4 dest);\n   63  \n   64  CGLM_EXPORT\n   65  void\n   66: glmc_rotate_z(mat4 m, float rad, mat4 dest);\n   67  \n   68  CGLM_EXPORT\n   69  void\n   70: glmc_rotate_make(mat4 m, float angle, vec3 axis);\n   71  \n   72  CGLM_EXPORT\n   73  void\n   74: glmc_rotate(mat4 m, float angle, vec3 axis);\n   75  \n   76  CGLM_EXPORT\n   77  void\n   78: glmc_rotate_at(mat4 m, vec3 pivot, float angle, vec3 axis);\n   79  \n   80  CGLM_EXPORT\n   81  void\n   82: glmc_rotate_atm(mat4 m, vec3 pivot, float angle, vec3 axis);\n   83  \n   84  CGLM_EXPORT\n   85  void\n   86: glmc_spin(mat4 m, float angle, vec3 axis);\n   87  \n   88  CGLM_EXPORT\n   89  void\n   90: glmc_decompose_scalev(mat4 m, vec3 s);\n   91  \n   92  CGLM_EXPORT\n   93  bool\n   94: glmc_uniscaled(mat4 m);\n   95  \n   96  CGLM_EXPORT\n   97  void\n   98: glmc_decompose_rs(mat4 m, mat4 r, vec3 s);\n   99  \n  100  CGLM_EXPORT\n  101  void\n  102: glmc_decompose(mat4 m, vec4 t, mat4 r, vec3 s);\n  103  \n  104  /* affine-post */\n  ...\n  106  CGLM_EXPORT\n  107  void\n  108: glmc_translated(mat4 m, vec3 v);\n  109  \n  110  CGLM_EXPORT\n  111  void\n  112: glmc_translated_to(mat4 m, vec3 v, mat4 dest);\n  113  \n  114  CGLM_EXPORT\n  115  void\n  116: glmc_translated_x(mat4 m, float x);\n  117  \n  118  CGLM_EXPORT\n  119  void\n  120: glmc_translated_y(mat4 m, float y);\n  121  \n  122  CGLM_EXPORT\n  123  void\n  124: glmc_translated_z(mat4 m, float z);\n  125  \n  126  CGLM_EXPORT\n  127  void\n  128: glmc_rotated_x(mat4 m, float angle, mat4 dest);\n  129  \n  130  CGLM_EXPORT\n  131  void\n  132: glmc_rotated_y(mat4 m, float angle, mat4 dest);\n  133  \n  134  CGLM_EXPORT\n  135  void\n  136: glmc_rotated_z(mat4 m, float angle, mat4 dest);\n  137  \n  138  CGLM_EXPORT\n  139  void\n  140: glmc_rotated(mat4 m, float angle, vec3 axis);\n  141  \n  142  CGLM_EXPORT\n  143  void\n  144: glmc_rotated_at(mat4 m, vec3 pivot, float angle, vec3 axis);\n  145  \n  146  CGLM_EXPORT\n  147  void\n  148: glmc_spinned(mat4 m, float angle, vec3 axis);\n  149  \n  150  /* affine-mat */\n  ...\n  152  CGLM_EXPORT\n  153  void\n  154: glmc_mul(mat4 m1, mat4 m2, mat4 dest);\n  155  \n  156  CGLM_EXPORT\n  157  void\n  158: glmc_mul_rot(mat4 m1, mat4 m2, mat4 dest);\n  159  \n  160  CGLM_EXPORT\n  161  void\n  162: glmc_inv_tr(mat4 mat);\n  163  \n  164  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\box.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_aabb_transform(vec3 box[2], mat4 m, vec3 dest[2]);\n   19  \n   20  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\cam.h:\n   19               float bottom, float top,\n   20               float nearZ,  float farZ,\n   21:              mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   ..\n   26             float bottom, float top,\n   27             float nearZ,  float farZ,\n   28:            mat4  dest);\n   29  \n   30  CGLM_EXPORT\n   31  void\n   32: glmc_ortho_aabb(vec3 box[2], mat4 dest);\n   33  \n   34  CGLM_EXPORT\n   35  void\n   36: glmc_ortho_aabb_p(vec3 box[2], float padding, mat4 dest);\n   37  \n   38  CGLM_EXPORT\n   39  void\n   40: glmc_ortho_aabb_pz(vec3 box[2], float padding, mat4 dest);\n   41  \n   42  CGLM_EXPORT\n   43  void\n   44: glmc_ortho_default(float aspect, mat4 dest);\n   45  \n   46  CGLM_EXPORT\n   47  void\n   48: glmc_ortho_default_s(float aspect, float size, mat4 dest);\n   49  \n   50  CGLM_EXPORT\n   51  void\n   52: glmc_perspective(float fovy, float aspect, float nearZ, float farZ, mat4 dest);\n   53  \n   54  CGLM_EXPORT\n   55  void\n   56: glmc_persp_move_far(mat4 proj, float deltaFar);\n   57  \n   58  CGLM_EXPORT\n   59  void\n   60: glmc_perspective_default(float aspect, mat4 dest);\n   61  \n   62  CGLM_EXPORT\n   63  void\n   64: glmc_perspective_resize(float aspect, mat4 proj);\n   65  \n   66  CGLM_EXPORT\n   67  void\n   68: glmc_lookat(vec3 eye, vec3 center, vec3 up, mat4 dest);\n   69  \n   70  CGLM_EXPORT\n   71  void\n   72: glmc_look(vec3 eye, vec3 dir, vec3 up, mat4 dest);\n   73  \n   74  CGLM_EXPORT\n   75  void\n   76: glmc_look_anyup(vec3 eye, vec3 dir, mat4 dest);\n   77  \n   78  CGLM_EXPORT\n   79  void\n   80: glmc_persp_decomp(mat4 proj,\n   81                    float * __restrict nearZ,\n   82                    float * __restrict farZ,\n   ..\n   88  CGLM_EXPORT\n   89  void\n   90: glmc_persp_decompv(mat4 proj, float dest[6]);\n   91  \n   92  CGLM_EXPORT\n   93  void\n   94: glmc_persp_decomp_x(mat4 proj,\n   95                      float * __restrict left,\n   96                      float * __restrict right);\n   ..\n   98  CGLM_EXPORT\n   99  void\n  100: glmc_persp_decomp_y(mat4 proj,\n  101                      float * __restrict top,\n  102                      float * __restrict bottom);\n  ...\n  104  CGLM_EXPORT\n  105  void\n  106: glmc_persp_decomp_z(mat4 proj,\n  107                      float * __restrict nearZ,\n  108                      float * __restrict farZ);\n  ...\n  110  CGLM_EXPORT\n  111  void\n  112: glmc_persp_decomp_far(mat4 proj, float * __restrict farZ);\n  113  \n  114  CGLM_EXPORT\n  115  void\n  116: glmc_persp_decomp_near(mat4 proj, float * __restrict nearZ);\n  117  \n  118  CGLM_EXPORT\n  119  float\n  120: glmc_persp_fovy(mat4 proj);\n  121  \n  122  CGLM_EXPORT\n  123  float\n  124: glmc_persp_aspect(mat4 proj);\n  125  \n  126  CGLM_EXPORT\n  127  void\n  128: glmc_persp_sizes(mat4 proj, float fovy, vec4 dest);\n  129  \n  130  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\curve.h:\n   16  CGLM_EXPORT\n   17  float\n   18: glmc_smc(float s, mat4 m, vec4 c);\n   19  \n   20  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\euler.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_euler_angles(mat4 m, vec3 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_euler(vec3 angles, mat4 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_euler_xyz(vec3 angles,  mat4 dest);\n   27  \n   28  CGLM_EXPORT\n   29  void\n   30: glmc_euler_zyx(vec3 angles,  mat4 dest);\n   31  \n   32  CGLM_EXPORT\n   33  void\n   34: glmc_euler_zxy(vec3 angles, mat4 dest);\n   35  \n   36  CGLM_EXPORT\n   37  void\n   38: glmc_euler_xzy(vec3 angles, mat4 dest);\n   39  \n   40  CGLM_EXPORT\n   41  void\n   42: glmc_euler_yzx(vec3 angles, mat4 dest);\n   43  \n   44  CGLM_EXPORT\n   45  void\n   46: glmc_euler_yxz(vec3 angles, mat4 dest);\n   47  \n   48  CGLM_EXPORT\n   49  void\n   50: glmc_euler_by_order(vec3 angles, glm_euler_seq axis, mat4 dest);\n   51  \n   52  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\frustum.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_frustum_planes(mat4 m, vec4 dest[6]);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_frustum_corners(mat4 invMat, vec4 dest[8]);\n   23  \n   24  CGLM_EXPORT\n   ..\n   28  CGLM_EXPORT\n   29  void\n   30: glmc_frustum_box(vec4 corners[8], mat4 m, vec3 box[2]);\n   31  \n   32  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\io.h:\n   17  CGLM_EXPORT\n   18  void\n   19: glmc_mat4_print(mat4   matrix,\n   20                  FILE * __restrict ostream);\n   21  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\mat2x4.h:\n   28  CGLM_EXPORT\n   29  void\n   30: glmc_mat2x4_mul(mat2x4 m1, mat4x2 m2, mat4 dest);\n   31  \n   32  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\mat3x4.h:\n   28  CGLM_EXPORT\n   29  void\n   30: glmc_mat3x4_mul(mat3x4 m1, mat4x3 m2, mat4 dest);\n   31  \n   32  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\mat4.h:\n   20  CGLM_EXPORT\n   21  void\n   22: glmc_mat4_ucopy(mat4 mat, mat4 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_mat4_copy(mat4 mat, mat4 dest);\n   27  \n   28  CGLM_EXPORT\n   29  void\n   30: glmc_mat4_identity(mat4 mat);\n   31  \n   32  CGLM_EXPORT\n   33  void\n   34: glmc_mat4_identity_array(mat4 * __restrict mat, size_t count);\n   35  \n   36  CGLM_EXPORT\n   37  void\n   38: glmc_mat4_zero(mat4 mat);\n   39  \n   40  CGLM_EXPORT\n   41  void\n   42: glmc_mat4_pick3(mat4 mat, mat3 dest);\n   43  \n   44  CGLM_EXPORT\n   45  void\n   46: glmc_mat4_pick3t(mat4 mat, mat3 dest);\n   47  \n   48  CGLM_EXPORT\n   49  void\n   50: glmc_mat4_ins3(mat3 mat, mat4 dest);\n   51  \n   52  CGLM_EXPORT\n   53  void\n   54: glmc_mat4_mul(mat4 m1, mat4 m2, mat4 dest);\n   55  \n   56  CGLM_EXPORT\n   57  void\n   58: glmc_mat4_mulN(mat4 * __restrict matrices[], uint32_t len, mat4 dest);\n   59  \n   60  CGLM_EXPORT\n   61  void\n   62: glmc_mat4_mulv(mat4 m, vec4 v, vec4 dest);\n   63  \n   64  CGLM_EXPORT\n   65  void\n   66: glmc_mat4_mulv3(mat4 m, vec3 v, float last, vec3 dest);\n   67  \n   68  CGLM_EXPORT\n   69  float\n   70: glmc_mat4_trace(mat4 m);\n   71  \n   72  CGLM_EXPORT\n   73  float\n   74: glmc_mat4_trace3(mat4 m);\n   75  \n   76  CGLM_EXPORT\n   77  void\n   78: glmc_mat4_quat(mat4 m, versor dest);\n   79  \n   80  CGLM_EXPORT\n   81  void\n   82: glmc_mat4_transpose_to(mat4 m, mat4 dest);\n   83  \n   84  CGLM_EXPORT\n   85  void\n   86: glmc_mat4_transpose(mat4 m);\n   87  \n   88  CGLM_EXPORT\n   89  void\n   90: glmc_mat4_scale_p(mat4 m, float s);\n   91  \n   92  CGLM_EXPORT\n   93  void\n   94: glmc_mat4_scale(mat4 m, float s);\n   95  \n   96  CGLM_EXPORT\n   97  float\n   98: glmc_mat4_det(mat4 mat);\n   99  \n  100  CGLM_EXPORT\n  101  void\n  102: glmc_mat4_inv(mat4 mat, mat4 dest);\n  103  \n  104  CGLM_EXPORT\n  105  void\n  106: glmc_mat4_inv_precise(mat4 mat, mat4 dest);\n  107  \n  108  CGLM_EXPORT\n  109  void\n  110: glmc_mat4_inv_fast(mat4 mat, mat4 dest);\n  111  \n  112  CGLM_EXPORT\n  113  void\n  114: glmc_mat4_swap_col(mat4 mat, int col1, int col2);\n  115  \n  116  CGLM_EXPORT\n  117  void\n  118: glmc_mat4_swap_row(mat4 mat, int row1, int row2);\n  119  \n  120  CGLM_EXPORT\n  121  float\n  122: glmc_mat4_rmc(vec4 r, mat4 m, vec4 c);\n  123  \n  124  CGLM_EXPORT\n  125  void\n  126: glmc_mat4_make(const float * __restrict src, mat4 dest);\n  127  \n  128  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\project.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_unprojecti(vec3 pos, mat4 invMat, vec4 vp, vec3 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_unproject(vec3 pos, mat4 m, vec4 vp, vec3 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_project(vec3 pos, mat4 m, vec4 vp, vec3 dest);\n   27  \n   28  CGLM_EXPORT\n   29  float\n   30: glmc_project_z(vec3 pos, mat4 m);\n   31  \n   32  CGLM_EXPORT\n   33  void\n   34: glmc_pickmatrix(vec2 center, vec2 size, vec4 vp, mat4 dest);\n   35  \n   36  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\quat.h:\n  104  CGLM_EXPORT\n  105  void\n  106: glmc_quat_mat4(versor q, mat4 dest);\n  107  \n  108  CGLM_EXPORT\n  109  void\n  110: glmc_quat_mat4t(versor q, mat4 dest);\n  111  \n  112  CGLM_EXPORT\n  ...\n  136  CGLM_EXPORT\n  137  void\n  138: glmc_quat_look(vec3 eye, versor ori, mat4 dest);\n  139  \n  140  CGLM_EXPORT\n  ...\n  152  CGLM_EXPORT\n  153  void\n  154: glmc_quat_rotate(mat4 m, versor q, mat4 dest);\n  155  \n  156  CGLM_EXPORT\n  157  void\n  158: glmc_quat_rotate_at(mat4 model, versor q, vec3 pivot);\n  159  \n  160  CGLM_EXPORT\n  161  void\n  162: glmc_quat_rotate_atm(mat4 m, versor q, vec3 pivot);\n  163  \n  164  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\sphere.h:\n   20  CGLM_EXPORT\n   21  void\n   22: glmc_sphere_transform(vec4 s, mat4 m, vec4 dest);\n   23  \n   24  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\vec3.h:\n  175  CGLM_EXPORT\n  176  void\n  177: glmc_vec3_rotate_m4(mat4 m, vec3 v, vec3 dest);\n  178  \n  179  CGLM_EXPORT\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\ortho_lh_no.h:\n   19                   float bottom,  float top,\n   20                   float nearZ,   float farZ,\n   21:                  mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_lh_no(vec3 box[2], mat4 dest);\n   26  \n   27  CGLM_EXPORT\n   28  void\n   29: glmc_ortho_aabb_p_lh_no(vec3 box[2], float padding, mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_ortho_aabb_pz_lh_no(vec3 box[2], float padding, mat4 dest);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_default_lh_no(float aspect, mat4 dest);\n   38  \n   39  CGLM_EXPORT\n   40  void\n   41: glmc_ortho_default_s_lh_no(float aspect, float size, mat4 dest);\n   42  \n   43  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\ortho_lh_zo.h:\n   19                   float bottom,  float top,\n   20                   float nearZ,   float farZ,\n   21:                  mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_lh_zo(vec3 box[2], mat4 dest);\n   26  \n   27  CGLM_EXPORT\n   28  void\n   29: glmc_ortho_aabb_p_lh_zo(vec3 box[2], float padding, mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_ortho_aabb_pz_lh_zo(vec3 box[2], float padding, mat4 dest);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_default_lh_zo(float aspect, mat4 dest);\n   38  \n   39  CGLM_EXPORT\n   40  void\n   41: glmc_ortho_default_s_lh_zo(float aspect, float size, mat4 dest);\n   42  \n   43  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\ortho_rh_no.h:\n   19                   float bottom,  float top,\n   20                   float nearZ,   float farZ,\n   21:                  mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_rh_no(vec3 box[2], mat4 dest);\n   26  \n   27  CGLM_EXPORT\n   28  void\n   29: glmc_ortho_aabb_p_rh_no(vec3 box[2], float padding, mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_ortho_aabb_pz_rh_no(vec3 box[2], float padding, mat4 dest);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_default_rh_no(float aspect, mat4 dest);\n   38  \n   39  CGLM_EXPORT\n   40  void\n   41: glmc_ortho_default_s_rh_no(float aspect, float size, mat4 dest);\n   42  \n   43  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\ortho_rh_zo.h:\n   19                   float bottom,  float top,\n   20                   float nearZ,   float farZ,\n   21:                  mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   24  void\n   25: glmc_ortho_aabb_rh_zo(vec3 box[2], mat4 dest);\n   26  \n   27  CGLM_EXPORT\n   28  void\n   29: glmc_ortho_aabb_p_rh_zo(vec3 box[2], float padding, mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_ortho_aabb_pz_rh_zo(vec3 box[2], float padding, mat4 dest);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_ortho_default_rh_zo(float aspect, mat4 dest);\n   38  \n   39  CGLM_EXPORT\n   40  void\n   41: glmc_ortho_default_s_rh_zo(float aspect, float size, mat4 dest);\n   42  \n   43  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\persp_lh_no.h:\n   19                     float bottom,  float top,\n   20                     float nearZ,   float farZ,\n   21:                    mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_persp_move_far_lh_no(mat4 proj, float deltaFar);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_persp_decomp_lh_no(mat4 proj,\n   38                          float * __restrict nearZ, float * __restrict farZ,\n   39                          float * __restrict top,   float * __restrict bottom,\n   ..\n   42  CGLM_EXPORT\n   43  void\n   44: glmc_persp_decompv_lh_no(mat4 proj, float dest[6]);\n   45  \n   46  CGLM_EXPORT\n   47  void\n   48: glmc_persp_decomp_x_lh_no(mat4 proj,\n   49                            float * __restrict left,\n   50                            float * __restrict right);\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decomp_y_lh_no(mat4 proj,\n   55                            float * __restrict top,\n   56                            float * __restrict bottom);\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_z_lh_no(mat4 proj,\n   61                            float * __restrict nearZ,\n   62                            float * __restrict farZ);\n   ..\n   64  CGLM_EXPORT\n   65  void\n   66: glmc_persp_decomp_far_lh_no(mat4 proj, float * __restrict farZ);\n   67  \n   68  CGLM_EXPORT\n   69  void\n   70: glmc_persp_decomp_near_lh_no(mat4 proj, float * __restrict nearZ);\n   71  \n   72  CGLM_EXPORT\n   73  void\n   74: glmc_persp_sizes_lh_no(mat4 proj, float fovy, vec4 dest);\n   75  \n   76  CGLM_EXPORT\n   77  float\n   78: glmc_persp_fovy_lh_no(mat4 proj);\n   79  \n   80  CGLM_EXPORT\n   81  float\n   82: glmc_persp_aspect_lh_no(mat4 proj);\n   83  \n   84  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\persp_lh_zo.h:\n   19                     float bottom,  float top,\n   20                     float nearZ,   float farZ,\n   21:                    mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_persp_move_far_lh_zo(mat4 proj, float deltaFar);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_persp_decomp_lh_zo(mat4 proj,\n   38                          float * __restrict nearZ, float * __restrict farZ,\n   39                          float * __restrict top,   float * __restrict bottom,\n   ..\n   42  CGLM_EXPORT\n   43  void\n   44: glmc_persp_decompv_lh_zo(mat4 proj, float dest[6]);\n   45  \n   46  CGLM_EXPORT\n   47  void\n   48: glmc_persp_decomp_x_lh_zo(mat4 proj,\n   49                            float * __restrict left,\n   50                            float * __restrict right);\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decomp_y_lh_zo(mat4 proj,\n   55                            float * __restrict top,\n   56                            float * __restrict bottom);\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_z_lh_zo(mat4 proj,\n   61                            float * __restrict nearZ,\n   62                            float * __restrict farZ);\n   ..\n   64  CGLM_EXPORT\n   65  void\n   66: glmc_persp_decomp_far_lh_zo(mat4 proj, float * __restrict farZ);\n   67  \n   68  CGLM_EXPORT\n   69  void\n   70: glmc_persp_decomp_near_lh_zo(mat4 proj, float * __restrict nearZ);\n   71  \n   72  CGLM_EXPORT\n   73  void\n   74: glmc_persp_sizes_lh_zo(mat4 proj, float fovy, vec4 dest);\n   75  \n   76  CGLM_EXPORT\n   77  float\n   78: glmc_persp_fovy_lh_zo(mat4 proj);\n   79  \n   80  CGLM_EXPORT\n   81  float\n   82: glmc_persp_aspect_lh_zo(mat4 proj);\n   83  \n   84  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\persp_rh_no.h:\n   19                     float bottom,  float top,\n   20                     float nearZ,   float farZ,\n   21:                    mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_persp_move_far_rh_no(mat4 proj, float deltaFar);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_persp_decomp_rh_no(mat4 proj,\n   38                          float * __restrict nearZ, float * __restrict farZ,\n   39                          float * __restrict top,   float * __restrict bottom,\n   ..\n   42  CGLM_EXPORT\n   43  void\n   44: glmc_persp_decompv_rh_no(mat4 proj, float dest[6]);\n   45  \n   46  CGLM_EXPORT\n   47  void\n   48: glmc_persp_decomp_x_rh_no(mat4 proj,\n   49                            float * __restrict left,\n   50                            float * __restrict right);\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decomp_y_rh_no(mat4 proj,\n   55                            float * __restrict top,\n   56                            float * __restrict bottom);\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_z_rh_no(mat4 proj,\n   61                            float * __restrict nearZ,\n   62                            float * __restrict farZ);\n   ..\n   64  CGLM_EXPORT\n   65  void\n   66: glmc_persp_decomp_far_rh_no(mat4 proj, float * __restrict farZ);\n   67  \n   68  CGLM_EXPORT\n   69  void\n   70: glmc_persp_decomp_near_rh_no(mat4 proj, float * __restrict nearZ);\n   71  \n   72  CGLM_EXPORT\n   73  void\n   74: glmc_persp_sizes_rh_no(mat4 proj, float fovy, vec4 dest);\n   75  \n   76  CGLM_EXPORT\n   77  float\n   78: glmc_persp_fovy_rh_no(mat4 proj);\n   79  \n   80  CGLM_EXPORT\n   81  float\n   82: glmc_persp_aspect_rh_no(mat4 proj);\n   83  \n   84  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\persp_rh_zo.h:\n   19                     float bottom,  float top,\n   20                     float nearZ,   float farZ,\n   21:                    mat4  dest);\n   22  \n   23  CGLM_EXPORT\n   ..\n   27                         float nearVal,\n   28                         float farVal,\n   29:                        mat4 dest);\n   30  \n   31  CGLM_EXPORT\n   32  void\n   33: glmc_persp_move_far_rh_zo(mat4 proj, float deltaFar);\n   34  \n   35  CGLM_EXPORT\n   36  void\n   37: glmc_persp_decomp_rh_zo(mat4 proj,\n   38                          float * __restrict nearZ, float * __restrict farZ,\n   39                          float * __restrict top,   float * __restrict bottom,\n   ..\n   42  CGLM_EXPORT\n   43  void\n   44: glmc_persp_decompv_rh_zo(mat4 proj, float dest[6]);\n   45  \n   46  CGLM_EXPORT\n   47  void\n   48: glmc_persp_decomp_x_rh_zo(mat4 proj,\n   49                            float * __restrict left,\n   50                            float * __restrict right);\n   ..\n   52  CGLM_EXPORT\n   53  void\n   54: glmc_persp_decomp_y_rh_zo(mat4 proj,\n   55                            float * __restrict top,\n   56                            float * __restrict bottom);\n   ..\n   58  CGLM_EXPORT\n   59  void\n   60: glmc_persp_decomp_z_rh_zo(mat4 proj,\n   61                            float * __restrict nearZ,\n   62                            float * __restrict farZ);\n   ..\n   64  CGLM_EXPORT\n   65  void\n   66: glmc_persp_decomp_far_rh_zo(mat4 proj, float * __restrict farZ);\n   67  \n   68  CGLM_EXPORT\n   69  void\n   70: glmc_persp_decomp_near_rh_zo(mat4 proj, float * __restrict nearZ);\n   71  \n   72  CGLM_EXPORT\n   73  void\n   74: glmc_persp_sizes_rh_zo(mat4 proj, float fovy, vec4 dest);\n   75  \n   76  CGLM_EXPORT\n   77  float\n   78: glmc_persp_fovy_rh_zo(mat4 proj);\n   79  \n   80  CGLM_EXPORT\n   81  float\n   82: glmc_persp_aspect_rh_zo(mat4 proj);\n   83  \n   84  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\project_no.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_unprojecti_no(vec3 pos, mat4 invMat, vec4 vp, vec3 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_project_no(vec3 pos, mat4 m, vec4 vp, vec3 dest);\n   23  \n   24  CGLM_EXPORT\n   25  float\n   26: glmc_project_z_no(vec3 pos, mat4 m);\n   27  \n   28  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\project_zo.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_unprojecti_zo(vec3 pos, mat4 invMat, vec4 vp, vec3 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_project_zo(vec3 pos, mat4 m, vec4 vp, vec3 dest);\n   23  \n   24  CGLM_EXPORT\n   25  float\n   26: glmc_project_z_zo(vec3 pos, mat4 m);\n   27  \n   28  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\view_lh_no.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_lookat_lh_no(vec3 eye, vec3 center, vec3 up, mat4 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_look_lh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_look_anyup_lh_no(vec3 eye, vec3 dir, mat4 dest);\n   27  \n   28  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\view_lh_zo.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_lookat_lh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_look_lh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_look_anyup_lh_zo(vec3 eye, vec3 dir, mat4 dest);\n   27  \n   28  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\view_rh_no.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_lookat_rh_no(vec3 eye, vec3 center, vec3 up, mat4 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_look_rh_no(vec3 eye, vec3 dir, vec3 up, mat4 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_look_anyup_rh_no(vec3 eye, vec3 dir, mat4 dest);\n   27  \n   28  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm\\call\\clipspace\\view_rh_zo.h:\n   16  CGLM_EXPORT\n   17  void\n   18: glmc_lookat_rh_zo(vec3 eye, vec3 center, vec3 up, mat4 dest);\n   19  \n   20  CGLM_EXPORT\n   21  void\n   22: glmc_look_rh_zo(vec3 eye, vec3 dir, vec3 up, mat4 dest);\n   23  \n   24  CGLM_EXPORT\n   25  void\n   26: glmc_look_anyup_rh_zo(vec3 eye, vec3 dir, mat4 dest);\n   27  \n   28  #ifdef __cplusplus\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\test\\models\\glTF2\\BoxTextured-glTF-techniqueWebGL\\BoxTextured0.vert:\n    1  precision highp float;\n    2: uniform mat4 u_modelViewMatrix;\n    3: uniform mat4 u_projectionMatrix;\n    4  uniform mat3 u_normalMatrix;\n    5  attribute vec3 a_position;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\test\\models\\glTF\\TwoBoxes\\Box0VS.glsl:\n    4  varying vec3 v_normal;\n    5  uniform mat3 u_normalMatrix;\n    6: uniform mat4 u_modelViewMatrix;\n    7: uniform mat4 u_projectionMatrix;\n    8  void main(void) {\n    9  vec4 pos = u_modelViewMatrix * vec4(a_position,1.0);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\test\\models\\glTF\\CesiumMilkTruck\\CesiumMilkTruck0VS.glsl:\n    4  varying vec3 v_normal;\n    5  uniform mat3 u_normalMatrix;\n    6: uniform mat4 u_modelViewMatrix;\n    7: uniform mat4 u_projectionMatrix;\n    8  void main(void) {\n    9  vec4 pos = u_modelViewMatrix * vec4(a_position,1.0);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\test\\models\\glTF\\CesiumMilkTruck\\CesiumMilkTruck1VS.glsl:\n    4  varying vec3 v_normal;\n    5  uniform mat3 u_normalMatrix;\n    6: uniform mat4 u_modelViewMatrix;\n    7: uniform mat4 u_projectionMatrix;\n    8  attribute vec2 a_texcoord0;\n    9  varying vec2 v_texcoord0;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\test\\models\\glTF\\BoxTextured-glTF-Binary\\BoxTextured.glb:\n    <binary>\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\test\\models\\glTF\\BoxTextured-glTF\\BoxTextured0VS.glsl:\n    4  varying vec3 v_normal;\n    5  uniform mat3 u_normalMatrix;\n    6: uniform mat4 u_modelViewMatrix;\n    7: uniform mat4 u_projectionMatrix;\n    8  attribute vec2 a_texcoord0;\n    9  varying vec2 v_texcoord0;\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\port\\PyAssimp\\scripts\\3d_viewer.py:\n   59  #version 120\n   60  \n   61: uniform mat4 u_viewProjectionMatrix;\n   62: uniform mat4 u_modelMatrix;\n   63  \n   64  uniform vec4 u_materialDiffuse;\n   ..\n   78  #version 130\n   79  \n   80: uniform mat4 u_viewProjectionMatrix;\n   81: uniform mat4 u_modelMatrix;\n   82  \n   83  uniform vec4 u_materialDiffuse;\n   ..\n   97  #version 120\n   98  \n   99: uniform mat4 u_viewProjectionMatrix;\n  100: uniform mat4 u_modelMatrix;\n  101  uniform mat3 u_normalMatrix;\n  102  uniform vec3 u_lightPos;\n  ...\n  136  #version 130\n  137  \n  138: uniform mat4 u_viewProjectionMatrix;\n  139: uniform mat4 u_modelMatrix;\n  140  uniform mat3 u_normalMatrix;\n  141  uniform vec3 u_lightPos;\n  ...\n  200  \n  201  // uniforms\n  202: uniform mat4 u_modelMatrix;\n  203: uniform mat4 u_viewProjectionMatrix;\n  204  uniform mat3 u_normalMatrix;\n  205  uniform vec3 u_lightPos;\n  ...\n  235  \n  236  // uniforms\n  237: uniform mat4 u_modelMatrix;\n  238: uniform mat4 u_viewProjectionMatrix;\n  239  uniform mat3 u_normalMatrix;\n  240  uniform vec3 u_lightPos;\n  ...\n  369  attribute vec3 a_normal; // xyz - normal\n  370  \n  371: uniform mat4 u_modelMatrix;\n  372: uniform mat4 u_viewProjectionMatrix;\n  373: uniform mat4 u_modelViewMatrix;\n  374  uniform vec4 u_materialDiffuse;\n  375  uniform float u_bordersize; // width of the border\n  ...\n  391  in vec3 a_normal; // xyz - normal\n  392  \n  393: uniform mat4 u_modelMatrix;\n  394: uniform mat4 u_viewProjectionMatrix;\n  395: uniform mat4 u_modelViewMatrix;\n  396  uniform vec4 u_materialDiffuse;\n  397  uniform float u_bordersize; // width of the border\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\port\\PyAssimp\\scripts\\3d_viewer_py3.py:\n   61  #version 120\n   62  \n   63: uniform mat4 u_viewProjectionMatrix;\n   64: uniform mat4 u_modelMatrix;\n   65  \n   66  uniform vec4 u_materialDiffuse;\n   ..\n   80  #version 130\n   81  \n   82: uniform mat4 u_viewProjectionMatrix;\n   83: uniform mat4 u_modelMatrix;\n   84  \n   85  uniform vec4 u_materialDiffuse;\n   ..\n   99  #version 120\n  100  \n  101: uniform mat4 u_viewProjectionMatrix;\n  102: uniform mat4 u_modelMatrix;\n  103  uniform mat3 u_normalMatrix;\n  104  uniform vec3 u_lightPos;\n  ...\n  138  #version 130\n  139  \n  140: uniform mat4 u_viewProjectionMatrix;\n  141: uniform mat4 u_modelMatrix;\n  142  uniform mat3 u_normalMatrix;\n  143  uniform vec3 u_lightPos;\n  ...\n  202  \n  203  // uniforms\n  204: uniform mat4 u_modelMatrix;\n  205: uniform mat4 u_viewProjectionMatrix;\n  206  uniform mat3 u_normalMatrix;\n  207  uniform vec3 u_lightPos;\n  ...\n  237  \n  238  // uniforms\n  239: uniform mat4 u_modelMatrix;\n  240: uniform mat4 u_viewProjectionMatrix;\n  241  uniform mat3 u_normalMatrix;\n  242  uniform vec3 u_lightPos;\n  ...\n  371  attribute vec3 a_normal; // xyz - normal\n  372  \n  373: uniform mat4 u_modelMatrix;\n  374: uniform mat4 u_viewProjectionMatrix;\n  375: uniform mat4 u_modelViewMatrix;\n  376  uniform vec4 u_materialDiffuse;\n  377  uniform float u_bordersize; // width of the border\n  ...\n  393  in vec3 a_normal; // xyz - normal\n  394  \n  395: uniform mat4 u_modelMatrix;\n  396: uniform mat4 u_viewProjectionMatrix;\n  397: uniform mat4 u_modelViewMatrix;\n  398  uniform vec4 u_materialDiffuse;\n  399  uniform float u_bordersize; // width of the border\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code\\AssetLib\\M3D\\m3d.h:\n  195      M3D_INDEX numweight; /* number of controlled vertices */\n  196      m3dw_t *weight; /* weights for those vertices */\n  197:     M3D_FLOAT mat4[16]; /* transformation matrix */\n  198  } m3db_t;\n  199  #define m3d_bone_t m3db_t\n  ...\n 2547                  b = &model->bone[i];\n 2548                  if (model->bone[i].parent == M3D_UNDEF) {\n 2549:                     _m3d_mat((M3D_FLOAT *)&b->mat4, &model->vertex[b->pos], &model->vertex[b->ori]);\n 2550                  } else {\n 2551                      _m3d_mat((M3D_FLOAT *)&r, &model->vertex[b->pos], &model->vertex[b->ori]);\n 2552:                     _m3d_mul((M3D_FLOAT *)&b->mat4, (M3D_FLOAT *)&model->bone[b->parent].mat4, (M3D_FLOAT *)&r);\n 2553                  }\n 2554              }\n 2555              for (i = 0; i < model->numbone; i++)\n 2556:                 _m3d_inv((M3D_FLOAT *)&model->bone[i].mat4);\n 2557  #endif\n 2558          }\n ....\n 2636      memcpy(ret, model->bone, model->numbone * sizeof(m3db_t));\n 2637      for (i = 0; i < model->numbone; i++)\n 2638:         _m3d_inv((M3D_FLOAT *)&ret[i].mat4);\n 2639      if (!model->action || actionid >= model->numaction) {\n 2640          model->errcode = M3D_ERR_UNKFRAME;\n ....\n 2723      for (i = 0; i < model->numbone; i++) {\n 2724          if (ret[i].parent == M3D_UNDEF) {\n 2725:             _m3d_mat((M3D_FLOAT *)&ret[i].mat4, &model->vertex[ret[i].pos], &model->vertex[ret[i].ori]);\n 2726          } else {\n 2727              _m3d_mat((M3D_FLOAT *)&r, &model->vertex[ret[i].pos], &model->vertex[ret[i].ori]);\n 2728:             _m3d_mul((M3D_FLOAT *)&ret[i].mat4, (M3D_FLOAT *)&ret[ret[i].parent].mat4, (M3D_FLOAT *)&r);\n 2729          }\n 2730      }\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code\\AssetLib\\glTF2\\glTF2Asset.h:\n  139  struct Skin;\n  140  \n  141: using glTFCommon::mat4;\n  142  using glTFCommon::vec3;\n  143  using glTFCommon::vec4;\n  ...\n  916      std::vector<Ref<Mesh>> meshes;\n  917  \n  918:     Nullable<mat4> matrix;\n  919      Nullable<vec3> translation;\n  920      Nullable<vec4> rotation;\n  ...\n  964  \n  965  struct Skin : public Object {\n  966:     Nullable<mat4> bindShapeMatrix; //!< Floating-point 4x4 transformation matrix stored in column-major order.\n  967      Ref<Accessor> inverseBindMatrices; //!< The ID of the accessor containing the floating-point 4x4 inverse-bind matrices.\n  968      std::vector<Ref<Node>> jointNames; //!< Joint names of the joints (nodes with a jointName property) in this skin.\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code\\AssetLib\\glTF2\\glTF2Exporter.cpp:\n  133  \n  134  /*\n  135:  * Copy a 4x4 matrix from struct aiMatrix to typedef mat4.\n  136   * Also converts from row-major to column-major storage.\n  137   */\n  138: static void CopyValue(const aiMatrix4x4 &v, mat4 &o) {\n  139      o[0] = v.a1;\n  140      o[1] = v.b1;\n  ...\n  159  }\n  160  \n  161: static void IdentityMatrix4(mat4 &o) {\n  162      o[0] = 1;\n  163      o[1] = 0;\n  ...\n 1360      bool bAddCustomizedProperty = this->mProperties->HasPropertyBool(\"GLTF2_CUSTOMIZE_PROPERTY\");\n 1361      if (createSkin) {\n 1362:         mat4 *invBindMatrixData = new mat4[inverseBindMatricesData.size()];\n 1363          for (unsigned int idx_joint = 0; idx_joint < inverseBindMatricesData.size(); ++idx_joint) {\n 1364              CopyValue(inverseBindMatricesData[idx_joint], invBindMatrixData[idx_joint]);\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code\\AssetLib\\glTF2\\glTF2Importer.cpp:\n 1185                      // mapping which makes things doubly-slow.\n 1186  \n 1187:                     mat4 *pbindMatrices = nullptr;\n 1188                      node.skin->inverseBindMatrices->ExtractData(pbindMatrices, nullptr);\n 1189  \n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code\\AssetLib\\glTF\\glTFAsset.h:\n  125  struct Skin;\n  126  \n  127: using glTFCommon::mat4;\n  128  using glTFCommon::vec3;\n  129  using glTFCommon::vec4;\n  ...\n  690      std::vector<Ref<Mesh>> meshes;\n  691  \n  692:     Nullable<mat4> matrix;\n  693      Nullable<vec3> translation;\n  694      Nullable<vec4> rotation;\n  ...\n  737  \n  738  struct Skin : public Object {\n  739:     Nullable<mat4> bindShapeMatrix; //!< Floating-point 4x4 transformation matrix stored in column-major order.\n  740      Ref<Accessor> inverseBindMatrices; //!< The ID of the accessor containing the floating-point 4x4 inverse-bind matrices.\n  741      std::vector<Ref<Node>> jointNames; //!< Joint names of the joints (nodes with a jointName property) in this skin.\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code\\AssetLib\\glTF\\glTFCommon.h:\n  135  typedef float(vec3)[3];\n  136  typedef float(vec4)[4];\n  137: typedef float(mat4)[16];\n  138  \n  139  inline void CopyValue(const glTFCommon::vec3 &v, aiColor4D &out) {\n  ...\n  176  }\n  177  \n  178: inline void CopyValue(const glTFCommon::mat4 &v, aiMatrix4x4 &o) {\n  179      o.a1 = v[0];\n  180      o.b1 = v[1];\n\nC:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code\\AssetLib\\glTF\\glTFExporter.cpp:\n  153  \n  154  /*\n  155:  * Copy a 4x4 matrix from struct aiMatrix to typedef mat4.\n  156   * Also converts from row-major to column-major storage.\n  157   */\n  158: static void CopyValue(const aiMatrix4x4& v, glTF::mat4& o)\n  159  {\n  160      o[ 0] = v.a1; o[ 1] = v.b1; o[ 2] = v.c1; o[ 3] = v.d1;\n  ...\n  169  }\n  170  \n  171: static void IdentityMatrix4(glTF::mat4& o)\n  172  {\n  173      o[ 0] = 1; o[ 1] = 0; o[ 2] = 0; o[ 3] = 0;\n  ...\n  791      // Create the Accessor for skinRef->inverseBindMatrices\n  792      if (createSkin) {\n  793:         mat4* invBindMatrixData = new mat4[inverseBindMatricesData.size()];\n  794          for ( unsigned int idx_joint = 0; idx_joint < inverseBindMatricesData.size(); ++idx_joint) {\n  795              CopyValue(inverseBindMatricesData[idx_joint], invBindMatrixData[idx_joint]);\n\n1610 matches across 191 files\n",
			"settings":
			{
				"buffer_size": 220938,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "include/assimp/matrix4x4.h",
			"settings":
			{
				"buffer_size": 11771,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "include/assimp-5.4.2/port/dAssimp/assimp/scene.d",
			"settings":
			{
				"buffer_size": 10181,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/Seafarer/Downloads/gltut-0.4.0/gltut-0.4.0/Tut 08 Getting Oriented/CameraRelative.cpp",
			"settings":
			{
				"buffer_size": 8537,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/C/Users/Seafarer/Downloads/gltut-0.4.0/gltut-0.4.0/Tut 08 Getting Oriented/QuaternionYPR.cpp",
			"settings":
			{
				"buffer_size": 5659,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "Make",
	"build_system_choices":
	[
		[
			[
				[
					"",
					""
				],
				[
					"",
					"Clean"
				],
				[
					"",
					"Test"
				],
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				]
			],
			[
				"",
				""
			]
		],
		[
			[
				[
					"Batch",
					""
				],
				[
					"Batch",
					"Run"
				],
				[
					"Packages/NASM x86 Assembly/NASM.sublime-build",
					""
				]
			],
			[
				"Batch",
				""
			]
		],
		[
			[
				[
					"Fighters",
					""
				],
				[
					"Fighters",
					"Run"
				],
				[
					"Packages/NASM x86 Assembly/NASM.sublime-build",
					""
				]
			],
			[
				"Fighters",
				""
			]
		],
		[
			[
				[
					"Figters",
					""
				],
				[
					"Figters",
					"Run"
				],
				[
					"Packages/NASM x86 Assembly/NASM.sublime-build",
					""
				]
			],
			[
				"Figters",
				"Run"
			]
		],
		[
			[
				[
					"Figters",
					""
				],
				[
					"Packages/NASM x86 Assembly/NASM.sublime-build",
					""
				]
			],
			[
				"Figters",
				""
			]
		],
		[
			[
				[
					"Make",
					""
				],
				[
					"Make",
					"Clean"
				],
				[
					"Make",
					"Test"
				]
			],
			[
				"Make",
				""
			]
		],
		[
			[
				[
					"Make",
					""
				],
				[
					"Make",
					"Clean"
				],
				[
					"Make",
					"Test"
				],
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				]
			],
			[
				"Make",
				""
			]
		],
		[
			[
				[
					"Make",
					""
				],
				[
					"Make",
					"Play"
				],
				[
					"Make",
					"Clean"
				]
			],
			[
				"Make",
				"Play"
			]
		],
		[
			[
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"ROS",
					""
				],
				[
					"ROS",
					"Run"
				],
				[
					"Packages/NASM x86 Assembly/NASM.sublime-build",
					""
				]
			],
			[
				"ROS",
				""
			]
		],
		[
			[
				[
					"Run Batch",
					""
				],
				[
					"Packages/NASM x86 Assembly/NASM.sublime-build",
					""
				]
			],
			[
				"Run Batch",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 131.199996948,
		"history":
		[
			"help",
			"run",
			"a",
			"g",
			"a"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Seafarer/Projects/2D Worlds"
	],
	"file_history":
	[
		"/C/Users/Seafarer/Projects/2D Worlds/archive/01/Makefile",
		"/C/Users/Seafarer/Projects/2D Worlds/Makefile",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/test/src/test_mat4.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp/types.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/port/dAssimp/assimp/mesh.d",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/port/jassimp/jassimp/src/jassimp/AiConfigOptions.java",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/CMakeLists.txt",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/zlib/inftrees.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/zlib/inflate.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/zlib/zutil.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/zlib/adler32.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Common/ZipArchiveIOSystem.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/archive/04/main.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp/vector3.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm/vec3.h",
		"/C/Users/Seafarer/Projects/2D Worlds/archive/06/main.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/src/vec3.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/port/dAssimp/assimp/scene.d",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/docs/source/vec3.rst",
		"/C/Users/Seafarer/Downloads/jap script.asm",
		"/C/Users/Seafarer/Projects/2D Worlds/archive/05/01/main.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/AssetLib/MD5/MD5Parser.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/samples/SimpleTexturedDirectx11/SimpleTexturedDirectx11/ModelLoader.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Material/MaterialSystem.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/archive/03/main.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/draco/src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_data.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/docs/source/getting_started.rst",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/include/cglm/types.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/include/cglm/common.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/include/cglm/vec3.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp/scene.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm-0.9.4/include/cglm/cglm.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/include/assimp/scene.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/include/assimp/revision.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/include/assimp/config.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/AssetLib/glTF/glTFAssetWriter.inl",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Common/DefaultIOStream.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Common/ImporterRegistry.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Common/Assimp.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/GLFW/src/egl_context.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/PostProcessing/ConvertToLHProcess.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/CMakeLists.txt",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/rapidjson/include/rapidjson/prettywriter.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/rapidjson/include/rapidjson/writer.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/contrib/rapidjson/include/rapidjson/stringbuffer.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/include/assimp/Base64.hpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/CApi/CInterfaceIOWrapper.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/include/assimp/revision.h.in",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/cmake-modules/CoverallsGenerateGcov.cmake",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Common/Version.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Common/assbin_chunks.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/include/assimp/Hash.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/AssetLib/Obj/ObjFileImporter.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/code/Common/DefaultLogger.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/include/assimp-5.4.2/include/assimp/config.h.in",
		"/C/Users/Seafarer/Projects/2D Worlds/archive/05/main.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm/clipspace/view_rh.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm/cam.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm/vec2.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm/cglm.h",
		"/C/Users/Seafarer/Projects/2D Worlds/archive/GLFW/examples/particles.c",
		"/C/Users/Seafarer/Projects/2D Worlds/include/cglm/vec2-ext.h",
		"/C/Users/Seafarer/Projects/2D Worlds/include/glad/gl.h",
		"/C/Users/Seafarer/Projects/3D Worlds/Makefile",
		"/C/Users/Seafarer/Projects/2D Worlds/assets/shaders/default.glsl",
		"/C/Users/Seafarer/Projects/3D Worlds/main.c",
		"/C/Users/Seafarer/Projects/2D Worlds/archive/sdl keyboard.c",
		"/C/Users/Seafarer/Projects/2D Worlds/share/aclocal/sdl2.m4",
		"/C/Users/Seafarer/Projects/2D Worlds/include/glad_gl.c",
		"/C/Users/Seafarer/Downloads/platformer.c",
		"/C/Users/Seafarer/Projects/2D Worlds/01_hello_SDL.cpp",
		"/C/Users/Seafarer/Projects/2D Worlds/main.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/tests/empty.c",
		"/C/Users/Seafarer/Projects/Graphics/Makefile",
		"/C/Users/Seafarer/Projects/Graphics/main.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/deps/glad_gl.c",
		"/C/Users/Seafarer/Projects/Graphics/include/glad/glad.h",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/tests/glfwinfo.c",
		"/C/Users/Seafarer/Projects/Quest/system.asm",
		"/C/Users/Seafarer/Projects/Graphics/quest.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/win32_monitor.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/cocoa_init.m",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/deps/tinycthread.h.gch",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/internal.h",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/win32_window.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/win32_init.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/input.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/init.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/window.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/cocoa_monitor.m",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/include/GLFW/glfw3.h",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/src/context.c",
		"/C/Users/Seafarer/Projects/Graphics/include/GLFW/examples/offscreen.c",
		"/C/Users/Seafarer/Downloads/glfw-3.3.8/build/Makefile",
		"/C/Users/Seafarer/Projects/Graphics/p.sublime-project",
		"/C/Users/Seafarer/Projects/Graphics/tinycthread.h",
		"/C/Users/Seafarer/Projects/Quest/p.sublime-project",
		"/C/Users/Seafarer/Projects/Quest/Makefile",
		"/C/Users/Seafarer/Projects/Quest/src/main.c",
		"/C/Users/Seafarer/Projects/Quest/main.c",
		"/C/Users/Seafarer/AppData/Roaming/Sublime Text/Packages/User/make.sublime-build",
		"/C/Users/Seafarer/Projects/Quest/run",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/macros/scripts/text.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/home/text_script.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/engine/pokemon/bills_pc.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/home/map_objects.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/data/maps/objects/BillsHouse.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/constants/music_constants.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/data/text/text_2.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/engine/events/hidden_objects/bills_house_pc.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/scripts/BillsHouse.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/text/BillsHouse.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/text/CeruleanCity.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/scripts/BikeShop.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/scripts/CeruleanCity.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/scripts/CeruleanCaveB1F.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/scripts/CeladonMansion1F.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/home/window.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/home/overworld_text.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/data/events/hidden_objects.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/audio/sfx/save_3.asm",
		"/C/cygwin64/home/Seafarer/pokeredbluegreen/engine/movie/title.asm",
		"/C/Users/Seafarer/AppData/Local/Temp/7zO0F82C184/nesasm.tmLanguage",
		"/C/Users/Seafarer/AppData/Roaming/Sublime Text/Packages/User/Mariana.sublime-color-scheme",
		"/C/Users/Seafarer/AppData/Local/Temp/7zO4645FA74/RGBASM.sublime-syntax",
		"/C/Users/Seafarer/AppData/Local/Temp/7zO46451982/RGBASM.sublime-syntax",
		"/C/Users/Seafarer/AppData/Local/Temp/7zO464C5D9B/NASM.sublime-syntax",
		"/C/Users/Seafarer/AppData/Local/Temp/7zO4646205B/RGBASM.sublime-syntax"
	],
	"find":
	{
		"height": 22.4
	},
	"find_in_files":
	{
		"height": 190.4,
		"where_history":
		[
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\cglm-0.9.4",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\*.cpp\\",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\*.cpp",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\Assimp-5.4.2",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\GLFW",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\code",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2",
			"C:\\Users\\Seafarer\\Projects\\2D Worlds\\include\\assimp-5.4.2\\include\\assimp",
			"./include/cglm",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"glfw",
			"pos[1",
			"objects",
			"skelVertexShader",
			"skelShaderProgram",
			"loadModel",
			"bone",
			"loadModel",
			"createObject",
			"icosa",
			"m_BoneIDs",
			"eTransform * ",
			"MAX_BONE_INFLUENCE",
			"MAX_BONE_WEIGHTS",
			"finalBonesMatrices",
			"aiVertexWeight",
			"MAX_BONE_WEIGHTS",
			"objectColor",
			"skelShaderP",
			"shaderProgram",
			"skelShaderProgram",
			"skelVertexShader",
			"skelVertexShaderSource",
			"typedef",
			"type",
			"struct",
			"type",
			"mat4",
			"typedef",
			"mat4",
			"struct mat4",
			"loadModel",
			"processNode",
			"processMesh",
			"Uniform",
			"bones",
			"[i].o",
			".bones",
			"finalBonesMatrices",
			"skelVertexShaderSource",
			"mat4.",
			"mat4",
			"]\\",
			"mat4",
			"struct mat4",
			"typedef mat4",
			"struct aiMatrix4x4",
			"aiMatrix4x4",
			"m_BoneIDs",
			"len",
			"m_BoneIDs",
			"mVertexId",
			"malloc",
			"ii",
			"Bone",
			"len",
			"string",
			";\n",
			"data",
			"aiString",
			"typedef",
			"\naiString",
			"aiString",
			"typedef aiString",
			"struct aiNode",
			"boneCount",
			"struct aiBone",
			"mBones",
			"norm",
			"vertexShaderSource",
			"MAX_BONE_WEIGHTS",
			"MAX_BONE_INFLUENCE",
			"m_BoneIDs",
			"4",
			"aiCreateAnimMesh",
			"inflate_fast(",
			"inflate_table(",
			"inflate_table)",
			"adler32",
			"crc32",
			"inflateInit2_",
			"call_zseek64",
			"Icontrib",
			"unzGetFilePos",
			"Material",
			"CApi",
			"Common",
			"ADD_ASSIMP_IMPORTER",
			"AssetLib/",
			"AssetLib/Obj",
			"COLLADA",
			"collada",
			"MD3",
			"DASSIMP_BUILD_NO_MD3_IMPORTER",
			"lightColor",
			"skyColor",
			"clearMaxB",
			"clearMaxG",
			"+1.0",
			"1.0f, 1.0f, 1.0f",
			"lightColor",
			"aSize",
			"lightColor",
			"lightPos",
			"glEnable",
			"glClear",
			"lightVAO",
			"glDrawArrays",
			"lightColor",
			"light",
			"lightFragment",
			"light",
			"aSize",
			"size",
			"lightVAO",
			"windowWidth",
			"lightPos",
			"col",
			"Linear",
			"Yaw",
			"cameraTarget",
			"mouse",
			"mouseCallback",
			"ambient",
			"clearR",
			"Linear",
			"linear",
			"printf"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"O",
			"boneIndex",
			"indexCount",
			"objects[i]",
			"model",
			"Model",
			"loadModel",
			"",
			"aiMesh",
			"aimesh",
			"meshes[1]",
			"meshes[0]",
			"texCol",
			"meshes[1]",
			"meshes[2]",
			"meshes[1]",
			"/",
			"lightMove",
			"billboardVertexShader",
			"lightMove",
			"billboardVertexShader",
			"lightViewModel",
			"lightViewModelMat",
			"aSize",
			"aPos",
			"cameraStrafe",
			"timer"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38774,
						"regions":
						{
						},
						"selection":
						[
							[
								30688,
								30688
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1560.8,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5329,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/assimp/types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16945,
						"regions":
						{
						},
						"selection":
						[
							[
								10224,
								10227
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 6468.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "include/assimp-5.4.2/port/dAssimp/assimp/mesh.d",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16285,
						"regions":
						{
						},
						"selection":
						[
							[
								5475,
								5486
							]
						],
						"settings":
						{
							"syntax": "Packages/D/D.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1988.8,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 220938,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								133392,
								133399
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 60214.4,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "include/assimp/matrix4x4.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11771,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3424.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "include/assimp-5.4.2/port/dAssimp/assimp/scene.d",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10181,
						"regions":
						{
						},
						"selection":
						[
							[
								8534,
								8544
							]
						],
						"settings":
						{
							"syntax": "Packages/D/D.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 806.4,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Users/Seafarer/Downloads/gltut-0.4.0/gltut-0.4.0/Tut 08 Getting Oriented/CameraRelative.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8537,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1464.8,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/Seafarer/Downloads/gltut-0.4.0/gltut-0.4.0/Tut 08 Getting Oriented/QuaternionYPR.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5659,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2161.6,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.4
	},
	"input":
	{
		"height": 178.4
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 130.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Make",
	"project": "p.sublime-project",
	"replace":
	{
		"height": 41.6
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 188.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
